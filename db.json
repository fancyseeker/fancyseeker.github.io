{"meta":{"version":1,"warehouse":"1.0.1"},"models":{"Asset":[{"_id":"themes/landscape-plus/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape-plus/source/img/scrollup.png","path":"img/scrollup.png","modified":0},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape-plus/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape-plus/source/css/images/roughcloth.png","path":"css/images/roughcloth.png","modified":0},{"_id":"themes/landscape-plus/source/css/images/cloud.png","path":"css/images/cloud.png","modified":0},{"_id":"themes/landscape-plus/source/css/images/board.png","path":"css/images/board.png","modified":0},{"_id":"themes/landscape-plus/source/css/images/banner.jpg.bak","path":"css/images/banner.jpg.bak","modified":0},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0},{"_id":"themes/landscape-plus/source/css/bdshare.styl","path":"css/bdshare.styl","modified":0},{"_id":"themes/landscape-plus/source/css/images/bg.png","path":"css/images/bg.png","modified":0},{"_id":"source/img/vim2/winmanager_with_nerdtree_and_taglist.png","path":"img/vim2/winmanager_with_nerdtree_and_taglist.png","modified":0},{"_id":"source/img/vim2/vim-airline-demo.gif","path":"img/vim2/vim-airline-demo.gif","modified":0},{"_id":"source/img/vim2/tabline_in_airline.gif","path":"img/vim2/tabline_in_airline.gif","modified":0},{"_id":"source/img/vim2/set_patched_font_for_terminal.png","path":"img/vim2/set_patched_font_for_terminal.png","modified":0},{"_id":"source/img/vim2/github_create_repo.png","path":"img/vim2/github_create_repo.png","modified":0},{"_id":"source/img/vim2/add_sshkey_for_github.png","path":"img/vim2/add_sshkey_for_github.png","modified":0},{"_id":"source/img/vim2/Screenshot_for_my_vim.png","path":"img/vim2/Screenshot_for_my_vim.png","modified":0},{"_id":"source/img/vim1/vim-intro2.gif","path":"img/vim1/vim-intro2.gif","modified":0},{"_id":"source/img/vim1/vim-indro1.gif","path":"img/vim1/vim-indro1.gif","modified":0},{"_id":"source/img/vim1/my_vim_without_plugin.png","path":"img/vim1/my_vim_without_plugin.png","modified":0},{"_id":"source/img/ssh_connect/testPuTTY.jpg","path":"img/ssh_connect/testPuTTY.jpg","modified":0},{"_id":"source/img/ssh_connect/sshlogin.jpg","path":"img/ssh_connect/sshlogin.jpg","modified":0},{"_id":"source/img/ssh_connect/session.jpg","path":"img/ssh_connect/session.jpg","modified":0},{"_id":"source/img/ssh_connect/puttygen.jpg","path":"img/ssh_connect/puttygen.jpg","modified":0},{"_id":"source/img/ssh_connect/pksucc.jpg","path":"img/ssh_connect/pksucc.jpg","modified":0},{"_id":"source/img/ssh_connect/pkpos.jpg","path":"img/ssh_connect/pkpos.jpg","modified":0},{"_id":"source/img/ssh_connect/passphrase.jpg","path":"img/ssh_connect/passphrase.jpg","modified":0},{"_id":"source/img/ssh_connect/PuTTYgen_pk.jpg","path":"img/ssh_connect/PuTTYgen_pk.jpg","modified":0},{"_id":"source/img/ssh_connect/PuTTYgen_all.jpg","path":"img/ssh_connect/PuTTYgen_all.jpg","modified":0},{"_id":"source/img/ssh_connect/PuTTYconfig.jpg","path":"img/ssh_connect/PuTTYconfig.jpg","modified":0},{"_id":"source/img/repo_config/repofile.png","path":"img/repo_config/repofile.png","modified":0},{"_id":"source/img/repo_config/fedorarepo.png","path":"img/repo_config/fedorarepo.png","modified":0},{"_id":"source/img/repo_config/163mirror.png","path":"img/repo_config/163mirror.png","modified":0},{"_id":"source/img/google/searchtips.jpg","path":"img/google/searchtips.jpg","modified":0},{"_id":"source/img/forwhat/heaven_or_hell.jpg","path":"img/forwhat/heaven_or_hell.jpg","modified":0},{"_id":"source/img/f17bg/my_wallpaper.jpg","path":"img/f17bg/my_wallpaper.jpg","modified":0},{"_id":"source/img/f17bg/bmbg.png","path":"img/f17bg/bmbg.png","modified":0},{"_id":"source/img/f17bg/beefy-miracle.png","path":"img/f17bg/beefy-miracle.png","modified":0},{"_id":"source/img/asus-n61/wnetcard.jpg","path":"img/asus-n61/wnetcard.jpg","modified":0},{"_id":"source/img/asus-n61/unscrewfan.jpg","path":"img/asus-n61/unscrewfan.jpg","modified":0},{"_id":"source/img/asus-n61/touchpadcable.jpg","path":"img/asus-n61/touchpadcable.jpg","modified":0},{"_id":"source/img/asus-n61/screw.jpg","path":"img/asus-n61/screw.jpg","modified":0},{"_id":"source/img/asus-n61/raise.jpg","path":"img/asus-n61/raise.jpg","modified":0},{"_id":"source/img/asus-n61/plugnetcard.jpg","path":"img/asus-n61/plugnetcard.jpg","modified":0},{"_id":"source/img/asus-n61/plugmem.jpg","path":"img/asus-n61/plugmem.jpg","modified":0},{"_id":"source/img/asus-n61/plugfan.jpg","path":"img/asus-n61/plugfan.jpg","modified":0},{"_id":"source/img/asus-n61/plugdvd.jpg","path":"img/asus-n61/plugdvd.jpg","modified":0},{"_id":"source/img/asus-n61/plugcpu.jpg","path":"img/asus-n61/plugcpu.jpg","modified":0},{"_id":"source/img/asus-n61/outtpcable.jpg","path":"img/asus-n61/outtpcable.jpg","modified":0},{"_id":"source/img/asus-n61/outline.jpg","path":"img/asus-n61/outline.jpg","modified":0},{"_id":"source/img/asus-n61/outcable.jpg","path":"img/asus-n61/outcable.jpg","modified":0},{"_id":"source/img/asus-n61/othercable.jpg","path":"img/asus-n61/othercable.jpg","modified":0},{"_id":"source/img/asus-n61/opencover.jpg","path":"img/asus-n61/opencover.jpg","modified":0},{"_id":"source/img/asus-n61/n61.jpg","path":"img/asus-n61/n61.jpg","modified":0},{"_id":"source/img/asus-n61/keyboarddetail.jpg","path":"img/asus-n61/keyboarddetail.jpg","modified":0},{"_id":"source/img/asus-n61/keyboard.jpg","path":"img/asus-n61/keyboard.jpg","modified":0},{"_id":"source/img/asus-n61/innerfan.jpg","path":"img/asus-n61/innerfan.jpg","modified":0},{"_id":"source/img/asus-n61/heatsink.jpg","path":"img/asus-n61/heatsink.jpg","modified":0},{"_id":"source/img/asus-n61/hdout.jpg","path":"img/asus-n61/hdout.jpg","modified":0},{"_id":"source/img/asus-n61/hdcover.jpg","path":"img/asus-n61/hdcover.jpg","modified":0},{"_id":"source/img/asus-n61/hd.jpg","path":"img/asus-n61/hd.jpg","modified":0},{"_id":"source/img/asus-n61/getfan.jpg","path":"img/asus-n61/getfan.jpg","modified":0},{"_id":"source/img/asus-n61/getcpu.jpg","path":"img/asus-n61/getcpu.jpg","modified":0},{"_id":"source/img/asus-n61/fanout.jpg","path":"img/asus-n61/fanout.jpg","modified":0},{"_id":"source/img/asus-n61/edge.jpg","path":"img/asus-n61/edge.jpg","modified":0},{"_id":"source/img/asus-n61/cr2032.jpg","path":"img/asus-n61/cr2032.jpg","modified":0},{"_id":"source/img/asus-n61/cpuzone.jpg","path":"img/asus-n61/cpuzone.jpg","modified":0},{"_id":"source/img/asus-n61/cpugpu.jpg","path":"img/asus-n61/cpugpu.jpg","modified":0},{"_id":"source/img/asus-n61/corezone.jpg","path":"img/asus-n61/corezone.jpg","modified":0},{"_id":"source/img/asus-n61/cmosbattery.jpg","path":"img/asus-n61/cmosbattery.jpg","modified":0},{"_id":"source/img/asus-n61/cmos.jpg","path":"img/asus-n61/cmos.jpg","modified":0},{"_id":"source/img/asus-n61/cleanfan.jpg","path":"img/asus-n61/cleanfan.jpg","modified":0},{"_id":"source/img/asus-n61/cabledetail.jpg","path":"img/asus-n61/cabledetail.jpg","modified":0},{"_id":"source/img/asus-n61/cable.jpg","path":"img/asus-n61/cable.jpg","modified":0},{"_id":"source/img/asus-n61/btcable.jpg","path":"img/asus-n61/btcable.jpg","modified":0},{"_id":"source/img/asus-n61/boardcover.jpg","path":"img/asus-n61/boardcover.jpg","modified":0},{"_id":"source/img/asus-n61/battery.jpg","path":"img/asus-n61/battery.jpg","modified":0},{"_id":"source/img/asus-n61/back.jpg","path":"img/asus-n61/back.jpg","modified":0},{"_id":"source/img/asus-n61/audiocable.jpg","path":"img/asus-n61/audiocable.jpg","modified":0},{"_id":"themes/landscape-plus/source/img/scrollup.png.bak","path":"img/scrollup.png.bak","modified":0},{"_id":"themes/landscape-plus/source/favicon.ico","path":"favicon.ico","modified":0},{"_id":"themes/landscape-plus/source/css/images/cloud04.png","path":"css/images/cloud04.png","modified":0},{"_id":"themes/landscape-plus/source/css/images/cloud03.png","path":"css/images/cloud03.png","modified":0},{"_id":"themes/landscape-plus/source/css/images/cloud02.png","path":"css/images/cloud02.png","modified":0},{"_id":"themes/landscape-plus/source/css/images/cloud01.png","path":"css/images/cloud01.png","modified":0}],"Cache":[{"_id":"themes/landscape-plus/Gruntfile.js","shasum":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1428302346276},{"_id":"themes/landscape-plus/LICENSE","shasum":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1428302346279},{"_id":"themes/landscape-plus/README.md","shasum":"2f9dafcbebe471b76562c74c4fe8fd1c21fe1514","modified":1428302346281},{"_id":"themes/landscape-plus/_config.yml","shasum":"3b848734ff5e0a0b80612abfa0667e993b8f370f","modified":1428336814417},{"_id":"themes/landscape-plus/languages/default.yml","shasum":"e5dbafe7435258ffe14ce9bfaa4ae811c3d051a6","modified":1428302346285},{"_id":"themes/landscape-plus/languages/zh-CN.yml","shasum":"bed11156e5fae468008e52b79721082ee292b5fd","modified":1428302346287},{"_id":"themes/landscape-plus/languages/zh-TW.yml","shasum":"2e6324ae793cb5210de5316454e934086415ae06","modified":1428302346289},{"_id":"themes/landscape-plus/layout/_partial/after-footer.ejs","shasum":"48b094485a581ab247e6546e4823412872cd74b1","modified":1428302346300},{"_id":"themes/landscape-plus/layout/_partial/archive-post.ejs","shasum":"5062c723721d8497eebad372f57092ade45041f4","modified":1428302346302},{"_id":"themes/landscape-plus/layout/_partial/archive.ejs","shasum":"e440311811c74c20cbdf70f6fd44fd4855d059ae","modified":1428302346303},{"_id":"themes/landscape-plus/layout/_partial/article.ejs","shasum":"aee9a15348d747b6e02a1476036dc4f6f827e1dc","modified":1428302346311},{"_id":"themes/landscape-plus/layout/_partial/footer.ejs","shasum":"c2771f4d31760e1e2441e88251769816dc1964b3","modified":1428302346336},{"_id":"themes/landscape-plus/layout/_partial/google-analytics.ejs","shasum":"ade81710027f55371b1229548fee0754e09b07b6","modified":1428302346340},{"_id":"themes/landscape-plus/layout/_partial/head.ejs","shasum":"51d776d74045b8f26ce32e71b5e74ba6761fb8fd","modified":1428302346344},{"_id":"themes/landscape-plus/layout/_partial/header.ejs","shasum":"ca4ccbbabf610b9d56c61e3f6192921c37860325","modified":1428318239821},{"_id":"themes/landscape-plus/layout/_partial/mathjax.ejs","shasum":"57712a8a3c42ce2584f8327a6bf2e0c2273112f8","modified":1428302346367},{"_id":"themes/landscape-plus/layout/_partial/mobile-nav.ejs","shasum":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1428302346369},{"_id":"themes/landscape-plus/layout/_partial/post/category.ejs","shasum":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1428302346373},{"_id":"themes/landscape-plus/layout/_partial/post/date.ejs","shasum":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1428302346375},{"_id":"themes/landscape-plus/layout/_partial/post/gallery.ejs","shasum":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1428302346375},{"_id":"themes/landscape-plus/layout/_partial/post/nav.ejs","shasum":"5a591d275326bdbbb458215f30d8c1b146bd4341","modified":1428302346378},{"_id":"themes/landscape-plus/layout/_partial/post/nav.ejs.bak","shasum":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1428302346380},{"_id":"themes/landscape-plus/layout/_partial/post/tag.ejs","shasum":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1428302346381},{"_id":"themes/landscape-plus/layout/_partial/post/title.ejs","shasum":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1428302346381},{"_id":"themes/landscape-plus/layout/_partial/sidebar.ejs","shasum":"ec6f23a905f1db0d4634d20e970da10f0cd40a61","modified":1428302346385},{"_id":"themes/landscape-plus/layout/_partial/totop.ejs","shasum":"a94e7999f597d73dc50f05ba53ff422262f8333e","modified":1428302346387},{"_id":"themes/landscape-plus/layout/_widget/archive.ejs","shasum":"3e07880f560b1c8462b19bc5003aaf67756edf09","modified":1428302346389},{"_id":"themes/landscape-plus/layout/_widget/category.ejs","shasum":"864d6db41f5f9a653fd0f1f244a29cd45c73473b","modified":1428302346391},{"_id":"themes/landscape-plus/layout/_widget/links.ejs","shasum":"405a10a963fbf190af3d7b1a43c29277ae6355a5","modified":1428302346393},{"_id":"themes/landscape-plus/layout/_widget/recent_posts.ejs","shasum":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1428302346396},{"_id":"themes/landscape-plus/layout/_widget/tag.ejs","shasum":"20639d8b9bdb8dc0292a359125587aabb7f9575a","modified":1428302346398},{"_id":"themes/landscape-plus/layout/_widget/tagcloud.ejs","shasum":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1428302346400},{"_id":"themes/landscape-plus/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1428543663855},{"_id":"themes/landscape-plus/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1428543663855},{"_id":"themes/landscape-plus/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1428543663855},{"_id":"themes/landscape-plus/layout/layout.ejs","shasum":"5216616dfe4c31952ef872592bd25d7e19407cae","modified":1428505519575},{"_id":"themes/landscape-plus/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1428543663855},{"_id":"themes/landscape-plus/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1428543663855},{"_id":"themes/landscape-plus/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1428543663855},{"_id":"themes/landscape-plus/package.json","shasum":"5e1d9691a353097490e79c632563f1381c4a7b45","modified":1428302346423},{"_id":"themes/landscape-plus/scripts/fancybox.js","shasum":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1428302346426},{"_id":"themes/landscape-plus/source/css/_extend.styl","shasum":"87335b877bd71dd05e3ef670bdd6ae0479f81e9a","modified":1428325775320},{"_id":"themes/landscape-plus/source/css/_partial/archive.styl","shasum":"0cf17ec0c31831471b3144622e5973dbf6610ab4","modified":1428302346447},{"_id":"themes/landscape-plus/source/css/_partial/article.styl","shasum":"3ee5ee08bfe25269657ff00ce11a2708778ecbe0","modified":1428425669197},{"_id":"themes/landscape-plus/source/css/_partial/comment.styl","shasum":"2834870661e490775f9154d71638bfdc72e640a6","modified":1428302346451},{"_id":"themes/landscape-plus/source/css/_partial/footer.styl","shasum":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1428302346454},{"_id":"themes/landscape-plus/source/css/_partial/header.styl","shasum":"5a5c47a7eccca9d597e2869a4d0c5d49b1238516","modified":1428318239825},{"_id":"themes/landscape-plus/source/css/_partial/highlight.styl","shasum":"507f2dd98f332f87bba4d16fd7d548baa9b7545b","modified":1428302346465},{"_id":"themes/landscape-plus/source/css/_partial/mobile.styl","shasum":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1428302346465},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-aside.styl","shasum":"9175ee54a5bbfd3e2b43ce799460ff0a0379745b","modified":1428302346468},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-bottom.styl","shasum":"f6023861b2fbd858946e2108438b5f8f17586179","modified":1428302346469},{"_id":"themes/landscape-plus/source/css/_partial/sidebar.styl","shasum":"0c91d8e0081cf2de5f729c8cf2f42c3a2ae5ccb6","modified":1428302346471},{"_id":"themes/landscape-plus/source/css/_partial/totop.styl","shasum":"a5aadd9948941fca5b9289939562475d42d953a4","modified":1428302346473},{"_id":"themes/landscape-plus/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1428302346476},{"_id":"themes/landscape-plus/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1428302346478},{"_id":"themes/landscape-plus/source/css/_variables.styl","shasum":"4724c333a17c8da84ada62dfb045e66f0c0653e8","modified":1428302346480},{"_id":"themes/landscape-plus/source/css/bdshare.styl","shasum":"560223e44df6c4bd5384f763439fb6d45ea77fb0","modified":1428302346483},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","shasum":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1428543663855},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","shasum":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1428543663855},{"_id":"themes/landscape-plus/source/css/images/cloud.png","shasum":"a70ab5c24e318b24faae57caa6c9d892d16c13f5","modified":1428543663859},{"_id":"themes/landscape-plus/source/css/style.styl","shasum":"af3eb58445a105e93126347a369547b284e5676b","modified":1428320286878},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1428543663859},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1428543663859},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1428543663859},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1428543663859},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1428543663859},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1428543663859},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1428543663859},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1428302346539},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1428302346539},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1428302346540},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1428302346541},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1428302346541},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","shasum":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1428302346542},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","shasum":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1428302346549},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1428302346557},{"_id":"themes/landscape-plus/source/img/scrollup.png","shasum":"26fd669bff0298f741861c7d5cbbad984171393e","modified":1428319488931},{"_id":"themes/landscape-plus/source/js/script.js","shasum":"85fb3a597880b5c28a99e34daa3619660ba2fe39","modified":1428302346559},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","shasum":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1428543663855},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","shasum":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1428543663855},{"_id":"themes/landscape-plus/source/css/images/board.png","shasum":"00d04097d9105315110f233ceefcc0e87d575cdd","modified":1428543663859},{"_id":"themes/landscape-plus/source/css/images/roughcloth.png","shasum":"e9149e2c6faa7c8b52d1ee768221eb47c96883f1","modified":1428543663859},{"_id":"themes/landscape-plus/source/css/images/banner.jpg.bak","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1428543663859},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","shasum":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1428302346511},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","shasum":"8ab703d7b90b2ce281413a83dc7347fc726d3900","modified":1428543663859},{"_id":"public/js/script.js","modified":1428543672814,"shasum":"78c3d6751283af060cd4bbb57f55efff5b1778c4"},{"_id":"public/img/scrollup.png","modified":1428627701000,"shasum":"26fd669bff0298f741861c7d5cbbad984171393e"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1428543672820,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1428543672820,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1428543672821,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1428543672822,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1428543672822,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1428543672823,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1428543672825,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1428543672826,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1428543672827,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1428543672828,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1428543672828,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1428543672829,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1428543672830,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1428543672831,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1428543672832,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1428627701409,"shasum":"21b27f1cdc6eef2aa6ed8f3f0591ad0bc1f7bad5"},{"_id":"public/css/images/roughcloth.png","modified":1428543673307,"shasum":"e9149e2c6faa7c8b52d1ee768221eb47c96883f1"},{"_id":"public/css/images/cloud.png","modified":1428543673309,"shasum":"a70ab5c24e318b24faae57caa6c9d892d16c13f5"},{"_id":"public/css/images/board.png","modified":1428543673310,"shasum":"00d04097d9105315110f233ceefcc0e87d575cdd"},{"_id":"public/css/images/banner.jpg.bak","modified":1428543673313,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/images/banner.jpg","modified":1428543673315,"shasum":"8ab703d7b90b2ce281413a83dc7347fc726d3900"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1428543673316,"shasum":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1428543673318,"shasum":"6225ccc4ec94d060f19efab97ca42d842845b949"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1428627701530,"shasum":"e471023286b7dd1d2ccc72f670a471cfdfeafab7"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1428543673321,"shasum":"0183979056f0b87616cd99d5c54a48f3b771eee6"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1428543673323,"shasum":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe"},{"_id":"public/css/bdshare.css","modified":1428543673354,"shasum":"30f60e27e9a7ed7016815bd1f0fb150a165f2e9e"},{"_id":"public/2015/04/09/hello-world/index.html","modified":1428543673412,"shasum":"ac4e6cef5008c4c70ca682836af115df7b260675"},{"_id":"public/2015/03/21/front-matter/index.html","modified":1428543673421,"shasum":"0ccd4f9f2ee0d9e2f9a7ae303dbafd121a4c481c"},{"_id":"public/2015/03/21/toc-test/index.html","modified":1428543673427,"shasum":"0b455b5bee4d9444199b5ed7fac6a647048094f4"},{"_id":"public/2015/03/19/5th-post/index.html","modified":1428543673432,"shasum":"2de32dc011568c03ff13316e5c12398116436f1d"},{"_id":"public/2015/03/18/another/index.html","modified":1428543673442,"shasum":"06bbfbe980316904e2a2b82fd43d5b8de027a221"},{"_id":"public/2015/03/17/test-for-code-block/index.html","modified":1428543673451,"shasum":"58ea9b59b18a060f5585fa28cd481a43a73d8e9f"},{"_id":"public/archives/index.html","modified":1428627701889,"shasum":"94609778280db2fbe69803c51aad1cec10ce9034"},{"_id":"public/archives/page/2/index.html","modified":1428627701898,"shasum":"d9ff619b20b03ecffd3c8748523dbec5ba86348b"},{"_id":"public/archives/2015/index.html","modified":1428627701974,"shasum":"5b3aaf36bd5558ac6916b637121e354bd13b3c92"},{"_id":"public/archives/2015/page/2/index.html","modified":1428543673481,"shasum":"aba2eeb221f8bb3cc8afa1375dfcdb3f1683adfb"},{"_id":"public/archives/2015/03/index.html","modified":1428543673489,"shasum":"746bdde7820aef20d63cb2f3df937fb5ce0bd63a"},{"_id":"public/archives/2015/04/index.html","modified":1428627701980,"shasum":"af0447a262328c62f9708202e02d8c761477d7f9"},{"_id":"public/index.html","modified":1428627701993,"shasum":"7ce9cd153369c13c1c80000f92100b9775fc8a94"},{"_id":"public/page/2/index.html","modified":1428627702005,"shasum":"d219d19edf9871988a2bc873d42f3102ea7b6760"},{"_id":"public/tags/foo-bar-baz/index.html","modified":1428543673516,"shasum":"a816ba042104f059baf518ad25944842bf7e8f12"},{"_id":"source/_posts/asus-n61.md","shasum":"4c6d3305a5aae7855ec646f3078439445229b8bd","modified":1428336347213},{"_id":"source/_posts/blog.md","shasum":"4cfb77aeaae80afa18787f01f8ee8add75485b32","modified":1428504824949},{"_id":"source/_posts/cncc2012.md","shasum":"91d4a7edba570f86a337071491c798066f10bf59","modified":1428326897491},{"_id":"source/_posts/f17bg.md","shasum":"fd16293107cb66ee3156d34f779da56be4dc1ee7","modified":1428420892384},{"_id":"source/_posts/forwhat.md","shasum":"a8f1278f1078f8389f2285fbc89329b9df2743ef","modified":1428505687004},{"_id":"source/_posts/google.md","shasum":"9eea7ede08a9e97a78c0c63417ccde2b58ff9b27","modified":1428505750376},{"_id":"source/_posts/jianzhanxiaoji.md","shasum":"bcb5c44af5b81c48c0e7ae529c3b132e2be8689a","modified":1428505083507},{"_id":"source/_posts/nfs_xen.md","shasum":"6ede8964bf96d935bd829ce9b9bd09f6e7436e2d","modified":1428504556381},{"_id":"source/_posts/repo_config.md","shasum":"5c35fb9e7a104e6922ed571aa4bad831a484f42c","modified":1428421193677},{"_id":"source/_posts/ssh_connect.md","shasum":"a4d2278fed23fb42bf516c4119de08b478fb6177","modified":1428497285345},{"_id":"source/_posts/ssh_overview.md","shasum":"3002229df6c4f2bc794c0fc745143af601448136","modified":1428495628698},{"_id":"source/_posts/svn.md","shasum":"957ee9982a484a9e04b7895a1c8b54d1b26155d8","modified":1428423456302},{"_id":"source/_posts/vim1.md","shasum":"0fccbb4ee93dce3d7f3e4b5c4cbab3584a0f88bb","modified":1428499291865},{"_id":"source/_posts/vim2.md","shasum":"af25eaa6f6e894c076ae3163c209e1704c0fd958","modified":1428503252924},{"_id":"source/_posts/wordpress2hexo.md","shasum":"6170d68fb37f6d5bbda750c01002449c253d9189","modified":1428510358835},{"_id":"source/img/asus-n61/audiocable.jpg","shasum":"1c7280668d16f820eabc49e1231e5c5d7b0c681b","modified":1428329875470},{"_id":"source/img/asus-n61/back.jpg","shasum":"ba62e41456a653fd3b727d88a0522c57bb4fd074","modified":1428330200305},{"_id":"source/img/asus-n61/battery.jpg","shasum":"1489403a0fc516ad3e82111e47f17b807463ebf0","modified":1428328529726},{"_id":"source/img/asus-n61/boardcover.jpg","shasum":"cd3a0f7ee25eaa2242af924d12557f3054a53fe7","modified":1428328660484},{"_id":"source/img/asus-n61/btcable.jpg","shasum":"87cb2a6747af97bb24dd7b720b17c697958c6d38","modified":1428329821529},{"_id":"source/img/asus-n61/cable.jpg","shasum":"5e93821f3768aa1ad5ac018b7723a759ef7a06b6","modified":1428329688380},{"_id":"source/img/asus-n61/cabledetail.jpg","shasum":"4e5dc99e83c3162efe33049b65466994b6fd5b10","modified":1428329789766},{"_id":"source/img/asus-n61/cleanfan.jpg","shasum":"465d313780b5d18876569c02f97a932fd079222b","modified":1428329050841},{"_id":"source/img/asus-n61/corezone.jpg","shasum":"9e328d058f68f1af74e1364b616d5d15d50581cf","modified":1428328734414},{"_id":"source/img/asus-n61/cpugpu.jpg","shasum":"56f5acb6cf91d03676c26fbf816e54b5851406ec","modified":1428329410163},{"_id":"source/img/asus-n61/cpuzone.jpg","shasum":"69a568d191812474fc17f06f4f9ff96af7a763ff","modified":1428329284414},{"_id":"source/img/asus-n61/edge.jpg","shasum":"a154773f98aa7cc52c0c35d7ec1176e4c6dd095b","modified":1428334127862},{"_id":"source/img/asus-n61/fanout.jpg","shasum":"beef4e47b22d700290b8b8c2923631a1c4ab0755","modified":1428329188597},{"_id":"source/img/asus-n61/getcpu.jpg","shasum":"8163fde3b210eeb4114df33a2d679217e1dc7098","modified":1428329320537},{"_id":"source/img/asus-n61/getfan.jpg","shasum":"784d929c30d00caaa7ecbc4fd23730aa81e4e35d","modified":1428329252612},{"_id":"source/img/asus-n61/hd.jpg","shasum":"9a7b5b2e388189493880f3dc3e87c4ff5132b96c","modified":1428328587792},{"_id":"source/img/asus-n61/hdcover.jpg","shasum":"52a396270951719e6d1da6adb643cb74610558e1","modified":1428328564602},{"_id":"source/img/asus-n61/hdout.jpg","shasum":"7884df58c606db4a2ff4be7f5ce618d212f63888","modified":1428328608035},{"_id":"source/img/asus-n61/heatsink.jpg","shasum":"5a6045fb9b40b56d50540c64a86322d98a6fdb00","modified":1428329374667},{"_id":"source/img/asus-n61/innerfan.jpg","shasum":"b5d29f560a0614a00463040278f3c05cd308ca46","modified":1428329165858},{"_id":"source/img/asus-n61/keyboard.jpg","shasum":"93ad6f9198d11cb94af4710d312648db0b194db9","modified":1428329616245},{"_id":"source/img/asus-n61/keyboarddetail.jpg","shasum":"d05a8904f946911277285acf87b8ce43ae260f07","modified":1428329640378},{"_id":"source/img/asus-n61/n61.jpg","shasum":"3fbe2112a7c77be56257047b04577c07107502f1","modified":1428327558566},{"_id":"source/img/asus-n61/opencover.jpg","shasum":"13b0a9b0239da9c78293807c9647d6c6f614b120","modified":1428330176163},{"_id":"source/img/asus-n61/othercable.jpg","shasum":"3a085e7386ca512ab2f3cf747c07f4c12c74cc0d","modified":1428329749770},{"_id":"source/img/asus-n61/outcable.jpg","shasum":"691d683e7a1ef76f7cc3419986d0f9242fffcee3","modified":1428329712730},{"_id":"source/img/asus-n61/outtpcable.jpg","shasum":"38e768836332bce742bc96339bddfa426865bd1b","modified":1428330150514},{"_id":"source/img/asus-n61/plugcpu.jpg","shasum":"3d248a04f66901af960b40392f9e16a6c0d9d557","modified":1428329301877},{"_id":"source/img/asus-n61/plugdvd.jpg","shasum":"faccf85fc9650db43766d24fb6c8e9c6a4055445","modified":1428329529393},{"_id":"source/img/asus-n61/plugfan.jpg","shasum":"c2c5dafd522578a8fc02f7c7b16ddb9de1e59ab6","modified":1428329086024},{"_id":"source/img/asus-n61/plugmem.jpg","shasum":"13d02ce80936e380d72653cbfd49819d7ad4c70e","modified":1428328780103},{"_id":"source/img/asus-n61/plugnetcard.jpg","shasum":"975f8cf4d025e73f8c879ee289fc74ca07eeba33","modified":1428329485061},{"_id":"source/img/asus-n61/raise.jpg","shasum":"235bd6d9d5853053f59c2922c6f0cc80d46ce2c3","modified":1428331243221},{"_id":"source/img/asus-n61/screw.jpg","shasum":"4d0a18d81463805d608708d63bf5fe5c6c121598","modified":1428330911866},{"_id":"source/img/asus-n61/touchpadcable.jpg","shasum":"d87bec1dc5f3b5b6675790a6ccc595fc949e0373","modified":1428330066212},{"_id":"source/img/asus-n61/unscrewfan.jpg","shasum":"00a651799ad7db4868b3bdee6330f53c0561a248","modified":1428329121225},{"_id":"source/img/asus-n61/wnetcard.jpg","shasum":"dcdc29ecaaab88681bb4ddbd53b284f47222ed46","modified":1428329459667},{"_id":"source/img/f17bg/bmbg.png","shasum":"7d200f3eeabc999d627e3f0a6c5005358a5e863d","modified":1428419995529},{"_id":"source/img/forwhat/heaven_or_hell.jpg","shasum":"130742426bd7cf83141c4f642e7509dd24ffe1b2","modified":1428421389489},{"_id":"source/img/repo_config/fedorarepo.png","shasum":"c85032648dff2d977f1def9b187bf6b2682265a2","modified":1428418800558},{"_id":"source/img/ssh_connect/PuTTYconfig.jpg","shasum":"010ff08d4fbf078768c04f61cf3807666c1cf609","modified":1428495325893},{"_id":"source/img/ssh_connect/PuTTYgen_all.jpg","shasum":"fe70bce8030685f5ca5cdae3e9d3d898afb53b9d","modified":1428495150782},{"_id":"source/img/ssh_connect/PuTTYgen_pk.jpg","shasum":"2153b955346532eaf4e4d88f3505f1180974e170","modified":1428495193364},{"_id":"source/img/ssh_connect/passphrase.jpg","shasum":"f979317a08de1ac541bf0480b6760b83d3dc8805","modified":1428495247843},{"_id":"source/img/ssh_connect/pkpos.jpg","shasum":"550c5f7ed41958777b602236b9b6987a7aba9a0b","modified":1428495354519},{"_id":"source/img/ssh_connect/pksucc.jpg","shasum":"5db8cc78e2d80861e6bcfecde4be1d1463b0abb7","modified":1428495281776},{"_id":"source/img/ssh_connect/puttygen.jpg","shasum":"1ab18b4ff0a4668cc06ee34dc310a81b1cc00042","modified":1428495049677},{"_id":"source/img/ssh_connect/session.jpg","shasum":"e1568eece01b8fb5e7647796658c9c0d932fd2aa","modified":1428495382073},{"_id":"source/img/ssh_connect/sshlogin.jpg","shasum":"4c66d9240bb9bda710191fbade5009b29d437034","modified":1428495432578},{"_id":"source/img/ssh_connect/testPuTTY.jpg","shasum":"8800f1ba1ea118d061e5123fdd83784d135c1d57","modified":1428495443664},{"_id":"source/img/vim2/add_sshkey_for_github.png","shasum":"f393c135307850f05f05925010bb5144b4786b98","modified":1428502458622},{"_id":"source/img/vim2/github_create_repo.png","shasum":"45599de96890dc078579c43305c15b89cc024be9","modified":1428502008582},{"_id":"source/img/asus-n61/cmos.jpg","shasum":"6334da1c791abc5043a75f982b00d4d6a872a417","modified":1428334152199},{"_id":"source/img/asus-n61/cmosbattery.jpg","shasum":"87376ff952e7f9368ba1c8eb92a1752935472907","modified":1428334218378},{"_id":"source/img/asus-n61/cr2032.jpg","shasum":"a1d8372e9b26449251c72d2fcb28682675af791b","modified":1428334264381},{"_id":"source/img/asus-n61/outline.jpg","shasum":"38becd3d72a729e22f9bf799575e1058aee08195","modified":1428328694560},{"_id":"source/img/repo_config/163mirror.png","shasum":"7ab456da15bf5aac95644f5080b555958ef58fdc","modified":1428418689386},{"_id":"source/img/vim1/my_vim_without_plugin.png","shasum":"47c15e791acc373859d39f6a1dccc0a635fc49d4","modified":1428497868206},{"_id":"source/img/vim2/set_patched_font_for_terminal.png","shasum":"a922bd4d3fb8dcb0c57484cae9c55905d388959e","modified":1428501516033},{"_id":"source/img/vim2/winmanager_with_nerdtree_and_taglist.png","shasum":"04990a6208c51b41949fdb7e1de43510a0353556","modified":1428501381348},{"_id":"source/img/vim2/Screenshot_for_my_vim.png","shasum":"b8c932061bda0d9e9358e0dd7f440c5f5652ad8c","modified":1428499335618},{"_id":"source/img/vim2/tabline_in_airline.gif","shasum":"ea6a1b221f3ba8672fb47847aebed1be69f81fee","modified":1428501616320},{"_id":"themes/landscape-plus/source/css/images/cloud01.png","shasum":"a70ab5c24e318b24faae57caa6c9d892d16c13f5","modified":1428311552600},{"_id":"themes/landscape-plus/source/favicon.ico","shasum":"ff0591609c636a04b0a901164c6a7f8b06d964a8","modified":1331456646000},{"_id":"themes/landscape-plus/source/img/scrollup.png.bak","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1428302346558},{"_id":"source/img/repo_config/repofile.png","shasum":"cc37a83187dcf433bdb2774163a0103f249c16b5","modified":1428418628610},{"_id":"source/img/vim2/vim-airline-demo.gif","shasum":"66e718be038a14b358272bf1e490a5ac6bd810cd","modified":1428501446030},{"_id":"themes/landscape-plus/source/css/images/bg.png","shasum":"eedeaca9b32c9931507a22ce343a9190fb7c3156","modified":1428320026632},{"_id":"source/img/f17bg/my_wallpaper.jpg","shasum":"67742b3d0234e1861903eebac543cede8991fe65","modified":1428420679694},{"_id":"themes/landscape-plus/source/css/images/cloud04.png","shasum":"7ef63c1b627f1e27bb4c0b23727f8a592fb19cad","modified":1428311880953},{"_id":"source/img/google/searchtips.jpg","shasum":"f70fc638d841f78ec662a9ebcc436cfc0f234288","modified":1428335596224},{"_id":"source/img/vim1/vim-indro1.gif","shasum":"aadf4db6efd002f28e2e73acbea47c34daa053b0","modified":1428497666434},{"_id":"source/img/vim1/vim-intro2.gif","shasum":"bf22e8ebe8c657eb303ce3740ddd1b7ee7e1803c","modified":1428497698872},{"_id":"themes/landscape-plus/source/css/images/cloud02.png","shasum":"081d892b4f34b5055dd9bc87d6dd812d12b0268e","modified":1428312153567},{"_id":"themes/landscape-plus/source/css/images/cloud03.png","shasum":"4d3c94ef46704b176f66b660b204a259c84ecdf6","modified":1428311763474},{"_id":"source/img/f17bg/beefy-miracle.png","shasum":"0d1deec1a1b28734dda5e7addd35f0daf88ec144","modified":1428419805836},{"_id":"public/css/images/bg.png","modified":1428627701563,"shasum":"eedeaca9b32c9931507a22ce343a9190fb7c3156"},{"_id":"public/img/vim2/winmanager_with_nerdtree_and_taglist.png","modified":1428627701565,"shasum":"04990a6208c51b41949fdb7e1de43510a0353556"},{"_id":"public/img/vim2/vim-airline-demo.gif","modified":1428627701567,"shasum":"66e718be038a14b358272bf1e490a5ac6bd810cd"},{"_id":"public/img/vim2/tabline_in_airline.gif","modified":1428627701568,"shasum":"ea6a1b221f3ba8672fb47847aebed1be69f81fee"},{"_id":"public/img/vim2/set_patched_font_for_terminal.png","modified":1428627701570,"shasum":"a922bd4d3fb8dcb0c57484cae9c55905d388959e"},{"_id":"public/img/vim2/github_create_repo.png","modified":1428627701571,"shasum":"45599de96890dc078579c43305c15b89cc024be9"},{"_id":"public/img/vim2/add_sshkey_for_github.png","modified":1428627701571,"shasum":"f393c135307850f05f05925010bb5144b4786b98"},{"_id":"public/img/vim2/Screenshot_for_my_vim.png","modified":1428627701573,"shasum":"b8c932061bda0d9e9358e0dd7f440c5f5652ad8c"},{"_id":"public/img/vim1/vim-intro2.gif","modified":1428627701576,"shasum":"bf22e8ebe8c657eb303ce3740ddd1b7ee7e1803c"},{"_id":"public/img/vim1/vim-indro1.gif","modified":1428627701583,"shasum":"aadf4db6efd002f28e2e73acbea47c34daa053b0"},{"_id":"public/img/vim1/my_vim_without_plugin.png","modified":1428627701585,"shasum":"47c15e791acc373859d39f6a1dccc0a635fc49d4"},{"_id":"public/img/ssh_connect/testPuTTY.jpg","modified":1428627701586,"shasum":"8800f1ba1ea118d061e5123fdd83784d135c1d57"},{"_id":"public/img/ssh_connect/sshlogin.jpg","modified":1428627701587,"shasum":"4c66d9240bb9bda710191fbade5009b29d437034"},{"_id":"public/img/ssh_connect/session.jpg","modified":1428627701588,"shasum":"e1568eece01b8fb5e7647796658c9c0d932fd2aa"},{"_id":"public/img/ssh_connect/puttygen.jpg","modified":1428627701589,"shasum":"1ab18b4ff0a4668cc06ee34dc310a81b1cc00042"},{"_id":"public/img/ssh_connect/pksucc.jpg","modified":1428627701590,"shasum":"5db8cc78e2d80861e6bcfecde4be1d1463b0abb7"},{"_id":"public/img/ssh_connect/pkpos.jpg","modified":1428627701592,"shasum":"550c5f7ed41958777b602236b9b6987a7aba9a0b"},{"_id":"public/img/ssh_connect/passphrase.jpg","modified":1428627701593,"shasum":"f979317a08de1ac541bf0480b6760b83d3dc8805"},{"_id":"public/img/ssh_connect/PuTTYgen_pk.jpg","modified":1428627701594,"shasum":"2153b955346532eaf4e4d88f3505f1180974e170"},{"_id":"public/img/ssh_connect/PuTTYgen_all.jpg","modified":1428627701595,"shasum":"fe70bce8030685f5ca5cdae3e9d3d898afb53b9d"},{"_id":"public/img/ssh_connect/PuTTYconfig.jpg","modified":1428627701596,"shasum":"010ff08d4fbf078768c04f61cf3807666c1cf609"},{"_id":"public/img/repo_config/repofile.png","modified":1428627701597,"shasum":"cc37a83187dcf433bdb2774163a0103f249c16b5"},{"_id":"public/img/repo_config/fedorarepo.png","modified":1428627701598,"shasum":"c85032648dff2d977f1def9b187bf6b2682265a2"},{"_id":"public/img/repo_config/163mirror.png","modified":1428627701599,"shasum":"7ab456da15bf5aac95644f5080b555958ef58fdc"},{"_id":"public/img/google/searchtips.jpg","modified":1428627701601,"shasum":"f70fc638d841f78ec662a9ebcc436cfc0f234288"},{"_id":"public/img/forwhat/heaven_or_hell.jpg","modified":1428627701603,"shasum":"130742426bd7cf83141c4f642e7509dd24ffe1b2"},{"_id":"public/img/f17bg/my_wallpaper.jpg","modified":1428627701605,"shasum":"67742b3d0234e1861903eebac543cede8991fe65"},{"_id":"public/img/f17bg/bmbg.png","modified":1428627701606,"shasum":"7d200f3eeabc999d627e3f0a6c5005358a5e863d"},{"_id":"public/img/f17bg/beefy-miracle.png","modified":1428627701612,"shasum":"0d1deec1a1b28734dda5e7addd35f0daf88ec144"},{"_id":"public/img/asus-n61/wnetcard.jpg","modified":1428627701617,"shasum":"dcdc29ecaaab88681bb4ddbd53b284f47222ed46"},{"_id":"public/img/asus-n61/unscrewfan.jpg","modified":1428627701618,"shasum":"00a651799ad7db4868b3bdee6330f53c0561a248"},{"_id":"public/img/asus-n61/touchpadcable.jpg","modified":1428627701619,"shasum":"d87bec1dc5f3b5b6675790a6ccc595fc949e0373"},{"_id":"public/img/asus-n61/screw.jpg","modified":1428627701620,"shasum":"4d0a18d81463805d608708d63bf5fe5c6c121598"},{"_id":"public/img/asus-n61/raise.jpg","modified":1428627701628,"shasum":"235bd6d9d5853053f59c2922c6f0cc80d46ce2c3"},{"_id":"public/img/asus-n61/plugnetcard.jpg","modified":1428627701629,"shasum":"975f8cf4d025e73f8c879ee289fc74ca07eeba33"},{"_id":"public/img/asus-n61/plugmem.jpg","modified":1428627701631,"shasum":"13d02ce80936e380d72653cbfd49819d7ad4c70e"},{"_id":"public/img/asus-n61/plugfan.jpg","modified":1428627701631,"shasum":"c2c5dafd522578a8fc02f7c7b16ddb9de1e59ab6"},{"_id":"public/img/asus-n61/plugdvd.jpg","modified":1428627701632,"shasum":"faccf85fc9650db43766d24fb6c8e9c6a4055445"},{"_id":"public/img/asus-n61/plugcpu.jpg","modified":1428627701633,"shasum":"3d248a04f66901af960b40392f9e16a6c0d9d557"},{"_id":"public/img/asus-n61/outtpcable.jpg","modified":1428627701634,"shasum":"38e768836332bce742bc96339bddfa426865bd1b"},{"_id":"public/img/asus-n61/outline.jpg","modified":1428627701635,"shasum":"38becd3d72a729e22f9bf799575e1058aee08195"},{"_id":"public/img/asus-n61/outcable.jpg","modified":1428627701636,"shasum":"691d683e7a1ef76f7cc3419986d0f9242fffcee3"},{"_id":"public/img/asus-n61/othercable.jpg","modified":1428627701637,"shasum":"3a085e7386ca512ab2f3cf747c07f4c12c74cc0d"},{"_id":"public/img/asus-n61/opencover.jpg","modified":1428627701638,"shasum":"13b0a9b0239da9c78293807c9647d6c6f614b120"},{"_id":"public/img/asus-n61/n61.jpg","modified":1428627701639,"shasum":"3fbe2112a7c77be56257047b04577c07107502f1"},{"_id":"public/img/asus-n61/keyboarddetail.jpg","modified":1428627701640,"shasum":"d05a8904f946911277285acf87b8ce43ae260f07"},{"_id":"public/img/asus-n61/keyboard.jpg","modified":1428627701641,"shasum":"93ad6f9198d11cb94af4710d312648db0b194db9"},{"_id":"public/img/asus-n61/innerfan.jpg","modified":1428627701642,"shasum":"b5d29f560a0614a00463040278f3c05cd308ca46"},{"_id":"public/img/asus-n61/heatsink.jpg","modified":1428627701643,"shasum":"5a6045fb9b40b56d50540c64a86322d98a6fdb00"},{"_id":"public/img/asus-n61/hdout.jpg","modified":1428627701644,"shasum":"7884df58c606db4a2ff4be7f5ce618d212f63888"},{"_id":"public/img/asus-n61/hdcover.jpg","modified":1428627701644,"shasum":"52a396270951719e6d1da6adb643cb74610558e1"},{"_id":"public/img/asus-n61/hd.jpg","modified":1428627701645,"shasum":"9a7b5b2e388189493880f3dc3e87c4ff5132b96c"},{"_id":"public/img/asus-n61/getfan.jpg","modified":1428627701646,"shasum":"784d929c30d00caaa7ecbc4fd23730aa81e4e35d"},{"_id":"public/img/asus-n61/getcpu.jpg","modified":1428627701647,"shasum":"8163fde3b210eeb4114df33a2d679217e1dc7098"},{"_id":"public/img/asus-n61/fanout.jpg","modified":1428627701648,"shasum":"beef4e47b22d700290b8b8c2923631a1c4ab0755"},{"_id":"public/img/asus-n61/edge.jpg","modified":1428627701649,"shasum":"a154773f98aa7cc52c0c35d7ec1176e4c6dd095b"},{"_id":"public/img/asus-n61/cr2032.jpg","modified":1428627701650,"shasum":"a1d8372e9b26449251c72d2fcb28682675af791b"},{"_id":"public/img/asus-n61/cpuzone.jpg","modified":1428627701651,"shasum":"69a568d191812474fc17f06f4f9ff96af7a763ff"},{"_id":"public/img/asus-n61/cpugpu.jpg","modified":1428627701653,"shasum":"56f5acb6cf91d03676c26fbf816e54b5851406ec"},{"_id":"public/img/asus-n61/corezone.jpg","modified":1428627701654,"shasum":"9e328d058f68f1af74e1364b616d5d15d50581cf"},{"_id":"public/img/asus-n61/cmosbattery.jpg","modified":1428627701655,"shasum":"87376ff952e7f9368ba1c8eb92a1752935472907"},{"_id":"public/img/asus-n61/cmos.jpg","modified":1428627701656,"shasum":"6334da1c791abc5043a75f982b00d4d6a872a417"},{"_id":"public/img/asus-n61/cleanfan.jpg","modified":1428627701657,"shasum":"465d313780b5d18876569c02f97a932fd079222b"},{"_id":"public/img/asus-n61/cabledetail.jpg","modified":1428627701658,"shasum":"4e5dc99e83c3162efe33049b65466994b6fd5b10"},{"_id":"public/img/asus-n61/cable.jpg","modified":1428627701661,"shasum":"5e93821f3768aa1ad5ac018b7723a759ef7a06b6"},{"_id":"public/img/asus-n61/btcable.jpg","modified":1428627701662,"shasum":"87cb2a6747af97bb24dd7b720b17c697958c6d38"},{"_id":"public/img/asus-n61/boardcover.jpg","modified":1428627701663,"shasum":"cd3a0f7ee25eaa2242af924d12557f3054a53fe7"},{"_id":"public/img/asus-n61/battery.jpg","modified":1428627701664,"shasum":"1489403a0fc516ad3e82111e47f17b807463ebf0"},{"_id":"public/img/asus-n61/back.jpg","modified":1428627701665,"shasum":"ba62e41456a653fd3b727d88a0522c57bb4fd074"},{"_id":"public/img/asus-n61/audiocable.jpg","modified":1428627701666,"shasum":"1c7280668d16f820eabc49e1231e5c5d7b0c681b"},{"_id":"public/img/scrollup.png.bak","modified":1428627701667,"shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3"},{"_id":"public/favicon.ico","modified":1428627701668,"shasum":"ff0591609c636a04b0a901164c6a7f8b06d964a8"},{"_id":"public/css/images/cloud04.png","modified":1428627701669,"shasum":"7ef63c1b627f1e27bb4c0b23727f8a592fb19cad"},{"_id":"public/css/images/cloud03.png","modified":1428627701674,"shasum":"4d3c94ef46704b176f66b660b204a259c84ecdf6"},{"_id":"public/css/images/cloud02.png","modified":1428627701679,"shasum":"081d892b4f34b5055dd9bc87d6dd812d12b0268e"},{"_id":"public/css/images/cloud01.png","modified":1428627701681,"shasum":"a70ab5c24e318b24faae57caa6c9d892d16c13f5"},{"_id":"public/2015/04/08/wordpress2hexo/index.html","modified":1428627701705,"shasum":"1959b35645e7ac876447badf677c18300a8eaec6"},{"_id":"public/2014/06/16/nfs_xen/index.html","modified":1428627701719,"shasum":"9b40dde8c79cc91a2fabc671e12d367539f98df5"},{"_id":"public/2014/05/16/vim2/index.html","modified":1428627701761,"shasum":"b323998940e7805695581c8ddbb92d2a9a8f1ba3"},{"_id":"public/2014/05/15/vim1/index.html","modified":1428627701771,"shasum":"9c97493cf7feff22dd5a0e2d6157fbe41005de18"},{"_id":"public/2013/12/31/ssh_connect/index.html","modified":1428627701784,"shasum":"c94d4969f3b20d72be58cf6eaf8bdc44e9f92634"},{"_id":"public/2013/12/30/ssh_overview/index.html","modified":1428627701792,"shasum":"ac3515144320375c57b6b74e42b5bbb9f94326b8"},{"_id":"public/2013/11/17/svn/index.html","modified":1428627701811,"shasum":"4b7c3be56b9d20889fb1b748336a6407a9b99e58"},{"_id":"public/2013/03/25/forwhat/index.html","modified":1428627701816,"shasum":"97b4bd065839434a64c9d126b0e4ceadd22efaed"},{"_id":"public/2013/02/20/f17bg/index.html","modified":1428627701822,"shasum":"18135fb9521b63e8fe8bebdba2f5f55c44803663"},{"_id":"public/2012/12/14/repo_config/index.html","modified":1428627701833,"shasum":"67f0ac31e917f77e16c15a32f445eb77554c1b5b"},{"_id":"public/2012/11/16/blog/index.html","modified":1428627701839,"shasum":"adb95bbd422c3755460bfebcdf81307fa9e7c136"},{"_id":"public/2012/11/05/google/index.html","modified":1428627701844,"shasum":"655abea2d8933a2a0abb1649321ee729720916bc"},{"_id":"public/2012/11/03/asus-n61/index.html","modified":1428627701852,"shasum":"361a1f8f1d94b82f8871833c78596ad448d4e00f"},{"_id":"public/2012/10/23/cncc2012/index.html","modified":1428627701862,"shasum":"48e0b4c25c7345e7db1fa9de17873a54f716ff8b"},{"_id":"public/2012/10/16/jianzhanxiaoji/index.html","modified":1428627701868,"shasum":"82d95f5015598980fa87975ef5734884dc51c2ae"},{"_id":"public/archives/page/3/index.html","modified":1428627701906,"shasum":"64087e3e6e682ca081adee4e2e9daae1e9c3a73e"},{"_id":"public/archives/2012/index.html","modified":1428627701914,"shasum":"c35caa2af1a9f6bb3728c301bc564059a5f404ee"},{"_id":"public/archives/2012/page/2/index.html","modified":1428627701919,"shasum":"23bb427daa50b419c86f1b8642ec96f19fb37956"},{"_id":"public/archives/2012/10/index.html","modified":1428627701924,"shasum":"7c06690e9de28a1c499f981328925386e746f363"},{"_id":"public/archives/2012/11/index.html","modified":1428627701931,"shasum":"4b311fe1a800746fe71b83e697544c454868b5f6"},{"_id":"public/archives/2012/12/index.html","modified":1428627701934,"shasum":"9cb2da8388c257b738ad9b9199ee4c6cc178a417"},{"_id":"public/archives/2013/index.html","modified":1428627701941,"shasum":"437aa9513cc18d4e3c18086ce2f80bfee6f108f1"},{"_id":"public/archives/2013/02/index.html","modified":1428627701944,"shasum":"fda7ee78dc2cea35cd99f0045b158a48457e2348"},{"_id":"public/archives/2013/03/index.html","modified":1428627701947,"shasum":"35a38c94c1f11e3a81e1dfa1b7766a1295f34194"},{"_id":"public/archives/2013/11/index.html","modified":1428627701951,"shasum":"44efa252a9b7b07eae578d079df0f165274743f4"},{"_id":"public/archives/2013/12/index.html","modified":1428627701958,"shasum":"8caa6232b1fca50ed21cd5bc8d97fa371a0c97a5"},{"_id":"public/archives/2014/index.html","modified":1428627701963,"shasum":"bb75c0bc69781d69aea01f3d1098b5de4230f74c"},{"_id":"public/archives/2014/05/index.html","modified":1428627701968,"shasum":"04955d8500fe43293d611b82b72b1b596f4971ed"},{"_id":"public/archives/2014/06/index.html","modified":1428627701971,"shasum":"5fb76b5e0b8549f3b081f6e847b544ec106bc5aa"},{"_id":"public/page/3/index.html","modified":1428627702016,"shasum":"a15e7080920800c020b99f1f6b9090bf20011782"},{"_id":"public/tags/laptop-cleaning/index.html","modified":1428627702020,"shasum":"fa851894685ab10ac80e340be474ca3db4615c92"},{"_id":"public/tags/N61ja/index.html","modified":1428627702023,"shasum":"0c23cba397d88f65d5a0548785427e2410a9a109"},{"_id":"public/tags/ASUS/index.html","modified":1428627702026,"shasum":"4cdbe54ffd2d89d367e48c8efee5d9df338cdc00"},{"_id":"public/tags/vim/index.html","modified":1428627702032,"shasum":"0e77ea8cd658575b0a44e935368899c36a5722cc"},{"_id":"public/tags/CentOS/index.html","modified":1428627702036,"shasum":"39b7ae1b3091afbdf9b0a4828d1842f82d215103"},{"_id":"public/tags/Fedora/index.html","modified":1428627702042,"shasum":"846ba22007aed62d0c8091aeb48cced4cdad259d"},{"_id":"public/tags/Linux/index.html","modified":1428627702048,"shasum":"6e1a358643ca31d1446af7f3d1f8821ad566c2e6"},{"_id":"public/tags/SVN/index.html","modified":1428627702052,"shasum":"3c0d5bd2af40542c90b6b7831df36c9593f05ae2"},{"_id":"public/tags/maintenance/index.html","modified":1428627702058,"shasum":"dbc147cbbf680688208ea4abef99349a56123714"},{"_id":"public/tags/apache/index.html","modified":1428627702061,"shasum":"1c00db0a7a387f29e6d431fade708ff745fc1825"},{"_id":"public/tags/server/index.html","modified":1428627702064,"shasum":"3cafabd2f44ab92f5ab5b5855dcbd1e258ad78f3"},{"_id":"public/tags/ssh/index.html","modified":1428627702069,"shasum":"0b00b02330e0c5666ac80e960c89f8782859cf39"},{"_id":"public/tags/shell/index.html","modified":1428627702072,"shasum":"cbc7730b09afa2b444ce03bc07f9cb8a08a930e2"},{"_id":"public/tags/PuTTY/index.html","modified":1428627702076,"shasum":"3c774d840b8daa175987b5b3c3615920b8ce5076"},{"_id":"public/tags/repo/index.html","modified":1428627702080,"shasum":"cc174cda86e6eca151bff8e62227f05ac967698e"},{"_id":"public/tags/yum/index.html","modified":1428627702084,"shasum":"20a52445e64eb70001915b09ca8f76432d41ab7b"},{"_id":"public/tags/NFS/index.html","modified":1428627702087,"shasum":"b8a6898ecf8f34871361b5b70ecafc4790b46b00"},{"_id":"public/tags/Xen/index.html","modified":1428627702093,"shasum":"3caa6ce4667456268fbee2ea7a002f4b8ad3fe37"},{"_id":"public/tags/Virtualization/index.html","modified":1428627702096,"shasum":"b91b8db96129f7051e0ca8fe52dd6bdf7dc944e0"},{"_id":"public/tags/web/index.html","modified":1428627702099,"shasum":"b2937bd7e0b29e9a971c16713e793411e13eae44"},{"_id":"public/tags/blog/index.html","modified":1428627702103,"shasum":"a488df6a04144ca6298fd6b7f2b74be93a7aba5e"},{"_id":"public/tags/google/index.html","modified":1428627702106,"shasum":"ef265fa4f6fa836b5f476c9a8e5deb4845cdaa4c"},{"_id":"public/tags/search-engine/index.html","modified":1428627702111,"shasum":"be9e9050ad89464e645af683ca882473a35550c8"},{"_id":"public/tags/trick/index.html","modified":1428627702114,"shasum":"b318b499b82a735cb7c35a09b973fc342dbf0dad"},{"_id":"public/tags/thought/index.html","modified":1428627702118,"shasum":"e0bd499e2d25bf5fb370a83c2801206a420a9367"},{"_id":"public/tags/life/index.html","modified":1428627702122,"shasum":"b3862413bf53d7aa936547f89485421f8e577736"},{"_id":"public/tags/gnome/index.html","modified":1428627702125,"shasum":"87c7634e1e98625c54390f4d25310ae7321af314"},{"_id":"public/tags/conference/index.html","modified":1428627702128,"shasum":"fd1450e8edc94f92fcd1ace632216828d5db183c"},{"_id":"public/tags/cloud-computing/index.html","modified":1428627702131,"shasum":"bce3f487df8da04a32e889018a2acb70a29e6855"},{"_id":"public/tags/big-data/index.html","modified":1428627702135,"shasum":"f1970bfa84de71fa5286559f4e3c65bc9baf4658"},{"_id":"public/tags/mobile/index.html","modified":1428627702139,"shasum":"e83a7518e53d73b41fc9333ef021d6ab7aba551c"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"ASUS N61JA 笔记本拆机清灰全记录","date":"2012-11-03T09:16:34.000Z","_content":"\n本文详细描述了拆解ASUS N61ja笔记本并进行清灰等一系列维护操作的经过, N61系列机型模具类似, 可参考本文进行拆机. \n<!-- more -->\n\n# 前言\n写在文章前,声明一下,本文中的全部内容纯属本人无聊杜撰,对于本本是华硕N61系列又想拆机的童鞋可以借鉴下,不过,若是发生拆不了或者装不上的情况,本人不负法律责任.BTW.本次教程的最终解释权归本人所有~~╮(╯▽╰)╭\n\n以下全是废话\n\n---\n\n# 问题清单\n\n本人笔记本于2010年1月购入，自买回来后就没怎么动过，前几天使用的时候出了点小问题~嗯，算是小问题....吧~= =\n\n**问题清单:**\n\n1. 关机状态下按开机按钮笔记本无任何电流反应\n2. 进入操作系统后日期显示错误\n3. 笔记本温度稍稍的有点高，60°C~75°C（这个也有可能是最近悄悄玩了几款3D游戏导致的错觉~）\n\n关于开机按钮没电流通过的问题,通过卸掉电池,断开电源适配器10秒后重新装上电池接上电源笔记本就无节操的自动开机了.但是对于日期错误的问题,十有八九是主板上的CMOS电池没电了(笔记本上其实也是有CMOS电池的,我一直以为没有来着= =),这个其实也好解决,无非就是每次开机联网更新下internet时间,听起来貌似有点麻烦,好像是有那么点烦额...最后关于笔记本温度高的问题,这个.....笔记本用久了都会有这通病吧,话说我还买了个巨大无比的散热器在背面呼呼吹了都,不过考虑到冬天快到了,让笔记本发点热供暖其实也不错....囧~~\n\n说了这么多废话,我其实是说明我拆机的理由还是蛮充分,恩,蛮充分的.~当然,还有一点很重要的就是本人的本本已经无奈的过保鸟~网上关于N61JA拆机的资料很少,因为是第一次拆本,本人在整个拆机清理过程中也遇到了不少麻烦,从昨晚11点一直折腾到1点多(是的,断电后我还努力工作了一会...).希望本文能对有拆机意向的童鞋提供点帮助,于愿足矣.\n\n以下是拆机正文,童鞋们可放心观看,友情提醒,拆机有风险,动手要谨慎!\n\n---\n\n# 拆机记录\n\n## 拆机的一些tips\n\n1.准备大小不一的十字螺丝刀若干(根据笔记本上的螺丝大小而定)\n\n2.一把相对较大的一字螺丝刀(用来轻轻撬开笔记本模具用的.)\n\n3.橡皮(擦内存条金手指),刷子(清理主板和风扇叶片),硅脂(若拆开散热片,则需要)\n\n4.纽扣电池(型号`CR2032`,如果和我一样悲催的CMOS电池没电的话则需要,否则不需要)\n\n5.旋下的螺丝最好放在一个碰不到的地方,避免悲剧,最好按照将螺丝按原来的位置放置,便于安装时定位\n\n首先来张ASUS N61JA的靓照\n\n![图片来自网络](/img/asus-n61/n61.jpg)\n\n## 外围部件拆卸\n\n接下来开始拆机,将笔记本合上,翻过来,卸下电池.\n\n![图片来自网络](/img/asus-n61/battery.jpg)\n\n背面左下方是放置硬盘的位置,选下2颗固定螺丝,轻轻掀开.\n\n![图片来自网络](/img/asus-n61/hdcover.jpg)\n\nTa-Da,你就看到硬盘了,旋下3颗固定硬盘的螺丝,捏着左侧的塑料片,稍稍左右晃动,将硬盘抽出.\n\n![图片来自网络](/img/asus-n61/hd.jpg)\n\n![图片来自网络](/img/asus-n61/hdout.jpg)\n\n拆下来的硬盘,可以看到,笔记本硬盘是被一个钢套给固定住的,如果想要更换硬盘,那么需要卸下钢套上的几颗固定螺丝,可将硬盘从钢套中抽出更换,但本人似乎没有多余的银子换硬盘,所以换硬盘的步骤就省了.\n\n接下来我们看到背部还有一大块区域也可以掀开,于是乎,乐呵呵的旋下4颗固定螺丝,就可以将笔记本中最重要区域的外壳掀开了.\n\n![图片来自网络](/img/asus-n61/boardcover.jpg)\n\n## 内部布局概览\n\n接下来我们来看下目前的状况,缓一缓,慢慢来,不易出事故...\n![](/img/asus-n61/outline.jpg)\n\n让我们来仔细看一下暴露出来的主板上的主要区域,可以看到CPU,GPU,显存颗粒,内存(一般笔记本都会有多余的一个内存插槽,便于扩展内存),无线网卡,以及风扇等部件.(这里需要注意下CPU周围固定螺丝中有一颗螺丝上贴有保修用的黄色封条,如果封条破损了,就无法保修了.因为本人的电脑已经过保了,所以就无所谓了...)\n\n![](/img/asus-n61/corezone.jpg)\n\n## 取下内存条\n\n接下来,将内存从内存槽中取下,注意,取笔记本内存有一定的技巧,需要将内存条两侧用于固定的支架稍稍向两侧搬开点,然后内存条会自动斜向上稍稍弹起,此时,轻轻抽出内存条即可.(由于取内存的时候没拍照,借用下网上的图)\n\n![图片来自网络](/img/asus-n61/plugmem.jpg)\n\n以下是取出的内存条,本人的笔记本有两条内存,一条是原配的海力士2GB DDR3(上),一条是后来自己扩展的三星1GB DDR3金条(下),大家可以看到在内存上有若干个芯片,对比下两条内存的芯片个数,不难得出一个芯片的容量大小为256M.既然把内存弄出来了,就不妨用橡皮擦来回清洁下内存条的金手指吧.\n\n## 风扇简易清洁\n\n接下来,我们来看一下风扇所在区域,众所周知,风扇周围的灰尘是最多的,所以,清灰的时候,这块是重点.对于只是局部清灰的童鞋,其实拆到这里就差不多了,不需要拆风扇,用纸张裹成漏斗的形状,将尖嘴部分对准散热口的散热片,从散热片外部向风扇使劲吹,这样可以清除散热片间隙和风扇的灰尘,咳咳...咳咳...貌似灰有点大....然后再用手指按住扇叶,防止其转动,再给每一个扇叶仔细吹一下.这样就差不多啦.\n\n> 如果可以FQ的童鞋可以借鉴下这个视频: http://www.youtube.com/watch?v=KmiuFVUMNRs\n\n![](/img/asus-n61/cleanfan.jpg)\n\n---\n\n# 深度拆卸\n\n**以下部分可能存在一定难度和风险,如果不是和你的笔记本过不去,还是别往下继续实践鸟~╮(╯▽╰)╭**\n\n## 风扇拆卸\n\n如果你觉得这样清灰不够彻底,那么接下来我们来将整个风扇卸下来.首先撕开用于固定风扇电源线的黄色胶布,将风扇电源线温柔的拔出(什么,拔不出?那请用一字螺丝刀温柔地左右撬动下,见接口松动了再轻轻拔出.接下来我们还会接触到很多接口和排线,处理的时候突出一点\"胆大心细\")\n\n![](/img/asus-n61/plugfan.jpg)\n\n然后拧下在风扇四周用于固定的4颗细小的螺丝,即可将风扇顶壳拆下.(其实不能完全拆下,因为顶壳用黑色胶布和散热片贴在了一起.可用点力小心撕开黑色胶布)\n\n![](/img/asus-n61/unscrewfan.jpg)\n\n从下图中可以看到,风扇的内部积存了一大堆灰尘\n\n![](/img/asus-n61/innerfan.jpg)\n\n接下来我们可以将风扇顶壳从散热片的胶布上慢慢撕下,然后将风扇主体原理散热口的一侧微微抬起,取出(注意,风扇的主体靠近散热口的部分也是通过胶布和散热片粘在一起的,所以取风扇的时候可能要费点力,但切忌看准了再下手,切勿硬拔.)\n\n![这个不是我的手,此图来自网络= =](/img/asus-n61/fanout.jpg)\n\n看看取下来的风扇,你可以对风扇随意的清理了~~\n\n![](/img/asus-n61/getfan.jpg)\n\n## 散热片拆卸\n\n其实风扇部分的灰尘并不是最多的,灰尘最多的部分是散热口出的散热片.接下来,我们将整个散热架拆下来.将下图中标记的7个螺丝拧下.(要想分离出散热架,这里我们不得不破坏黄色的保修封条,本人曾尝试过揭开封条,但结果...恩..你懂得...最后我们还是拧开它吧)\n\n![](/img/asus-n61/cpuzone.jpg)\n\n拧下螺丝后,用2根手指夹住CPU上方白色支架的两侧,上下轻微晃动,即可将整个散热架抬起.(注意:由于CPU和GPU上方都通过硅脂和散热架均匀的黏贴在一起,所以晃动过程尽量轻微,感觉到CPU表面硅脂和散热架分离后在轻轻将散热架抬起.)\n\n![](/img/asus-n61/plugcpu.jpg)\n\n之后,你就可以将整个散热架取下了,让我们先来看看散热架上的硅脂~~\n\n![](/img/asus-n61/getcpu.jpg)\n\n然后我们在仔细看一下散热片上的灰尘...呃呃呃呃呃呃呃~~~⊙﹏⊙b\n\n![](/img/asus-n61/heatsink.jpg)\n\n## 涂抹硅脂\n\n我们再来观赏下CPU(左)和GPU(右),CPU为i5 430M, GPU为AMD 5730.CPU是可以更换的,需要拧开下图中黑色的锁,然后可将CPU取出来,不过我可没有那么DT,显卡则是焊死在主板上的,所以就更换不了了.(等回头组装的时候,需要在CPU和GPU上涂抹适当硅脂,不可太厚,也不可太薄(硅脂这东西是用来导热的.)并涂抹均匀,然后再将散热架重新固定住.)\n\n![](/img/asus-n61/cpugpu.jpg)\n\n## 无线网卡拆卸\n\n清理完散热片上的灰,我们看看如何拆卸无线网卡.无线网卡上有一黑一白的两根线,记清楚那根是白的,那根是黑的之后,我们用手将线头轻轻来回拧一下, 然后垂直向上拔出, 可以看到, 无线网卡上的接头为圆形, 中心有根突起的小针.看到下图的接口形状后拔起线来应该就容易了.\n\n![](/img/asus-n61/wnetcard.jpg)\n\n拔出线后,拧下2颗固定螺丝,无线网卡就自动斜向上微微弹起,我们就可将其抽出了.(有童鞋反应这弹起的方式和内存的一样..额..好像是这么一回事.)\n\n![](/img/asus-n61/plugnetcard.jpg)\n\n## 光驱拆卸\n\n最核心的部分拆完了, 我们回来看看其它外设怎么拆,首先是光驱, 将下图所示的两颗螺丝拧开, 轻轻一抽, 光驱就出来了.\n\n![](/img/asus-n61/plugdvd.jpg)\n\n## 键盘拆卸\n\n笔记本背部的拆卸工作到此告一段落,接下来我们将笔记本正面朝上, 展开笔记本, 准备取下键盘.从下图中可以看到, 键盘是通过5个卡槽卡在笔记本上的.\n\n![](/img/asus-n61/keyboard.jpg)\n![](/img/asus-n61/keyboarddetail.jpg)\n\n我们可以小心地利用一字螺丝刀逐个抠出,之后便可轻松的将键盘抬起,此处切莫太过心急一下拽出键盘,因为键盘是通过排线和主板连在一起的,如果拽的太远可能将排线拽断,引发悲剧,这里我们将键盘靠近屏幕的一侧稍稍抬起,观察下排线情况再动手.\n\n![](/img/asus-n61/cable.jpg)\n\n接下来我们要将排线取下才能将键盘与主板分离,取出排线的时候务必小心,因为排线相对来说比较脆弱,不过掌握了要领取排线还是很容易的.我们先看一下排线接口部分的情况.可以看到键盘排线接口两侧有2个白色的开关,用于将排线扣死,取排线时,先用一字螺丝刀等工具轮流将两侧的白色开关轻轻推出,等到两侧的开关都推到顶部后(如下图所示)再用手将排线轻轻抽出接口(这里所需要的力气非常轻,如果抽不出来,别硬拔,检查下白色开关是否推到头了,在取排线.)这样,我们就成功的取下键盘了.(之后组装时,先将排线送入接口,推一推排线,确保已经卡入接口,再将两侧的白色开关扣住即可)\n\nP.S.话说N61J可以换背光键盘的,有兴趣可以google一下.\n\n![](/img/asus-n61/outcable.jpg)\n\n## 蓝牙排线\n\n在这一面上还有许多排线,让我们先看看排线的分布情况,从下图中可以看到上方黄色框内的貌似是预留的蓝牙模块的排线与蓝牙排线紧挨的是音箱线接口,然后,位于中部的是键盘排线接口,最下方的是触摸板的排线.\n\n![](/img/asus-n61/othercable.jpg)\n\n让我们一个一个将排线取下来.首先是蓝牙模块的排线,虽然没有配蓝牙模块,不过那线和主板连着,对于日后将主板分离是一大祸害,所以果断要将冗余的蓝牙排线取下.我们放大看下:\n\n![](/img/asus-n61/cabledetail.jpg)\n\n可能有的童鞋已经注意到了,蓝牙的排线和刚才键盘的排线貌似有点类似却又有点不同.其实操作过程都差不多.来回将两侧轻轻推出,等白色部分推到头松动后,用手握住蓝色的塑料片,轻轻向左拔出即可(蓝色的塑料片?就是上面写有MB的那个...MB?什么意思?不懂 = =)\n\n![](/img/asus-n61/btcable.jpg)\n\n## 音箱线\n\n取完蓝牙的排线,别忘了它右边还有音箱线.音箱线没有类似卡槽开关的设置,因为它确实和接口连接的很紧,需要费点力,音箱线取出的方法是将黑色部分接头从白色部分出推出即可.(话说这里我推了很久,因为太卡的太死了,又不敢太大力气的推. = =b)\n\n![](/img/asus-n61/audiocable.jpg)\n\n## 触摸板排线\n\n然后我们往下方瞅瞅,看看触摸板的排线,撕开用于固定的黄色胶布\n\n![](/img/asus-n61/touchpadcable.jpg)\n\n这里排线的接口和之前的又有所不同,将白色部分的两侧轮流稍稍推出后,用手捏住蓝色塑料片抽出即可(注意:这个排线接口相对而言比其他的脆弱,所以,仔细点总是没错的~~)\n\n![](/img/asus-n61/outtpcable.jpg)\n\n## 分离模具\n在取完了以上的排线后,我们就可以将正面的固定螺丝拧起,准备开盖了 = =\n\n![](/img/asus-n61/opencover.jpg)\n\n此时,再将笔记本翻到背面,拧起下图所示的螺丝(不同颜色代表螺丝形状不同):\n\n![](/img/asus-n61/back.jpg)\n\n这里稍事休息下,看看我的螺丝星座图....囧~~\n\n![](/img/asus-n61/screw.jpg)\n\n取完全部的螺丝后,我们接下来就要开始撬笔记本的模具了(撬的过程中尽量温柔,因为一不小心就会在模具边缘留下抠的痕迹,有碍雅观~),如下图所示:\n\n![](/img/asus-n61/raise.jpg)\n![](/img/asus-n61/edge.jpg)\n\n将四周都撬起后,就可以将掌托这面的模具给取下来了.我们来仔细从正面看看主板,可以看到CMOS电池在左下方,赶紧换一个吧.....然后我们还看到果然散热口周围的主板部分灰尘很多.(我记得半年多前我把电脑送到售后去清过一次灰,这里不得不怀疑下售后是不是真的有开机清过灰....咳咳....灰尘太大了....= =)\n\n![](/img/asus-n61/cmos.jpg)\n\n## 更换CMOS电池\n\n按下图所示,轻撬下,即可将电池抠出.\n\n![](/img/asus-n61/cmosbattery.jpg)\n\n可能有童鞋想买电池,不知道型号,其实到店里直接说主板纽扣电池就可以了如果想要装*的话,可以和老板说,\"喂喂,给我来个CR2032\" = =\n\n![](/img/asus-n61/cr2032.jpg)\n\n---\n\n# 结语\n\n拆机过程至此全部结束,当然,整个过程中还有诸如CPU,屏幕,音箱以及一些其他部件没拆完全.不过清灰的话,这样已经很彻底了.清完灰后,请逆序操作下,将全部零件组装好即可,然后开机验证下.什么?开机没反应,黑屏,蓝屏,红黄绿屏....额,你还是检查检查零件是不是多了或者少了 = =?\n\nBTW.再次提醒下,拆机有风险,动手要谨慎,放在这里是不是太迟了?没关系,It's better than nothing嘛~\n\n欢迎童鞋们对此发表这样那样的看法,如有错误,还请指正.如果本教程导致你的本本over了,那出于安全考虑,我们还是不要交流了.= =b\n\n最后,本文中部分图片来源于网络,已标出,但由于找不到原作者无法写明图片所属.若有不妥,请告知.如需转载,请注明出处.\n\n谢谢各位童鞋的耐心观看.\n\n \n\n ","source":"_posts/asus-n61.md","raw":"title: \"ASUS N61JA 笔记本拆机清灰全记录\"\ndate: 2012-11-03 17:16:34\ntags: [laptop cleaning, N61ja, ASUS]\n---\n\n本文详细描述了拆解ASUS N61ja笔记本并进行清灰等一系列维护操作的经过, N61系列机型模具类似, 可参考本文进行拆机. \n<!-- more -->\n\n# 前言\n写在文章前,声明一下,本文中的全部内容纯属本人无聊杜撰,对于本本是华硕N61系列又想拆机的童鞋可以借鉴下,不过,若是发生拆不了或者装不上的情况,本人不负法律责任.BTW.本次教程的最终解释权归本人所有~~╮(╯▽╰)╭\n\n以下全是废话\n\n---\n\n# 问题清单\n\n本人笔记本于2010年1月购入，自买回来后就没怎么动过，前几天使用的时候出了点小问题~嗯，算是小问题....吧~= =\n\n**问题清单:**\n\n1. 关机状态下按开机按钮笔记本无任何电流反应\n2. 进入操作系统后日期显示错误\n3. 笔记本温度稍稍的有点高，60°C~75°C（这个也有可能是最近悄悄玩了几款3D游戏导致的错觉~）\n\n关于开机按钮没电流通过的问题,通过卸掉电池,断开电源适配器10秒后重新装上电池接上电源笔记本就无节操的自动开机了.但是对于日期错误的问题,十有八九是主板上的CMOS电池没电了(笔记本上其实也是有CMOS电池的,我一直以为没有来着= =),这个其实也好解决,无非就是每次开机联网更新下internet时间,听起来貌似有点麻烦,好像是有那么点烦额...最后关于笔记本温度高的问题,这个.....笔记本用久了都会有这通病吧,话说我还买了个巨大无比的散热器在背面呼呼吹了都,不过考虑到冬天快到了,让笔记本发点热供暖其实也不错....囧~~\n\n说了这么多废话,我其实是说明我拆机的理由还是蛮充分,恩,蛮充分的.~当然,还有一点很重要的就是本人的本本已经无奈的过保鸟~网上关于N61JA拆机的资料很少,因为是第一次拆本,本人在整个拆机清理过程中也遇到了不少麻烦,从昨晚11点一直折腾到1点多(是的,断电后我还努力工作了一会...).希望本文能对有拆机意向的童鞋提供点帮助,于愿足矣.\n\n以下是拆机正文,童鞋们可放心观看,友情提醒,拆机有风险,动手要谨慎!\n\n---\n\n# 拆机记录\n\n## 拆机的一些tips\n\n1.准备大小不一的十字螺丝刀若干(根据笔记本上的螺丝大小而定)\n\n2.一把相对较大的一字螺丝刀(用来轻轻撬开笔记本模具用的.)\n\n3.橡皮(擦内存条金手指),刷子(清理主板和风扇叶片),硅脂(若拆开散热片,则需要)\n\n4.纽扣电池(型号`CR2032`,如果和我一样悲催的CMOS电池没电的话则需要,否则不需要)\n\n5.旋下的螺丝最好放在一个碰不到的地方,避免悲剧,最好按照将螺丝按原来的位置放置,便于安装时定位\n\n首先来张ASUS N61JA的靓照\n\n![图片来自网络](/img/asus-n61/n61.jpg)\n\n## 外围部件拆卸\n\n接下来开始拆机,将笔记本合上,翻过来,卸下电池.\n\n![图片来自网络](/img/asus-n61/battery.jpg)\n\n背面左下方是放置硬盘的位置,选下2颗固定螺丝,轻轻掀开.\n\n![图片来自网络](/img/asus-n61/hdcover.jpg)\n\nTa-Da,你就看到硬盘了,旋下3颗固定硬盘的螺丝,捏着左侧的塑料片,稍稍左右晃动,将硬盘抽出.\n\n![图片来自网络](/img/asus-n61/hd.jpg)\n\n![图片来自网络](/img/asus-n61/hdout.jpg)\n\n拆下来的硬盘,可以看到,笔记本硬盘是被一个钢套给固定住的,如果想要更换硬盘,那么需要卸下钢套上的几颗固定螺丝,可将硬盘从钢套中抽出更换,但本人似乎没有多余的银子换硬盘,所以换硬盘的步骤就省了.\n\n接下来我们看到背部还有一大块区域也可以掀开,于是乎,乐呵呵的旋下4颗固定螺丝,就可以将笔记本中最重要区域的外壳掀开了.\n\n![图片来自网络](/img/asus-n61/boardcover.jpg)\n\n## 内部布局概览\n\n接下来我们来看下目前的状况,缓一缓,慢慢来,不易出事故...\n![](/img/asus-n61/outline.jpg)\n\n让我们来仔细看一下暴露出来的主板上的主要区域,可以看到CPU,GPU,显存颗粒,内存(一般笔记本都会有多余的一个内存插槽,便于扩展内存),无线网卡,以及风扇等部件.(这里需要注意下CPU周围固定螺丝中有一颗螺丝上贴有保修用的黄色封条,如果封条破损了,就无法保修了.因为本人的电脑已经过保了,所以就无所谓了...)\n\n![](/img/asus-n61/corezone.jpg)\n\n## 取下内存条\n\n接下来,将内存从内存槽中取下,注意,取笔记本内存有一定的技巧,需要将内存条两侧用于固定的支架稍稍向两侧搬开点,然后内存条会自动斜向上稍稍弹起,此时,轻轻抽出内存条即可.(由于取内存的时候没拍照,借用下网上的图)\n\n![图片来自网络](/img/asus-n61/plugmem.jpg)\n\n以下是取出的内存条,本人的笔记本有两条内存,一条是原配的海力士2GB DDR3(上),一条是后来自己扩展的三星1GB DDR3金条(下),大家可以看到在内存上有若干个芯片,对比下两条内存的芯片个数,不难得出一个芯片的容量大小为256M.既然把内存弄出来了,就不妨用橡皮擦来回清洁下内存条的金手指吧.\n\n## 风扇简易清洁\n\n接下来,我们来看一下风扇所在区域,众所周知,风扇周围的灰尘是最多的,所以,清灰的时候,这块是重点.对于只是局部清灰的童鞋,其实拆到这里就差不多了,不需要拆风扇,用纸张裹成漏斗的形状,将尖嘴部分对准散热口的散热片,从散热片外部向风扇使劲吹,这样可以清除散热片间隙和风扇的灰尘,咳咳...咳咳...貌似灰有点大....然后再用手指按住扇叶,防止其转动,再给每一个扇叶仔细吹一下.这样就差不多啦.\n\n> 如果可以FQ的童鞋可以借鉴下这个视频: http://www.youtube.com/watch?v=KmiuFVUMNRs\n\n![](/img/asus-n61/cleanfan.jpg)\n\n---\n\n# 深度拆卸\n\n**以下部分可能存在一定难度和风险,如果不是和你的笔记本过不去,还是别往下继续实践鸟~╮(╯▽╰)╭**\n\n## 风扇拆卸\n\n如果你觉得这样清灰不够彻底,那么接下来我们来将整个风扇卸下来.首先撕开用于固定风扇电源线的黄色胶布,将风扇电源线温柔的拔出(什么,拔不出?那请用一字螺丝刀温柔地左右撬动下,见接口松动了再轻轻拔出.接下来我们还会接触到很多接口和排线,处理的时候突出一点\"胆大心细\")\n\n![](/img/asus-n61/plugfan.jpg)\n\n然后拧下在风扇四周用于固定的4颗细小的螺丝,即可将风扇顶壳拆下.(其实不能完全拆下,因为顶壳用黑色胶布和散热片贴在了一起.可用点力小心撕开黑色胶布)\n\n![](/img/asus-n61/unscrewfan.jpg)\n\n从下图中可以看到,风扇的内部积存了一大堆灰尘\n\n![](/img/asus-n61/innerfan.jpg)\n\n接下来我们可以将风扇顶壳从散热片的胶布上慢慢撕下,然后将风扇主体原理散热口的一侧微微抬起,取出(注意,风扇的主体靠近散热口的部分也是通过胶布和散热片粘在一起的,所以取风扇的时候可能要费点力,但切忌看准了再下手,切勿硬拔.)\n\n![这个不是我的手,此图来自网络= =](/img/asus-n61/fanout.jpg)\n\n看看取下来的风扇,你可以对风扇随意的清理了~~\n\n![](/img/asus-n61/getfan.jpg)\n\n## 散热片拆卸\n\n其实风扇部分的灰尘并不是最多的,灰尘最多的部分是散热口出的散热片.接下来,我们将整个散热架拆下来.将下图中标记的7个螺丝拧下.(要想分离出散热架,这里我们不得不破坏黄色的保修封条,本人曾尝试过揭开封条,但结果...恩..你懂得...最后我们还是拧开它吧)\n\n![](/img/asus-n61/cpuzone.jpg)\n\n拧下螺丝后,用2根手指夹住CPU上方白色支架的两侧,上下轻微晃动,即可将整个散热架抬起.(注意:由于CPU和GPU上方都通过硅脂和散热架均匀的黏贴在一起,所以晃动过程尽量轻微,感觉到CPU表面硅脂和散热架分离后在轻轻将散热架抬起.)\n\n![](/img/asus-n61/plugcpu.jpg)\n\n之后,你就可以将整个散热架取下了,让我们先来看看散热架上的硅脂~~\n\n![](/img/asus-n61/getcpu.jpg)\n\n然后我们在仔细看一下散热片上的灰尘...呃呃呃呃呃呃呃~~~⊙﹏⊙b\n\n![](/img/asus-n61/heatsink.jpg)\n\n## 涂抹硅脂\n\n我们再来观赏下CPU(左)和GPU(右),CPU为i5 430M, GPU为AMD 5730.CPU是可以更换的,需要拧开下图中黑色的锁,然后可将CPU取出来,不过我可没有那么DT,显卡则是焊死在主板上的,所以就更换不了了.(等回头组装的时候,需要在CPU和GPU上涂抹适当硅脂,不可太厚,也不可太薄(硅脂这东西是用来导热的.)并涂抹均匀,然后再将散热架重新固定住.)\n\n![](/img/asus-n61/cpugpu.jpg)\n\n## 无线网卡拆卸\n\n清理完散热片上的灰,我们看看如何拆卸无线网卡.无线网卡上有一黑一白的两根线,记清楚那根是白的,那根是黑的之后,我们用手将线头轻轻来回拧一下, 然后垂直向上拔出, 可以看到, 无线网卡上的接头为圆形, 中心有根突起的小针.看到下图的接口形状后拔起线来应该就容易了.\n\n![](/img/asus-n61/wnetcard.jpg)\n\n拔出线后,拧下2颗固定螺丝,无线网卡就自动斜向上微微弹起,我们就可将其抽出了.(有童鞋反应这弹起的方式和内存的一样..额..好像是这么一回事.)\n\n![](/img/asus-n61/plugnetcard.jpg)\n\n## 光驱拆卸\n\n最核心的部分拆完了, 我们回来看看其它外设怎么拆,首先是光驱, 将下图所示的两颗螺丝拧开, 轻轻一抽, 光驱就出来了.\n\n![](/img/asus-n61/plugdvd.jpg)\n\n## 键盘拆卸\n\n笔记本背部的拆卸工作到此告一段落,接下来我们将笔记本正面朝上, 展开笔记本, 准备取下键盘.从下图中可以看到, 键盘是通过5个卡槽卡在笔记本上的.\n\n![](/img/asus-n61/keyboard.jpg)\n![](/img/asus-n61/keyboarddetail.jpg)\n\n我们可以小心地利用一字螺丝刀逐个抠出,之后便可轻松的将键盘抬起,此处切莫太过心急一下拽出键盘,因为键盘是通过排线和主板连在一起的,如果拽的太远可能将排线拽断,引发悲剧,这里我们将键盘靠近屏幕的一侧稍稍抬起,观察下排线情况再动手.\n\n![](/img/asus-n61/cable.jpg)\n\n接下来我们要将排线取下才能将键盘与主板分离,取出排线的时候务必小心,因为排线相对来说比较脆弱,不过掌握了要领取排线还是很容易的.我们先看一下排线接口部分的情况.可以看到键盘排线接口两侧有2个白色的开关,用于将排线扣死,取排线时,先用一字螺丝刀等工具轮流将两侧的白色开关轻轻推出,等到两侧的开关都推到顶部后(如下图所示)再用手将排线轻轻抽出接口(这里所需要的力气非常轻,如果抽不出来,别硬拔,检查下白色开关是否推到头了,在取排线.)这样,我们就成功的取下键盘了.(之后组装时,先将排线送入接口,推一推排线,确保已经卡入接口,再将两侧的白色开关扣住即可)\n\nP.S.话说N61J可以换背光键盘的,有兴趣可以google一下.\n\n![](/img/asus-n61/outcable.jpg)\n\n## 蓝牙排线\n\n在这一面上还有许多排线,让我们先看看排线的分布情况,从下图中可以看到上方黄色框内的貌似是预留的蓝牙模块的排线与蓝牙排线紧挨的是音箱线接口,然后,位于中部的是键盘排线接口,最下方的是触摸板的排线.\n\n![](/img/asus-n61/othercable.jpg)\n\n让我们一个一个将排线取下来.首先是蓝牙模块的排线,虽然没有配蓝牙模块,不过那线和主板连着,对于日后将主板分离是一大祸害,所以果断要将冗余的蓝牙排线取下.我们放大看下:\n\n![](/img/asus-n61/cabledetail.jpg)\n\n可能有的童鞋已经注意到了,蓝牙的排线和刚才键盘的排线貌似有点类似却又有点不同.其实操作过程都差不多.来回将两侧轻轻推出,等白色部分推到头松动后,用手握住蓝色的塑料片,轻轻向左拔出即可(蓝色的塑料片?就是上面写有MB的那个...MB?什么意思?不懂 = =)\n\n![](/img/asus-n61/btcable.jpg)\n\n## 音箱线\n\n取完蓝牙的排线,别忘了它右边还有音箱线.音箱线没有类似卡槽开关的设置,因为它确实和接口连接的很紧,需要费点力,音箱线取出的方法是将黑色部分接头从白色部分出推出即可.(话说这里我推了很久,因为太卡的太死了,又不敢太大力气的推. = =b)\n\n![](/img/asus-n61/audiocable.jpg)\n\n## 触摸板排线\n\n然后我们往下方瞅瞅,看看触摸板的排线,撕开用于固定的黄色胶布\n\n![](/img/asus-n61/touchpadcable.jpg)\n\n这里排线的接口和之前的又有所不同,将白色部分的两侧轮流稍稍推出后,用手捏住蓝色塑料片抽出即可(注意:这个排线接口相对而言比其他的脆弱,所以,仔细点总是没错的~~)\n\n![](/img/asus-n61/outtpcable.jpg)\n\n## 分离模具\n在取完了以上的排线后,我们就可以将正面的固定螺丝拧起,准备开盖了 = =\n\n![](/img/asus-n61/opencover.jpg)\n\n此时,再将笔记本翻到背面,拧起下图所示的螺丝(不同颜色代表螺丝形状不同):\n\n![](/img/asus-n61/back.jpg)\n\n这里稍事休息下,看看我的螺丝星座图....囧~~\n\n![](/img/asus-n61/screw.jpg)\n\n取完全部的螺丝后,我们接下来就要开始撬笔记本的模具了(撬的过程中尽量温柔,因为一不小心就会在模具边缘留下抠的痕迹,有碍雅观~),如下图所示:\n\n![](/img/asus-n61/raise.jpg)\n![](/img/asus-n61/edge.jpg)\n\n将四周都撬起后,就可以将掌托这面的模具给取下来了.我们来仔细从正面看看主板,可以看到CMOS电池在左下方,赶紧换一个吧.....然后我们还看到果然散热口周围的主板部分灰尘很多.(我记得半年多前我把电脑送到售后去清过一次灰,这里不得不怀疑下售后是不是真的有开机清过灰....咳咳....灰尘太大了....= =)\n\n![](/img/asus-n61/cmos.jpg)\n\n## 更换CMOS电池\n\n按下图所示,轻撬下,即可将电池抠出.\n\n![](/img/asus-n61/cmosbattery.jpg)\n\n可能有童鞋想买电池,不知道型号,其实到店里直接说主板纽扣电池就可以了如果想要装*的话,可以和老板说,\"喂喂,给我来个CR2032\" = =\n\n![](/img/asus-n61/cr2032.jpg)\n\n---\n\n# 结语\n\n拆机过程至此全部结束,当然,整个过程中还有诸如CPU,屏幕,音箱以及一些其他部件没拆完全.不过清灰的话,这样已经很彻底了.清完灰后,请逆序操作下,将全部零件组装好即可,然后开机验证下.什么?开机没反应,黑屏,蓝屏,红黄绿屏....额,你还是检查检查零件是不是多了或者少了 = =?\n\nBTW.再次提醒下,拆机有风险,动手要谨慎,放在这里是不是太迟了?没关系,It's better than nothing嘛~\n\n欢迎童鞋们对此发表这样那样的看法,如有错误,还请指正.如果本教程导致你的本本over了,那出于安全考虑,我们还是不要交流了.= =b\n\n最后,本文中部分图片来源于网络,已标出,但由于找不到原作者无法写明图片所属.若有不妥,请告知.如需转载,请注明出处.\n\n谢谢各位童鞋的耐心观看.\n\n \n\n ","slug":"asus-n61","published":1,"updated":"2015-04-06T16:05:47.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o870000kadys4a5pjj1"},{"title":"正式完成从Wordpress迁移至Hexo","date":"2015-04-08T14:51:27.000Z","notoc":true,"_content":"\n**2015-04-08 22:51:27 正式完成从WordPress迁移至Hexo的工作.**\n之前一直使用WordPress + VPS + 独立域名的方式运行博客. 博客上线是在2012年10月份吧, 刚开始的时候, WordPress的富文本编辑工具, 丰富的插件和主题对于刚开独立博客的用户而言十分便捷也很容易上手, 但是随着时间的推移, 到现在(2015/4)也已经有段时间了, 在这期间, 陆陆续续写了几篇文章, 但是在用WordPress写作的时候越发的感到不舒服, 甚至影响到了写作积极性. \n现在想想, 原因应该有以下几点:\n\n1. 过度依赖插件\nWordPress的插件数量众多, 几乎可以覆盖到用户能想到的全部功能, 这是好事, 但是问题就出在插件给人带来的写作体验上.\n例如, 当我在WP下写作时, 需要插入代码, 那么需要安装高亮代码的插件, 然后利用工具栏进行代码块的输入, 最终转化为HTML代码. 一篇文章通常会包含多处代码, 有的是代码块, 有的是行内代码, 我就需要不停的点击工具栏, 然后在插件窗口上输出代码. 这样的写作体验一点都不好, 而且更关键的是插入的代码在原文中的格式是由插件定义的, 而我所得到的只是最后渲染完成的HTML而已, 而插件定义的标签或是语法往往不是标准的. \n再比如当我想要插入图片的时候, WP会将本地的图片上传到不知道什么地方, 然后展示给我一个插入图片的窗口, 让我设置一些属性之后, 图片就插入到文章相应的位置去了. \n依赖插件的问题在进行文章导入/导出时尤为明显. 当你尝试性的从WP编辑器中复制全文到其它编辑器如(Word, WPS)中时, 不是丢失就是排版乱了. 在WP中, 有插件负责转换, 而当没有插件的参与时, 一切都变得很糟糕. \n这种格式与结构混淆的渲染方式给了我一种不好的感觉, 那就是我的文章在写完的那一刻就已经不是我的了, 它已经彻彻底底的属于WP和它的插件们了. 我再也别想很容易的把我的文章完完整整的从WP中拿出来. (这也照成了此次我在迁移博客时凡是文章中采用插件处理过的部分我都要手动翻译成markdown格式, 极大的耗费了我的时间和劳动力)\n\n2. 数据库复杂\n在WP中, 不管文章还是图片都是保存在数据库中的, 而数据是如何组织的, 放在哪里, 都是问题. 而当时间久了, 数据库中的内容多了, 整个WP都变得臃肿起来, 页面打开的速度变慢(当然这其中也有安装太多插件的功劳). 当我担心我的博客数据存在VPS上不放心想备份时, 相对可行的办法只能是安装数据库备份恢复插件, 好吧, 这个插件到底干了什么我也不知道, 反正就是运行了一下, 就把数据库给备份了, 当我想要恢复的时候, 我就点一下, 剩下的事情就是祈祷这插件能顺利执行了.\n\n3. 主题乏味\n不得不说, 虽然WP的主题众多, 但是质量高的没几款, 而这几款高质量主题用的人数自然多. 那么对于一个自己买域名, 折腾VPS, 搭博客的青年而言, 如此的大众化是无论如何不能接受的. 虽然大部分主题都支持一些定制选项, 但那些定制选项远远不够. 那好吧, 只能自己写主题或是改主题了, 写主题代价也太大了, 而改主题吧, 往往不能达到很好的效果, 因为不了解WP的页面生成框架, 而且WP那么大, 看文档都要看好段时间, 故只能在小地方修修改改, 给人的感觉就是, 最多只能这样了, 但是还是哪里看着不舒服.\n\n4. 高大全与臃肿\nWP是如此的完善, 有着自己的一套生态, 但是就是这种高大全给人一种臃肿难以掌控的感觉. 众多的插件质量也良莠不齐, 有些插件甚至在升级时会导致文章的排版出问题等.\n\n以上这些问题其实都不是特别严重, 毕竟比起WP所提供的丰富功能和完整生态而言显得有些微不足道. 但是自从我习惯使用Markdown记笔记编辑文档后, WP的问题就越来越突出了. 在渲染方面, Markdown与WP的众多代码, 表格, 分栏插件存在冲突, 虽然WP在新版本中加入了Markdown的支持, 但不一致的写作体验还是促使我离开了WordPress.\n\nHexo的优势\n相比于WordPress, Hexo给人一种更轻, 更专注的感觉. 首先, Hexo的一大特点就是没有数据库, 所有的页面都是实现生成的, 这使得Hexo的博客系统反应更加迅速, 同时管理起来也非常的一目了然. Hexo的另一大特性就是其对Markdown的支持, 诚然, Markdown在最终文档的表现力上比不上WP, 但是在写作体验上绝对是顺畅的, 而且在Hexo中, 所有的文章都是以Markdown的文本格式保存, 这样我就可以随时把我的文章渲染成html文档, 然后保存到evernote中, 或是打成PDF等等. 这样内容与样式分离的设计使得维护变得容易, 用户可以很轻松的将博客备份到Github上或是硬盘等其它地方.\n另外, Hexo整个主体框架很小, 因此, 修改主题变得十分容易.\n\n出于种种原因, 最后使得我将博客从WordPress搬至Hexo, 光是将原先文章手动转成Markdown格式就花了我3个晚上, 不过看着最后干净的博客页面和简洁的样式还是蛮欣慰的. 本文是一篇纯粹的水文, 主要用来记录下博客迁移这一事件, 别无它用, 亦没什么营养.","source":"_posts/wordpress2hexo.md","raw":"title: \"正式完成从Wordpress迁移至Hexo\"\ndate: 2015-04-08 22:51:27\ntags:\nnotoc: true\n---\n\n**2015-04-08 22:51:27 正式完成从WordPress迁移至Hexo的工作.**\n之前一直使用WordPress + VPS + 独立域名的方式运行博客. 博客上线是在2012年10月份吧, 刚开始的时候, WordPress的富文本编辑工具, 丰富的插件和主题对于刚开独立博客的用户而言十分便捷也很容易上手, 但是随着时间的推移, 到现在(2015/4)也已经有段时间了, 在这期间, 陆陆续续写了几篇文章, 但是在用WordPress写作的时候越发的感到不舒服, 甚至影响到了写作积极性. \n现在想想, 原因应该有以下几点:\n\n1. 过度依赖插件\nWordPress的插件数量众多, 几乎可以覆盖到用户能想到的全部功能, 这是好事, 但是问题就出在插件给人带来的写作体验上.\n例如, 当我在WP下写作时, 需要插入代码, 那么需要安装高亮代码的插件, 然后利用工具栏进行代码块的输入, 最终转化为HTML代码. 一篇文章通常会包含多处代码, 有的是代码块, 有的是行内代码, 我就需要不停的点击工具栏, 然后在插件窗口上输出代码. 这样的写作体验一点都不好, 而且更关键的是插入的代码在原文中的格式是由插件定义的, 而我所得到的只是最后渲染完成的HTML而已, 而插件定义的标签或是语法往往不是标准的. \n再比如当我想要插入图片的时候, WP会将本地的图片上传到不知道什么地方, 然后展示给我一个插入图片的窗口, 让我设置一些属性之后, 图片就插入到文章相应的位置去了. \n依赖插件的问题在进行文章导入/导出时尤为明显. 当你尝试性的从WP编辑器中复制全文到其它编辑器如(Word, WPS)中时, 不是丢失就是排版乱了. 在WP中, 有插件负责转换, 而当没有插件的参与时, 一切都变得很糟糕. \n这种格式与结构混淆的渲染方式给了我一种不好的感觉, 那就是我的文章在写完的那一刻就已经不是我的了, 它已经彻彻底底的属于WP和它的插件们了. 我再也别想很容易的把我的文章完完整整的从WP中拿出来. (这也照成了此次我在迁移博客时凡是文章中采用插件处理过的部分我都要手动翻译成markdown格式, 极大的耗费了我的时间和劳动力)\n\n2. 数据库复杂\n在WP中, 不管文章还是图片都是保存在数据库中的, 而数据是如何组织的, 放在哪里, 都是问题. 而当时间久了, 数据库中的内容多了, 整个WP都变得臃肿起来, 页面打开的速度变慢(当然这其中也有安装太多插件的功劳). 当我担心我的博客数据存在VPS上不放心想备份时, 相对可行的办法只能是安装数据库备份恢复插件, 好吧, 这个插件到底干了什么我也不知道, 反正就是运行了一下, 就把数据库给备份了, 当我想要恢复的时候, 我就点一下, 剩下的事情就是祈祷这插件能顺利执行了.\n\n3. 主题乏味\n不得不说, 虽然WP的主题众多, 但是质量高的没几款, 而这几款高质量主题用的人数自然多. 那么对于一个自己买域名, 折腾VPS, 搭博客的青年而言, 如此的大众化是无论如何不能接受的. 虽然大部分主题都支持一些定制选项, 但那些定制选项远远不够. 那好吧, 只能自己写主题或是改主题了, 写主题代价也太大了, 而改主题吧, 往往不能达到很好的效果, 因为不了解WP的页面生成框架, 而且WP那么大, 看文档都要看好段时间, 故只能在小地方修修改改, 给人的感觉就是, 最多只能这样了, 但是还是哪里看着不舒服.\n\n4. 高大全与臃肿\nWP是如此的完善, 有着自己的一套生态, 但是就是这种高大全给人一种臃肿难以掌控的感觉. 众多的插件质量也良莠不齐, 有些插件甚至在升级时会导致文章的排版出问题等.\n\n以上这些问题其实都不是特别严重, 毕竟比起WP所提供的丰富功能和完整生态而言显得有些微不足道. 但是自从我习惯使用Markdown记笔记编辑文档后, WP的问题就越来越突出了. 在渲染方面, Markdown与WP的众多代码, 表格, 分栏插件存在冲突, 虽然WP在新版本中加入了Markdown的支持, 但不一致的写作体验还是促使我离开了WordPress.\n\nHexo的优势\n相比于WordPress, Hexo给人一种更轻, 更专注的感觉. 首先, Hexo的一大特点就是没有数据库, 所有的页面都是实现生成的, 这使得Hexo的博客系统反应更加迅速, 同时管理起来也非常的一目了然. Hexo的另一大特性就是其对Markdown的支持, 诚然, Markdown在最终文档的表现力上比不上WP, 但是在写作体验上绝对是顺畅的, 而且在Hexo中, 所有的文章都是以Markdown的文本格式保存, 这样我就可以随时把我的文章渲染成html文档, 然后保存到evernote中, 或是打成PDF等等. 这样内容与样式分离的设计使得维护变得容易, 用户可以很轻松的将博客备份到Github上或是硬盘等其它地方.\n另外, Hexo整个主体框架很小, 因此, 修改主题变得十分容易.\n\n出于种种原因, 最后使得我将博客从WordPress搬至Hexo, 光是将原先文章手动转成Markdown格式就花了我3个晚上, 不过看着最后干净的博客页面和简洁的样式还是蛮欣慰的. 本文是一篇纯粹的水文, 主要用来记录下博客迁移这一事件, 别无它用, 亦没什么营养.","slug":"wordpress2hexo","published":1,"updated":"2015-04-08T16:25:58.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o8u0007kadyx648la72"},{"title":"Vim(2) -- Vim插件介绍及配置","date":"2014-05-16T03:16:53.000Z","_content":"\n单独的Vim本身在文本编辑方面已经足够强大，但是针对一些特殊的场合还有很多可以提高和改进的空间，这也是插件的意义所在。你用Vim写脚本吗？你用Vim写C/C++吗？你用Vim写HTML、CSS、javascript吗？你用Vim写Ruby吗？你用Vim看项目代码吗......那么各式各样的Vim插件总有一款或几款可以满足你的需求。<!-- more -->\n\n# 前言\n\n掌握Vim确实没有什么捷径，如果非要说有的话，那便是唯手熟而。当你渐渐习惯用hjkl来移动光标，自如的在各个模式下切换，会用一些基本的指令，心里还不那么排斥Vim的话，那么我想接下来要做的就是在实际使用过程中进一步打磨你的Vim，让Vim真正融入到你的生活工作中去了。\n\n单独的Vim本身在文本编辑方面已经足够强大，但是针对一些特殊的场合还有很多可以提高和改进的空间，这也是插件的意义所在。你用Vim写脚本吗？你用Vim写C/C++吗？你用Vim写HTML、CSS、javascript吗？你用Vim写Ruby吗？你用Vim看项目代码吗......那么各式各样的Vim插件总有一款或几款可以满足你的需求。由于插件不属于“标准的”Vim集合，且每个人的工作内容不同因此不同人拥有不同的插件集也是很正常的事情，也正因此，网络上才会有花样繁多的Vim配置方案，多到让人眼花缭乱却无从下手。\n\n本人的主要工作环境是Linux Mint，采用C/C++进行开发附带python和一些shell脚本，这里以本人的Vim插件配置举例，讲解在配置Vim插件过程中的一般性和部分具体性方法。首先上张图来看看吧～\n![My Vim](/img/vim2/Screenshot_for_my_vim.png)\n\n相比于原始的Vim，安装了插件后的Vim界面显得非常的丰(hua)富(shao)，这些插件中有一部分是可以显示在窗口上的，一部分则是在使用过程中才能感受到的。从上图中可以看到，整个Vim窗口被划分成了两列，左边为侧边栏，包含文件浏览器以及下方的程序符号列表，在符号列表很清晰的划分了宏定义，变量和函数等信息。窗口的上方还将使用中的buffer显示出来(默认情况下buffer是隐藏的)。右侧则为主要的编辑区，编辑区下方的为酷炫的状态栏～\n\n**Vim Buffer简介**\n\n所谓的buffer，实际上是Vim用于保存工作中的文件信息的，每个打开的文件都对应一个buffer，对文件的操作会保存在buffer中，当关闭文件的时候，根据用户的选择，可以将buffer中的修改内容写入硬盘，或是丢弃buffer中的修改内容。其实文件buffer的概念随处可见，最经常看到的就是你打开文本文档或者Word并输入一些内容后，在没有保存的情况下就关闭程序，会出现是否保存或者放弃保存直接退出的提示，而这些修改的内容就是暂存在buffer中的。只是在windows下，文本文档和word的文件缓存是看不到的(word会定时将缓存写入隐藏的临时文件来保存进度防止意外断电)，而对于Vim，我们则称文件缓存为Buffer。\n\n从上图中的buffer显示条中可以看到，Vim一共打开了4个文件，即有4个对应的buffer，每个buffer有自己的编号(这个编号是Vim定的，保证唯一，但是可能不是顺序的)。\n\n---\n\n# 插件概览\n\n本人安装的Vim插件包括以下几个：\n\n|Plugin|Description|\n|:-|:-|\n|[vundle](https://github.com/gmarik/Vundle.vim)| 一款用于管理插件的插件，操作简单方便，是主流的管理插件。|\n|[ctrlp](https://github.com/kien/ctrlp.vim)| 一款非常好用的模糊查找文件插件。|\n|[vim-airline](https://github.com/bling/vim-airline)| B格很高的一个状态栏增强插件，同时带有buffer显示条(tabline)，并集成了多款主流插件。|\n|[vim-Bbye](https://github.com/moll/vim-bbye)| 解决了当关闭当前buffer时导致的窗口关闭以及布局混乱等问题。|\n|[nerdcommenter](https://github.com/scrooloose/nerdcommenter)| 快速注释工具，同时根据文件类型自动选择对应注释。|\n|[nerdtree](https://github.com/scrooloose/nerdtree)| 一款用于浏览文件或目录的插件，效果相当于嵌入Vim内的资源管理器。|\n|[taglist](https://github.com/vim-scripts/taglist.vim)| 用于显示程序中的符号列表，并进行简单的查看插件。|\n|[winmanager](https://github.com/vim-scripts/winmanager)| Vim窗口管理插件，主要用于将nerdtree和taglist整齐的安放在一个“侧边栏”中。|\n|[a.vim](https://github.com/vim-scripts/a.vim)| 用于快速的在*.c/*.cpp和*.h文件之间进行切换。|\n|[OmniCppComplete](https://github.com/vim-scripts/OmniCppComplete)| 老牌C/C++自动补全插件，不过似乎存在更好的插件，未研究。|\n \n---\n\n# 插件安装\n\n插件的安装方式大致上分为两种：传统的安装方式和基于包管理的插件安装方式。\n\n## 传统的安装方式(不推荐)\n\n我们先来介绍一下传统的安装方式是什么样的。插件实际上是由vim脚本和少数其它类型的文件组成，插件一般位于用户家目录的 `.vim` 文件夹下，即 `～/.vim/` (如果没有，请自行创建)。\n\n安装的流程：\n\n1. 从[www.vim.org/scripts/](http://www.vim.org/scripts/)或者[github.com](https://github.com/)上找到对应的插件并下载。\n2. 解压下载得到的插件压缩包，得到若干个文件及文件夹。\n3. 将解压得到的文件或文件夹放到～/.vim/ 文件夹下，如果遇到和之前插件同名的文件夹，则选择合并。\n4. 重启Vim,插件生效。\n\n总结一下传统的安装方法，实际上就是找到`插件--下载--解压--放到.vim文件夹下--完成`。(不过，对于某些特定的插件，可能有不同的安装方式，有的直接提供了可执行的安装脚本，有的则要求需要一些库的支持或者需要进行一定的配置后才能使用。好在这些都是少数情况，大部分的插件的安装都是相当简单的。)\n\n**注意：我们并不提倡用传统的方式安装插件**\n\n传统的插件安装方式存在一些弊端。首先，所有插件不加区分和归类的直接丢到 `～/.vim/` 文件夹下，非常混乱；其次，插件的管理不方便，比如要想删除一个插件，那么必须要到 `～/.vim/` 文件夹下找到插件对应的文件一一删除，如果想要更新插件，那么就必须重新下载新版本的插件再次安装。\n\n让我们举个例子直观感受下传统的插件安装方式：以下是`nerdtree`和`ctrlp`插件解压得到的文件和文件夹。\n```\nnerdtree\n|--autoload/\n|--doc/\n|--lib/\n|--nerdtree_plugin/\n|--plugin/\n|--syntax/\n|--README.markdown\n```\n\n```\nctrlp\n|--autoload/\n|--doc/\n|--plugin/\n|--readme.md\n[/ezcol_1half_end]\n```\n\n当安装这两个插件时候，二者都放到了 `～/.vim/` 文件夹下，其中 `autoload`，`doc`，`plugin` 目录整合到了一起。当要删除 `ctrlp` 插件的时候，需要到删除 `ctrlp` 对应的文件，就要到 `autoload`，`doc`，`plugin` 目录中一个个找属于 `ctrlp` 插件的文件进行删除，可想而知是多么的麻烦。同时无法自动更新插件，需要通过下载覆盖来进行手动更新。\n\n仔细观察不难看出，传统的插件安装方式的弊端主要源自于其混乱的插件管理方式。那么很自然的，人们就会希望能够将插件各自分开来进行存放，同时尽量避免手动的管理插件。这也是为什么后来会出现多款优秀的基于包(bundle)的插件管理工具的原因。\n\n \n\n## 插件管理工具--Vundle\n\n出于传统Vim插件安装及管理方式的弊端，目前有许多插件管理工具，pathogen、NeoBundle、Vundle、VAM等。pathogen我用过，之后转投Vundle了，至于NeoBundle和VAM没有用过，就不发言了，功能应该大致一样。这里选用目前最主流的Vundle来进行讲解。\n\nVundle本身也是一个Vim插件，主要干了两件事情：\n\n1.将不同插件放置到 `～/.vim/` 下的对应文件夹进行分别管理。\n2.集成了git操作，自动安装更新或卸载插件。\n\n### Vundle的优点\n- 其中插件存放在 `～/.vim/bundle/` 目录下，例如`nerdtree`存放在 `～/.vim/bundle/nerdtree/` 目录下，`taglist` 存放在 `～/.vim/bundle/taglist/` 目录下，这样各个插件的目录就非常的清晰明了。\n\n- 对于安装更新卸载插件，只需要在vimrc文件中写入要安装的插件，通过对应的Vim命令即可自动从github或vim.org上自动获取或更新该插件，要卸载时只需将vimrc文件中对应的插件名删除，再运行对应命令即可自动删除插件。\n\n*注：可能有同学git和github比较陌生，git是一个一个分布式的版本控制工具，简单点说就是可以随时把代码放进数据库并加以管理，同时可以随时提取出某个时候放进数据库的代码的一个代码管理工具，除了本地数据库，git还可以从远程服务器上获取或提交代码，而github.com就是一个提供这种代码托管服务的网站，上面存放着成千上万的代码库。基本上我们知道的vim插件源码在github上都能找到，而Vundle的插件安装更新操作就是采用git从github上把对应插件拖到你本地的电脑上，因此Vundle需要git的支持，也就是说你的电脑上需要事先安装有git，现在主流的Linux发行版都是默认安装有git的。如果对git和github比较感兴趣的同学，可以看看[Pro Git](http://git-scm.com/book/zh/v1) 和[GotGitHub](http://www.worldhello.net/gotgithub/)。*\n\n### 安装配置Vundle\n\n关于Vundle的最新信息以及安装方法具体请参见Vundle的github主页：[github.com/gmarik/Vundle.vim](https://github.com/gmarik/Vundle.vim) 。以下对Vundle的安装过程新进适当的描述。\n\n1. 安装Vundle前，我们需要一个干净的 `～/.vim/` 目录。如果你之前采用传统的插件安装方式将插件安装在 `～/.vim/` 目录下，那么你可以备份原先的 `~/.vim/` 目录：`$ mv ~/.vim ~/.vim.bak` 。然后在新建一个空的`.vim`目录：`mkdir ～/.vim` ，这样我们就得到了一个空的 `～/.vim/` 目录，便于之后的Vundle安装。\n\n2. 通过git下载并安装Vundle(实际上就是通过git工具将最新的Vundle下载到对应的目录下)：\n```\n$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n```\n\n3. 接下来，对Vundle进行配置。Vundle的配置过程是在vimrc文件中添加相应的语句。以下是插件官方给出的示例：\n```\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'gmarik/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\nPlugin 'L9'\n\" Git plugin not hosted on GitHub\nPlugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\nPlugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\nPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Avoid a name conflict with L9\nPlugin 'user/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList          - list configured plugins\n\" :PluginInstall(!)    - install (update) plugins\n\" :PluginSearch(!) foo - search (or refresh cache first) for foo\n\" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\n```\n对于Vundle的配置语句，其实没多少，上面这么长的一段只是详细的讲解了Vundle是如何配置和使用的。这里我们需要修改的就只是`call vundle#begin()` 和 `call vundle#end()` 之间的部分，我们需要在这里添加我们需要的插件信息，以便Vundle可以根据这些信息为我们自动安装插件。Vundle支持4种插件搜索添加方式，分别为托管在github上的插件、存放在vim-scripts.org上的插件、未托管在github上但是可以通过git协议访问到的插件、本地(正在开发的)插件。由于我们需要的插件要不是托管在github上，要不就是在github上有镜像，简单点说就是在github上都能找得到，因此我们只要在vimrc文件中给出github上插件的对应信息就可以了，具体格式为`Plugin '开发者用户名/项目名字'` 例如，我想安装vim-airline插件，那可以在github.com上搜索vim-airline项目，可以找到项目主页的链接为：https://github.com/bling/vim-airline ，则我只需要在vimrc的对应行中写入`Plugin 'bling/vim-airline'` 。\n\n明白了Vundle配置的具体方法，让我们打开 `～/.vimrc` 文件，在 `.vimrc` 文件的顶部(也可以是任意位置)，添加如下语句：\n```\n\" Vundle设置\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'gmarik/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'scrooloose/nerdtree'\nPlugin 'scrooloose/nerdcommenter'\nPlugin 'vim-scripts/taglist.vim'\nPlugin 'bling/vim-airline'\nPlugin 'vim-scripts/winmanager'\nPlugin 'vim-scripts/a.vim'\nPlugin 'kien/ctrlp.vim'\nPlugin 'vim-scripts/OmniCppComplete'\nPlugin 'moll/vim-bbye'\n\" plugin from http://vim-scripts.org/vim/scripts.html\n\" Plugin 'L9'\n\" Git plugin not hosted on GitHub\n\" Plugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\n\" Plugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\n\" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Avoid a name conflict with L9\n\" Plugin 'user/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n```\n这样，Vundle就知道了我们所需要的全部插件。\n\n 安装或更新插件。打开vim，输入`:PluginInstall`  即可将vimrc中配置的插件下载安装，如果之前已经安装过，则进行更新。或者直接在终端输入 `vim +PluginInstall +qall` 效果也相同。是不是很方便～如果想卸载插件，只要将vimrc中插件对应的行删除，然后打开vim，输入 `:PluginClean` 即可。\n 注：在安装或更新过程中Vundle需要从github上下载数据，因此Vim界面无法进行正常操作，但下方的状态栏会显示正在处理，所以只需耐心等待即可。\n\n至此，插件就已经安装完成了。接下来还需要对每个插件进行单独的配置。\n\n注：就插件管理而言，Vundle已经做的足够优秀，但是事情往往可以变得更好。尽管可能遇到的机会不多，但是试想一下，如果你新买了一台电脑，或是电脑硬盘故障导致数据丢失了又或者你在操作一台不常用的电脑，是不是每次都要安装Vundle，更要命的是每次都要修改vimrc文件，要知道vimrc文件里面出了基本的vim设置外还有相当大一部分的插件设置，对Vim环境进行恢复的代价还是略大了点。因此，我们总希望我们的Vim配置能够保存在云端，以便我们随时可以通过一条简单的命令就可以把一切恢复到熟悉的模样。要想完成这点，需要在配置完Vim和插件后，将 `./.vim/` 目录以及 `./.vimrc` 文件都托管到自己github的上，具体方法在接下来的文章会讲到，现在，让我们先专注于把插件配置好: - )\n\n---\n\n# 插件配置及使用\n\n在使用插件的过程中，往往会涉及到很多插件的具体命令，而这些命令往往比较长，并且夹杂着大小写，输入起来比较繁琐，因此往往使用键位绑定和映射来解决这个问题，简单点说就是设置快捷键。而Vim中的操作相当的多，不用说单个的按键了，即便是像 `ctrl+××`，`alt+××` 或是 `ctrl+shift+××` 这样的组合键都有对应的操作，因此我们会经常看到vimrc文件中采用 `<leader>`键和其它按键配合进行键盘映射。vimrc文件中的 `<leader>`实际上也是一个按键，默认为回车键上方的`\\`键，可以根据用户需要修改。本人就将 `<leader>` 设置成了逗号`,`。修改 `<leader>`键只需要在vimrc文件中添加：\n```\n\" leader键\nlet mapleader=\",\"\nlet g:mapleader=\",\"\n```\n注：插件的具体配置信息一般都是记录在vimrc文件中，以下介绍插件的配置语句全是添加在 `～/.vimrc` 文件中的。\n\n## nerdtree\n\n在 `~/.vimrc` 文件中添加以下内容：\n```\n\" nerdtree设置\n\" 控制当光标移动超过一定距离时，是否自动将焦点调整到屏中心\nlet NERDTreeAutoCenter=1\n\" 指定鼠标模式（1.双击打开；2.单目录双文件；3.单击打开）\n\" let NERDTreeMouseMode=2\n\" 是否默认显示书签列表\n\" let NERDTreeShowBookmarks=1\n\" 是否默认显示文件\nlet NERDTreeShowFiles=1\n\" 是否默认显示隐藏文件\n\" let NERDTreeShowHidden=1\n\" 是否默认显示行号\n\" let NERDTreeShowLineNumbers=1\n\" 窗口位置（'left' or 'right'）\n\" let NERDTreeWinPos='left'\n\" 窗口宽\nlet NERDTreeWinSize=31\n```\n上面只添加了一些常用的设置，更具体的设置请在vim中输入 `:help nerdtree` 查看。\n\nnerdtree基本操作\n\n|key|Description|\n|:-|:-|\n|`o`|在已有窗口中打开文件、目录或书签，并跳到该窗口|\n|`go`|在已有窗口 中打开文件、目录或书签，但不跳到该窗口|\n|`x`|合拢选中结点的父目录|\n|`J` (大写)|跳到当前目录下同级的最后一个结点|\n|`I` (大写)|切换是否显示隐藏文件|\n|`m`|显示系统菜单|\n|`C` (大写)|设置当前目录为root|\n|`u`|返回到当前root的上级父目录并设置为root|\n|`q`|关闭NerdTree窗口|\n\n## taglist\n\ntaglist是一个用于显示定位程序中各种符号的插件，例如宏定义、变量名、结构名、函数名这些东西我们将其称之为符号(symbols)，而在taglist中将其称之为tag。显然，要想将程序文件中的tag显示出来，需要事先了解全部tag的信息，并将其保存在一个文件中，然后去解析对应的tag文件。taglist做的仅仅是将tag文件中的内容解析完后显示在Vim上而已。tag扫描以及数据文件的生成则是由[ctags(Exuberant Ctags)](http://ctags.sourceforge.net/)这一工具完成的，所以在使用taglist之前，你的电脑需要装有ctags(Vim默认已安装)。\n\ntaglist的设置：\n```\n\" taglist设置\nlet Tlist_Show_One_File=1 \" 0为同时显示多个文件函数列表,1则只显示当前文件函数列表\nlet Tlist_Auto_Update=1\nlet Tlist_File_Fold_Auto_Close=1 \" 非当前文件，函数列表折叠隐藏\nlet Tlist_Exit_OnlyWindow=1 \"如果taglist是最后一个窗口，则退出vim \nlet Tlist_Auto_Update=1            \"Automatically update the taglist to include newly edited files.\n\"把taglist窗口放在屏幕的右侧，缺省在左侧\n\"let Tlist_Use_Right_Window=1 \n\"显示taglist菜单\n\"let Tlist_Show_Menu=1\n\"启动vim自动打开taglist\n\"let Tlist_Auto_Open=1\n\" ctags, 指定tags文件的位置,让vim自动在当前或者上层文件夹中寻找tags文件\nset tags=tags\n\" 添加系统调用路径\nset tags+=/usr/include/tags\n\"键绑定，刷新tags\nnmap tg :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR>:set tags+=./tags<CR>\n```\n\n我们已经稍微解释了下taglist和ctags的关系，在真正使用过程中，需要在项目文件夹下面运行命令 `ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR>:set tags+=./tags<CR>` ，这个命令的主要任务是对当前目录下的全部文件递归扫描，然后生成一个“tags”文件，里面记录整个项目的全部符号信息，同时将当前目录下的这个tags文件告知taglist，taglist根据这个tags文件显示项目的tag。(对于ctags命令中的各个开关，可以通过man ctags查看具体作用，此处不再赘述)\n\n接下来，稍微解释下部分配置内容：\n`set tags=tags` 表示tags文件所在位置，此处设定为当前目录下查找tags文件，当然，你也可以添加其它路径下的tags文件。`set tags+=/usr/include/tags` 就将系统调用的tags文件也包含进来了，这样如果程序中包含系统的一些调用，那么也能被正确解析。此外，我们还将生成tags的ctags命令进行了键盘映射：`nmap tg :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR>:set tags+=./tags<CR>`  ，这样就可以直接在Vim的Normal模式下输入`tg`直接在当前工作目录下产生tags文件而不用先在终端运行ctags命令后在到Vim显示了。同时还需要注意的一点是，一旦程序代码发生改动，则相应的“tag”也会发生变化，这时需要重新利用ctags命令生成tags文件，这个对于我们设置完键位映射后显得比较简单，再输入`tg`即可。\n\ntaglist的基本操作：\n\n|key|Description|\n|:-|:-|\n|`ctrl+]`|查找当前光标所在处tag的定义|\n|`ctrl+t`|返回到之前执行查找tag时的位置|\n|`o`|在一个新打开的窗口中显示光标下tag|\n|`Space`|显示光标下tag的原型定义|\n|`x`|taglist窗口放大和缩小，方便查看较长的tag|\n|`q`|关闭taglist窗口|\n\n关于taglists的具体配置以及使用，请在Vim下输入`:help taglist `查看。同时，这里推荐一个关于ctags介绍的[视频](http://happycasts.net/episodes/25?autoplay=true)。\n\n**cscope**\n\n说到ctags，就不得不提下cscope。ctags最大的优点在于通过 `ctrl+]`就可以快速定位到程序符号所在的位置进行查看，之后再通过 `ctrl+t` 或者 `ctrl+o` 返回之前的位置，用两组按键来总结ctags，那就是 `ctrl+]` 和 `ctrl+t` 。ctags虽然已经相当不错了，但是仍然无法解决一些问题，例如查看函数被哪些函数调用，函数调用了哪些函数，查找该头文件被哪些文件包含等等，而解决这些问题，就需要用到cscope了。cscope不是Vim插件，而是一个工具，因此需要在终端进行安装。cscope的原理其实和ctags一样，也需要事先扫描项目目录，生成相关信息文件，方便之后查找的时候使用，cscope生成的数据文件为 `cscope.out` 和 `cscope.in.out`。\n\ncscope设置：\n\n```\n\" Cscope 设置\nif has(\"cscope\")\n    set csprg=/usr/bin/cscope   \"指定用来执行cscope的命令\n    set csto=0                  \" 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库\"\n    set cst                     \" 同时搜索cscope数据库和标签文件\"\n    set cscopequickfix=s-,c-,d-,i-,t-,e-    \" 使用QuickFix窗口来显示cscope查找结果\"\n    set nocsverb\n    if filereadable(\"cscope.out\")    \" 若当前目录下存在cscope数据库，添加该数据库到vim\n        cs add cscope.out\n    elseif $CSCOPE_DB != \"\"            \" 否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim\n        cs add $CSCOPE_DB\n    endif\n    set csverb\nendif\nmap <F4>:!cscope -Rbq<CR>:cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>\n\"对:cs find c等Cscope查找命令进行映射\nnmap <leader>s :cs find s <C-R>=expand(\"<cword>\")<CR><CR> :copen<CR><CR>\nnmap <leader>g :cs find g <C-R>=expand(\"<cword>\")<CR><CR>\nnmap <leader>d :cs find d <C-R>=expand(\"<cword>\")<CR><CR> :copen<CR><CR>\nnmap <leader>c :cs find c <C-R>=expand(\"<cword>\")<CR><CR>:copen<CR><CR>\nnmap <leader>t :cs find t <C-R>=expand(\"<cword>\")<CR><CR>:copen<CR><CR>\nnmap <leader>e :cs find e <C-R>=expand(\"<cword>\")<CR><CR>:copen<CR><CR>\nnmap <leader>f :cs find f <C-R>=expand(\"<cfile>\")<CR><CR>\nnmap <leader>i :cs find i <C-R>=expand(\"<cfile>\")<CR><CR> :copen<CR><CR>\n\" 设定是否使用 quickfix 窗口来显示 cscope 结果\nset cscopequickfix=s-,c-,d-,i-,t-,e-\n```\n\ncscope生成数据文件的命令为：`cscope -Rbq` ，`-R` 表示在生成索引文件时，搜索子目录树中的代码；`-b` 表示只生成索引文件，不进入cscope的界面；`-q` 表示生成 `cscope.in.out` 和 `cscope.po.out` 文件，加快cscope的索引速度。我们的配置文件将`<F4>`键映射成了cscope命令，同时将生成的cscope.out文件加入到当前索引文件中。(由于cscope和ctags往往配合一同使用，而且都需要事先生成数据文件，所以本人直接将ctags和cscope生成数据文件的操作组合起来，绑定到了一组组合键上：`nmap tg :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR> :set tags+=./tags<CR>:!cscope -Rbq<CR>:cs add ./cscope.out .<CR>` ，键位绑定这东西，仁者见仁，智者见智，根据自己的喜好来。)\n\ncscope基本操作：\n\n|key|Description|\n|:-|:-|\n|`:cs find s`|查找这个C符号|\n|`:cs find g`|查找这个定义|\n|`:cs find d`|查找被这个函数调用的函数（们）|\n|`:cs find c`|查找调用这个函数的函数（们）|\n|`:cs find t`|查找这个字符串|\n|`:cs find e`|查找这个egrep匹配模式|\n|`:cs find f`|查找这个文件|\n|`:cs find i`|查找#include这个文件的文件（们）|\n\nfind可以简写为f, 所以命令可以写成`:cs f s symbol_name`\n\n参考上面cscope的配置语句，我们将 `:cs find` 操作映射成了 `<leader>` ，这样方便很多。`nmap <leader>s :cs find s <C-R>=expand(\"<cword>\")<CR><CR> :copen<CR><CR>` ，这里我们主要关注下这条语句后面的内容，其中 `<C-R>=expand(\"<cword>\")` 代表当前光标所在地方的单词，而 `:copen` 则是打开Vim中内置的一个称之为 `quickfix` 的窗口用于显示查找的结果。\n\n对我而言，我看代码时最常用的就是 `ctrl+]` ，`ctrl+o` 和 `:cs find c` 了。\n\n关于cscope的详细信息，请在终端运行 `man cscope` 。\n\n## winmanager\n\n我们上面介绍了用于文件浏览的nerdtree以及浏览程序符号的taglist，这两个插件都会以窗口的形式出现在Vim的窗口中，那么如何合理的安排它们，这就是winmanager的作用。\n\n这里，我们利用winmanager将nerdtree和taglist放到同一个\"侧边栏\"中，nerdtree在上方，taglist在下方，效果如下图所示：\n\n![](/img/vim2/winmanager_with_nerdtree_and_taglist.png)\n\nwinmanager设置：\n```\n\" WinManager设置\n\" NERD_Tree集成到WinManager\nlet g:NERDTree_title=\"[NERDTree]\" \nfunction! NERDTree_Start()\n    exec 'NERDTree'\nendfunction\n\nfunction! NERDTree_IsValid()\n    return 1\nendfunction\n\n\" 键盘映射，同时加入防止因winmanager和nerdtree冲突而导致空白页的语句\nnmap wm :if IsWinManagerVisible() <BAR> WMToggle<CR> <BAR> else <BAR> WMToggle<CR>:q<CR> endif <CR><CR>\n\" 设置winmanager的宽度，默认为25\nlet g:winManagerWidth=30 \n\" 窗口布局\nlet g:winManagerWindowLayout='NERDTree|TagList'\n\" 如果所有编辑文件都关闭了，退出vim\nlet g:persistentBehaviour=0\n```\n这里唯一要说的就是我将wm映射成了winmanager的开关，这意味着，在Vim的Normal模式下，我输入`wm`即可打开“侧边栏”，再次输入`wm`即可关闭“侧边栏”。\n\n## vim-airline\n\n接下来介绍一下个人非常喜欢的一个插件vim-airline。这是一款状态栏增强插件，可以让你的Vim状态栏非常的美观，同时包括了buffer显示条扩展smart tab line以及集成了一些插件。vim-airline-demo\n\n![airline展示](/img/vim2/vim-airline-demo.gif)\n\n(关于状态栏增强插件，你可能还听说过Powerline，airline是受Powerline的启发而开发的。和airline不同的是，Powerline不是纯粹的Vim脚本编写的，需要python的支持，同时airline的代码远少于powerline，这意味着airline更轻更快。)\n\n### vim-airline字体补丁\n\n虽然我们在本文的上半部分中讲解了通过Vundle来安装插件，但是airline有点特殊，还需要进行些额外的操作才能达到最佳的显示效果。这是因为airline中的三角形箭头实际上是通过特殊的字符而非图片实现的，但是系统原先的字体库中并没有包含这类特殊的图形字符，因此，想要达到上图所示的显示效果，需要对系统字库“打补丁”，即添加特殊图形字符。具体步骤如下：\n\n1. 下载已经打过补丁的字体\n\n在家目录下新建一个.fonts文件夹：`$ mkdir ~/.fonts` 然后 `$ cd ~/.fonts` 进入文件夹，执行 `$git clone git@github.com:Lokaltog/powerline-fonts.git` 下载已经打过补丁的字体文件。此时，`~/.fonts/` 目录下已经存在打过补丁的常用系统字体文件了。\n\n2. 向系统中安装打过补丁的字体\n\n运行 `$ fc-cache -vf ~/.fonts` 安装patched fonts到系统中。\n\n3. 设置终端字体为打过补丁的字体\n\n![](/img/vim2/set_patched_font_for_terminal.png)\n\n我这里将终端字体设置成了DejaVu Sans Mono for Powerline。(打过补丁的字体名字后面都会有个for Powerline，选择自己喜欢的就好)。\n\n### vim-airline设置\n```\n\" airline设置\nset laststatus=2\n\" 使用powerline打过补丁的字体\nlet g:airline_powerline_fonts = 1\n\" 开启tabline\nlet g:airline#extensions#tabline#enabled = 1\n\" tabline中当前buffer两端的分隔字符\nlet g:airline#extensions#tabline#left_sep = ' '\n\" tabline中未激活buffer两端的分隔字符\nlet g:airline#extensions#tabline#left_alt_sep = '|'\n\" tabline中buffer显示编号\nlet g:airline#extensions#tabline#buffer_nr_show = 1\n\" 映射切换buffer的键位\nnnoremap [b :bp<CR>\nnnoremap ]b :bn<CR>\n```\n关于上述的配置文件没什么好说的，注释都解释的比较明白了。这里我只想提一下vim-airline中自带的smart tab line扩展，smart tab line效果如下\n\n![airline中的tabline展示](/img/vim2/tabline_in_airline.gif)\n\n我们都知道在Vim中可以同时操作多个文件，多文件操作主要有两个显示手段，一个是buffer方式，一个tab的方式。tab方式我想不用多说，就相当于标签页，每个标签页位于不同的Vim窗口。因此，当切换tab的时候，原先的窗口布局会发生混乱，这个是我们不愿意看到的，而buffer则是在同一个窗口下的，便不存在这个问题。实际使用过程中，我更倾向于使用buffer来管理打开的多个文件。但是Vim对于buffer，默认的是隐藏的，也就是说，你打开了A、B、C三个文件，Vim并不将这三个文件的buffer显示出来，你只能通过 `:ls` 来查看buffer，然后通过 `:bn` (buffer next)和 `:bp` (buffer previous)，或者 `:b num` (打开编号为num的buffer)这样的命令来切换不同文件。如果能把buffer显示在Vim的窗口上，那么buffer切换起来就相对比较轻松，同时也能明白自己打开的文件都有哪些。\n\n对于buffer可视化以及buffer管理的插件，比较著名的有 `Minibufexplorer` 和 `Bufexplorer`，大多数人选择使用Minibufexplorer(Bufexplorer我没用过)。Minibufexplorer整体上来说不错，但是存在一个个人认为非常致命的缺陷，那就是和winmanager的兼容性不好，表现在当打开多个buffer的时候，winmanager中的nerdtree显示部分会被压扁，无法还原，同时关闭文件buffer时，窗体的布局有时候会发生混乱。正因为这样的原因导致我最后放弃了Minibufexplorer。而airline中自带的smart tab line的主要功能是将buffer显示出来，同时当文件名太长的时候，会根据设定的模式进行适当的缩写。可能没有Minibufexplorer功能多，但是这样对我而言就已经足够了，更何况tab line还如此的美观呢 :-D\n\n因为tab line只是一个显示buffer的扩展，并不提供操作buffer的功能，所以想要操作buffer还是要通过Vim自带的命令实现，从上面的配置语句中可以看到，我将切换到前一个buffer的命令 `:bp` 映射成了 `[b` ，将切换至后一个buffer的命令 `:bn` 映射成了 `]b` (这实际上是airline作者的映射)\n\n ## vim-Bbye\n\nvim-Bbye主要是用于解决在关闭buffer时候导致的窗口混乱问题。(如果你在关闭buffer的时候没有任何问题的话，可以无视此插件= =)问题主要表现为，在Vim中，如果当前窗口里存在多个buffer，而你用 `:bd` 命令删除当前操作的buffer的话，会导致整个Vim窗口都被关闭的问题。vim-Bbye很好的解决了这个问题。\n\nvim-Bbye涉及到的主要命令就是 `:Bd`,采用这个命令关闭当前buffer不会导致整个窗口被关闭的问题。因此我将这条命令映射成了bd ，在vimrc中的配置如下：\n\n```\n\" Bbye设置\n\" 由于原生的:bd在删除当前buffer时会将整个窗口关闭，故使用Bbye的:Bd\nnnoremap bd :Bd<CR>\n```\n\n ## ctrlp\n\nctrlp是一款相当棒的插件，主要的功能是对文件进行模糊的查找，如果你的project目录结构复杂，或者你正在阅读一个较大的项目的话，那么ctrlp可以帮你快速的定位到你想要文件而不必在终端不断的cd、ls。\n\n例如想打开文件 `linux/arch/x86/mm/mmap.c` , 只需要在vim中通过 `ctrl+p` , 打开ctrlp, 输入 `laxmm` 或者 `lucxmp` (诸如此类的, 即路径中顺序出现的字符组合), ctrlp就能帮你定位到对应的 `mmap.c` 文件, 回车打开即可.\n\nctrlp在阅读大项目时特别有用, 很多时候,  我们只记得要找的文件大概在某个文件夹下, 不确定中间还有哪些文件夹, 这时ctrlp就可以极大程度的提高你定位文件的效率.\n\n这里提供一个介绍ctrlp不错的[视频](http://happycasts.net/episodes/64?autoplay=true)给大家。\n\n## nerdcommenter\n\n如果你是一个酷爱写注释的程序员的话，那么你一定要用一下nerdcommenter，即便你不热衷于写注释，你也应该关注下nerdcommenter这款插件。\n\nnerdcommenter基本操作：\n\n|key|Description|\n|:-|:-|\n|`<leader>cc`|注释当前行|\n|`<leader>c+space`|注释选定代码行|\n|`<leader>cu`|取消注释|\n|`<leader>ca`|在可选的注释方式之间切换，比如C/C++ 的块注释/* */和行注释//|\n|`<leader>cA`|在当前行尾添加注释符，并进入Insert模式|\n\nnerdcommenter和Vim的Visual模式结合可以快速的注释/取消注释多行代码，同时在行尾追加注释并自动进入Insert模式可以方便的进行行内注释。\n\n关于nerdcommenter的更多信息，请在Vim中执行 `:help nerdcommenter` 。\n\n## a.vim\n\na.vim的主要功能是快速的在`*.c` / `*.cpp` 和 `*.h`之间进行转换，如果你正在用C/C++进行开发或者正在阅读C/C++项目的话，那么你可能会需要用到a.vim的。\n\na.vim的基本操作：\n\n|key|Description|\n|:-|:-|\n|`:A`|头文件／源文件切换|\n|`:AN`|在多个匹配文件间循环切换|\n|`<Leader>ih`|切换至光标所在文件|\n|`<Leader>is`|切换至光标所在处(单词所指)文件的配对文件(如光标所在处为foo.h，则切换至foo.c/foo.cpp...)|\n|`<Leader>ihn`|在多个匹配文件间循环切换|\n\n关于a.vim的更多信息请参考a.vim插件目录下的README文件。\n\n## OmniCppComplete\n\n老牌的C/C++自动补全插件了，目前似乎存在更好的自动补全插件，例如 `YouCompleteMe` 和 `Neocomplete`。这里就不再对OmniCppComplete进行叙述了。\n\n---\n\n# Vim及插件集的备份\n\n经过了上面这么多道复杂的工序后，我们现在手里的Vim似乎更加完善了。在讲解的最后部分，让我们来聊聊如何对Vim的环境来进行备份。\n\n目前我们对Vim的配置主要涉及vimrc文件和插件集，对于有多台电脑或者经常四处跑的同学来说，肯定能理解同步环境的意义，如果能将我们在本地配置好的Vim环境都保存在某个服务器上，那么不管在哪里，用哪台电脑，只要能联网，我们就可以通过网络迅速的恢复/搭建好我们的Vim环境。这里不得不称赞一下github，实在是广大程序员的福音，即便不是程序员，合理的使用github也能省去不少麻烦。利用git，我们可以在github服务器上建立一个项目，专门用来存放我们的Vim配置文件以及插件，然后将本地配置好的Vim环境全都发送至服务器端，等需要的时候，直接从服务器端取回即可，不需要再进行额外的配置，可以说是非常的方便。我们接下来讲讲具体的步骤。\n\n## 建立Github帐号\n\n如何申请github账号，这里就不说了。\n\n## 新建Github项目\n\n在你的github账号上新建一个项目\n\n![新建github项目](/img/vim2/github_create_repo.png)\n\n这里，不要勾选 `Initialize this repository with a README` 。点击 `create repository` 来创建一个属于你的项目。这一步的目的是在github服务器上建立用于存放Vim配置及插件的仓库，以便之后可以将本地上的文件提交到这个仓库中保存。\n\n## 操作本地仓库\n\n在本地 `～/.vim/` 目录进行git操作\n\n`$ cd ~/.vim` 移动到 `~/.vim/` 文件夹下，我们的Vim插件都在这个文件夹下，因此我们要将这个目录作为git操作的根目录，之后才能将这个目录的内容提交到服务器上。\n\nVim环境除了插件外，还有 `～/.vimrc` 文件，因为我们备份的目录是 `~/.vim/` 并不包含 `～/.vimrc` 文件，因此我们 `$ mv ~/.vimrc ~/.vim/` 将 `.vimrc` 移动到 `~/.vim/` 目录下，同时 `ln -sf ～/.vim/.vimrc ~/.vimrc` 在家目录下创建一个符号链接。\n\n接下来是本地的git操作：\n\n对于第一次使用git的同学而言，你需要告知git工具你的用户名和邮箱信息，以便在你执行git操作的时候可以知道是谁作出的改动。\n```\n$ git config --global user.name \"你的名字\" \n$ git config --global user.email \"你的邮箱\"\n```\n在～/.vim/文件夹下初始化git项目信息。\n```\n$ git init\n```\n\n将～/.vim/文件夹的内容和隐藏文件.vimrc全都加入git的追踪列表里\n```\n$ git add * .vimrc \n```\n(git add . 是常用的添加命令, 但是不包括隐藏文件, 这也是为什么单独添加.vimrc的原因)。\n\n提交追踪列表里的文件，同时给出本次提交操作的相关信息。\n```\n$ git commit -m 'first commit for my vim evironment' \n```\n这样我们 `～/.vim/` 文件夹下的全部内容就全都提交到本地的git仓库中了。接下来要做的就是将本地的git仓库发送(push)到远端的github服务器的对应项目上。\n\n## 同步本地仓库至远端仓库\n\n接下来是将本地仓库push到github上的操作：\n\npush操作实际上是将已经提交给git的本地仓库发送到远端服务器上，这里我们将上面提交好的 `～/.vim/`目录提交到特定账号上的特定项目中。这个过程需要对你的github账户上的项目进行写操作，显然只有用户自身才有权限对其账号下的项目执行写操作，因此在提交之前，需要完成github对应用户的验证过程。\n\ngithub采用SSH的验证方式，即用户需要在本地电脑上生成一对SSH密钥，将公钥保存在github上，自己本地电脑上保留私钥，在连接github时进行私钥和公钥的验证，匹配则被认定为用户登陆成功(关于SSH的连接原理，请参见[SSH连接认证原理概述]()。所以，第一次向github提交项目的同学，需要执行：\n\n`$ ssh-keygen` 一路回车，这条命令会在 `~/.ssh/` 目录下产生私钥文件 `id_rsa` 以及公钥文件 `id_rsa.pub`，我们需要将公钥文件`id_rsa`中的内容填入到github账户下的SSH key中。\n\n在github.com上点击 `账户设定 -- SSH-Keys -- add SSH key`\n![](/img/vim2/add_sshkey_for_github.png)\n\n可以看到我已经上传了一个公钥(Public Key)了，在这里，你需要给公钥一个名字，便于区别，同时在Title下方的Key文本框内，将 `~/.ssh/` 目录下的 `id_rsa.pub` 文件中的内容粘贴进来(复制粘贴的时候注意格式，公钥不包含回车换行的，同时不要在末尾留有空格)。点击Add key，就可以成功添加公钥了。这样，就完成了github账户和本地电脑的SSH密钥配对。\n\n`$ ssh -T git@github.com` 在终端对github来进行连接，这里的用户名为git，是所有github用户统一的用户名。如果连接成功，终端会返回 `Hi 你的用户名! You've successfully authenticated, but GitHub does not provide shell access.` 。\n\n`$ cd ~/.vim/` 再次回到 `~/.vim/` 目录，接下来将本地的git仓库推送到github的对应项目上：\n```\n$ git remote add origin git@github.com:你的用户名/你的项目名.git\n$ git push origin master\n```\n现在，到github上看看，`.vim`文件夹下的内容是不是都出现在上面了: - )\n\n自此，备份过程结束。如果想要恢复备份的话，只需要 `$ git clone https://github.com/你的用户名/你的vim项目.git` 将github上的vim项目拷贝至本地, 之后再 `mv 你的vim项目名 ~/.vim` 即可。如果你又给你的Vim做了修改或者添加了新的插件的话，那么只要重新执行上述过程中的git add、git commit、git push操作即可。\n\n对于git的基本操作，可以参见这个[视频](http://happycasts.net/episodes/7?autoplay=true)。\n\n---\n\n# 总结\n\nVim真的是一款非常强大的文本编辑工具，搭配上适当的插件之后更是如虎添翼，但是过多的插件又会让Vim变得非常的臃肿，甚至反应速度会变慢，而且也违背Unix的KISS(keep it simple, stupid)原则。在网上也有部分人认为不应该使用Vim插件，避免对插件过渡依赖。就我个人而言，我需要的只是一个高效的工具，来帮我完成特定的任务，至于这个工具是复杂，是简单，是不是需要恪守一些原则我不是很在意，我真正关心的是这个工具能否高效的完成我的任务。正如白猫黑猫的道理一样。因此，对于Vim，我一直本着让Vim来适应我的习惯和需求而非让我去适应Vim的想法来使用它的，如果不添加任何插件，那我想在很多时候Vim就不是那么的好用，如果添加了许多的插件，那么Vim的响应速度会很慢而且其中大部分插件只是会偶尔的用到或根本不用。这是一个trade-off的过程，总之自己用的顺手，用的舒坦才是最重要的。\n\n这篇文章亦是我心血来潮之作，介绍Vim及其插件的文章可谓成千上万，而且Vim本身以及绝大部分的插件都正在不断的发展和完善中，可能现在流行的插件，过不了多久就被另外一个新兴的插件给替代了，同样的，现在写的关于Vim插件的相关文章也会因为时间的流逝而慢慢过时而变得没有意义。即便如此，我依然还是很开心的把这一大篇的文章给写完了，为何如此？只是最近使用Vim开代码，添加新的插件的时候，回想起自己当初刚接触Vim时茫然无措的情景，而上网找到的资料要不是早就过时的，要不就是存在错误或者轻描淡写草草带过的，只有极少数负责任的博主的几篇优秀的博文真正帮到了我。而我所能做的，也只是将我目前所知道，尽可能认真的阐述出来，或许能帮到一些人。学习、记录、分享，不亦乐乎。","source":"_posts/vim2.md","raw":"title: \"Vim(2) -- Vim插件介绍及配置\"\ndate: 2014-05-16 11:16:53\ntags: [vim]\n---\n\n单独的Vim本身在文本编辑方面已经足够强大，但是针对一些特殊的场合还有很多可以提高和改进的空间，这也是插件的意义所在。你用Vim写脚本吗？你用Vim写C/C++吗？你用Vim写HTML、CSS、javascript吗？你用Vim写Ruby吗？你用Vim看项目代码吗......那么各式各样的Vim插件总有一款或几款可以满足你的需求。<!-- more -->\n\n# 前言\n\n掌握Vim确实没有什么捷径，如果非要说有的话，那便是唯手熟而。当你渐渐习惯用hjkl来移动光标，自如的在各个模式下切换，会用一些基本的指令，心里还不那么排斥Vim的话，那么我想接下来要做的就是在实际使用过程中进一步打磨你的Vim，让Vim真正融入到你的生活工作中去了。\n\n单独的Vim本身在文本编辑方面已经足够强大，但是针对一些特殊的场合还有很多可以提高和改进的空间，这也是插件的意义所在。你用Vim写脚本吗？你用Vim写C/C++吗？你用Vim写HTML、CSS、javascript吗？你用Vim写Ruby吗？你用Vim看项目代码吗......那么各式各样的Vim插件总有一款或几款可以满足你的需求。由于插件不属于“标准的”Vim集合，且每个人的工作内容不同因此不同人拥有不同的插件集也是很正常的事情，也正因此，网络上才会有花样繁多的Vim配置方案，多到让人眼花缭乱却无从下手。\n\n本人的主要工作环境是Linux Mint，采用C/C++进行开发附带python和一些shell脚本，这里以本人的Vim插件配置举例，讲解在配置Vim插件过程中的一般性和部分具体性方法。首先上张图来看看吧～\n![My Vim](/img/vim2/Screenshot_for_my_vim.png)\n\n相比于原始的Vim，安装了插件后的Vim界面显得非常的丰(hua)富(shao)，这些插件中有一部分是可以显示在窗口上的，一部分则是在使用过程中才能感受到的。从上图中可以看到，整个Vim窗口被划分成了两列，左边为侧边栏，包含文件浏览器以及下方的程序符号列表，在符号列表很清晰的划分了宏定义，变量和函数等信息。窗口的上方还将使用中的buffer显示出来(默认情况下buffer是隐藏的)。右侧则为主要的编辑区，编辑区下方的为酷炫的状态栏～\n\n**Vim Buffer简介**\n\n所谓的buffer，实际上是Vim用于保存工作中的文件信息的，每个打开的文件都对应一个buffer，对文件的操作会保存在buffer中，当关闭文件的时候，根据用户的选择，可以将buffer中的修改内容写入硬盘，或是丢弃buffer中的修改内容。其实文件buffer的概念随处可见，最经常看到的就是你打开文本文档或者Word并输入一些内容后，在没有保存的情况下就关闭程序，会出现是否保存或者放弃保存直接退出的提示，而这些修改的内容就是暂存在buffer中的。只是在windows下，文本文档和word的文件缓存是看不到的(word会定时将缓存写入隐藏的临时文件来保存进度防止意外断电)，而对于Vim，我们则称文件缓存为Buffer。\n\n从上图中的buffer显示条中可以看到，Vim一共打开了4个文件，即有4个对应的buffer，每个buffer有自己的编号(这个编号是Vim定的，保证唯一，但是可能不是顺序的)。\n\n---\n\n# 插件概览\n\n本人安装的Vim插件包括以下几个：\n\n|Plugin|Description|\n|:-|:-|\n|[vundle](https://github.com/gmarik/Vundle.vim)| 一款用于管理插件的插件，操作简单方便，是主流的管理插件。|\n|[ctrlp](https://github.com/kien/ctrlp.vim)| 一款非常好用的模糊查找文件插件。|\n|[vim-airline](https://github.com/bling/vim-airline)| B格很高的一个状态栏增强插件，同时带有buffer显示条(tabline)，并集成了多款主流插件。|\n|[vim-Bbye](https://github.com/moll/vim-bbye)| 解决了当关闭当前buffer时导致的窗口关闭以及布局混乱等问题。|\n|[nerdcommenter](https://github.com/scrooloose/nerdcommenter)| 快速注释工具，同时根据文件类型自动选择对应注释。|\n|[nerdtree](https://github.com/scrooloose/nerdtree)| 一款用于浏览文件或目录的插件，效果相当于嵌入Vim内的资源管理器。|\n|[taglist](https://github.com/vim-scripts/taglist.vim)| 用于显示程序中的符号列表，并进行简单的查看插件。|\n|[winmanager](https://github.com/vim-scripts/winmanager)| Vim窗口管理插件，主要用于将nerdtree和taglist整齐的安放在一个“侧边栏”中。|\n|[a.vim](https://github.com/vim-scripts/a.vim)| 用于快速的在*.c/*.cpp和*.h文件之间进行切换。|\n|[OmniCppComplete](https://github.com/vim-scripts/OmniCppComplete)| 老牌C/C++自动补全插件，不过似乎存在更好的插件，未研究。|\n \n---\n\n# 插件安装\n\n插件的安装方式大致上分为两种：传统的安装方式和基于包管理的插件安装方式。\n\n## 传统的安装方式(不推荐)\n\n我们先来介绍一下传统的安装方式是什么样的。插件实际上是由vim脚本和少数其它类型的文件组成，插件一般位于用户家目录的 `.vim` 文件夹下，即 `～/.vim/` (如果没有，请自行创建)。\n\n安装的流程：\n\n1. 从[www.vim.org/scripts/](http://www.vim.org/scripts/)或者[github.com](https://github.com/)上找到对应的插件并下载。\n2. 解压下载得到的插件压缩包，得到若干个文件及文件夹。\n3. 将解压得到的文件或文件夹放到～/.vim/ 文件夹下，如果遇到和之前插件同名的文件夹，则选择合并。\n4. 重启Vim,插件生效。\n\n总结一下传统的安装方法，实际上就是找到`插件--下载--解压--放到.vim文件夹下--完成`。(不过，对于某些特定的插件，可能有不同的安装方式，有的直接提供了可执行的安装脚本，有的则要求需要一些库的支持或者需要进行一定的配置后才能使用。好在这些都是少数情况，大部分的插件的安装都是相当简单的。)\n\n**注意：我们并不提倡用传统的方式安装插件**\n\n传统的插件安装方式存在一些弊端。首先，所有插件不加区分和归类的直接丢到 `～/.vim/` 文件夹下，非常混乱；其次，插件的管理不方便，比如要想删除一个插件，那么必须要到 `～/.vim/` 文件夹下找到插件对应的文件一一删除，如果想要更新插件，那么就必须重新下载新版本的插件再次安装。\n\n让我们举个例子直观感受下传统的插件安装方式：以下是`nerdtree`和`ctrlp`插件解压得到的文件和文件夹。\n```\nnerdtree\n|--autoload/\n|--doc/\n|--lib/\n|--nerdtree_plugin/\n|--plugin/\n|--syntax/\n|--README.markdown\n```\n\n```\nctrlp\n|--autoload/\n|--doc/\n|--plugin/\n|--readme.md\n[/ezcol_1half_end]\n```\n\n当安装这两个插件时候，二者都放到了 `～/.vim/` 文件夹下，其中 `autoload`，`doc`，`plugin` 目录整合到了一起。当要删除 `ctrlp` 插件的时候，需要到删除 `ctrlp` 对应的文件，就要到 `autoload`，`doc`，`plugin` 目录中一个个找属于 `ctrlp` 插件的文件进行删除，可想而知是多么的麻烦。同时无法自动更新插件，需要通过下载覆盖来进行手动更新。\n\n仔细观察不难看出，传统的插件安装方式的弊端主要源自于其混乱的插件管理方式。那么很自然的，人们就会希望能够将插件各自分开来进行存放，同时尽量避免手动的管理插件。这也是为什么后来会出现多款优秀的基于包(bundle)的插件管理工具的原因。\n\n \n\n## 插件管理工具--Vundle\n\n出于传统Vim插件安装及管理方式的弊端，目前有许多插件管理工具，pathogen、NeoBundle、Vundle、VAM等。pathogen我用过，之后转投Vundle了，至于NeoBundle和VAM没有用过，就不发言了，功能应该大致一样。这里选用目前最主流的Vundle来进行讲解。\n\nVundle本身也是一个Vim插件，主要干了两件事情：\n\n1.将不同插件放置到 `～/.vim/` 下的对应文件夹进行分别管理。\n2.集成了git操作，自动安装更新或卸载插件。\n\n### Vundle的优点\n- 其中插件存放在 `～/.vim/bundle/` 目录下，例如`nerdtree`存放在 `～/.vim/bundle/nerdtree/` 目录下，`taglist` 存放在 `～/.vim/bundle/taglist/` 目录下，这样各个插件的目录就非常的清晰明了。\n\n- 对于安装更新卸载插件，只需要在vimrc文件中写入要安装的插件，通过对应的Vim命令即可自动从github或vim.org上自动获取或更新该插件，要卸载时只需将vimrc文件中对应的插件名删除，再运行对应命令即可自动删除插件。\n\n*注：可能有同学git和github比较陌生，git是一个一个分布式的版本控制工具，简单点说就是可以随时把代码放进数据库并加以管理，同时可以随时提取出某个时候放进数据库的代码的一个代码管理工具，除了本地数据库，git还可以从远程服务器上获取或提交代码，而github.com就是一个提供这种代码托管服务的网站，上面存放着成千上万的代码库。基本上我们知道的vim插件源码在github上都能找到，而Vundle的插件安装更新操作就是采用git从github上把对应插件拖到你本地的电脑上，因此Vundle需要git的支持，也就是说你的电脑上需要事先安装有git，现在主流的Linux发行版都是默认安装有git的。如果对git和github比较感兴趣的同学，可以看看[Pro Git](http://git-scm.com/book/zh/v1) 和[GotGitHub](http://www.worldhello.net/gotgithub/)。*\n\n### 安装配置Vundle\n\n关于Vundle的最新信息以及安装方法具体请参见Vundle的github主页：[github.com/gmarik/Vundle.vim](https://github.com/gmarik/Vundle.vim) 。以下对Vundle的安装过程新进适当的描述。\n\n1. 安装Vundle前，我们需要一个干净的 `～/.vim/` 目录。如果你之前采用传统的插件安装方式将插件安装在 `～/.vim/` 目录下，那么你可以备份原先的 `~/.vim/` 目录：`$ mv ~/.vim ~/.vim.bak` 。然后在新建一个空的`.vim`目录：`mkdir ～/.vim` ，这样我们就得到了一个空的 `～/.vim/` 目录，便于之后的Vundle安装。\n\n2. 通过git下载并安装Vundle(实际上就是通过git工具将最新的Vundle下载到对应的目录下)：\n```\n$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n```\n\n3. 接下来，对Vundle进行配置。Vundle的配置过程是在vimrc文件中添加相应的语句。以下是插件官方给出的示例：\n```\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'gmarik/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\nPlugin 'L9'\n\" Git plugin not hosted on GitHub\nPlugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\nPlugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\nPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Avoid a name conflict with L9\nPlugin 'user/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList          - list configured plugins\n\" :PluginInstall(!)    - install (update) plugins\n\" :PluginSearch(!) foo - search (or refresh cache first) for foo\n\" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\n```\n对于Vundle的配置语句，其实没多少，上面这么长的一段只是详细的讲解了Vundle是如何配置和使用的。这里我们需要修改的就只是`call vundle#begin()` 和 `call vundle#end()` 之间的部分，我们需要在这里添加我们需要的插件信息，以便Vundle可以根据这些信息为我们自动安装插件。Vundle支持4种插件搜索添加方式，分别为托管在github上的插件、存放在vim-scripts.org上的插件、未托管在github上但是可以通过git协议访问到的插件、本地(正在开发的)插件。由于我们需要的插件要不是托管在github上，要不就是在github上有镜像，简单点说就是在github上都能找得到，因此我们只要在vimrc文件中给出github上插件的对应信息就可以了，具体格式为`Plugin '开发者用户名/项目名字'` 例如，我想安装vim-airline插件，那可以在github.com上搜索vim-airline项目，可以找到项目主页的链接为：https://github.com/bling/vim-airline ，则我只需要在vimrc的对应行中写入`Plugin 'bling/vim-airline'` 。\n\n明白了Vundle配置的具体方法，让我们打开 `～/.vimrc` 文件，在 `.vimrc` 文件的顶部(也可以是任意位置)，添加如下语句：\n```\n\" Vundle设置\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'gmarik/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'scrooloose/nerdtree'\nPlugin 'scrooloose/nerdcommenter'\nPlugin 'vim-scripts/taglist.vim'\nPlugin 'bling/vim-airline'\nPlugin 'vim-scripts/winmanager'\nPlugin 'vim-scripts/a.vim'\nPlugin 'kien/ctrlp.vim'\nPlugin 'vim-scripts/OmniCppComplete'\nPlugin 'moll/vim-bbye'\n\" plugin from http://vim-scripts.org/vim/scripts.html\n\" Plugin 'L9'\n\" Git plugin not hosted on GitHub\n\" Plugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\n\" Plugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\n\" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Avoid a name conflict with L9\n\" Plugin 'user/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n```\n这样，Vundle就知道了我们所需要的全部插件。\n\n 安装或更新插件。打开vim，输入`:PluginInstall`  即可将vimrc中配置的插件下载安装，如果之前已经安装过，则进行更新。或者直接在终端输入 `vim +PluginInstall +qall` 效果也相同。是不是很方便～如果想卸载插件，只要将vimrc中插件对应的行删除，然后打开vim，输入 `:PluginClean` 即可。\n 注：在安装或更新过程中Vundle需要从github上下载数据，因此Vim界面无法进行正常操作，但下方的状态栏会显示正在处理，所以只需耐心等待即可。\n\n至此，插件就已经安装完成了。接下来还需要对每个插件进行单独的配置。\n\n注：就插件管理而言，Vundle已经做的足够优秀，但是事情往往可以变得更好。尽管可能遇到的机会不多，但是试想一下，如果你新买了一台电脑，或是电脑硬盘故障导致数据丢失了又或者你在操作一台不常用的电脑，是不是每次都要安装Vundle，更要命的是每次都要修改vimrc文件，要知道vimrc文件里面出了基本的vim设置外还有相当大一部分的插件设置，对Vim环境进行恢复的代价还是略大了点。因此，我们总希望我们的Vim配置能够保存在云端，以便我们随时可以通过一条简单的命令就可以把一切恢复到熟悉的模样。要想完成这点，需要在配置完Vim和插件后，将 `./.vim/` 目录以及 `./.vimrc` 文件都托管到自己github的上，具体方法在接下来的文章会讲到，现在，让我们先专注于把插件配置好: - )\n\n---\n\n# 插件配置及使用\n\n在使用插件的过程中，往往会涉及到很多插件的具体命令，而这些命令往往比较长，并且夹杂着大小写，输入起来比较繁琐，因此往往使用键位绑定和映射来解决这个问题，简单点说就是设置快捷键。而Vim中的操作相当的多，不用说单个的按键了，即便是像 `ctrl+××`，`alt+××` 或是 `ctrl+shift+××` 这样的组合键都有对应的操作，因此我们会经常看到vimrc文件中采用 `<leader>`键和其它按键配合进行键盘映射。vimrc文件中的 `<leader>`实际上也是一个按键，默认为回车键上方的`\\`键，可以根据用户需要修改。本人就将 `<leader>` 设置成了逗号`,`。修改 `<leader>`键只需要在vimrc文件中添加：\n```\n\" leader键\nlet mapleader=\",\"\nlet g:mapleader=\",\"\n```\n注：插件的具体配置信息一般都是记录在vimrc文件中，以下介绍插件的配置语句全是添加在 `～/.vimrc` 文件中的。\n\n## nerdtree\n\n在 `~/.vimrc` 文件中添加以下内容：\n```\n\" nerdtree设置\n\" 控制当光标移动超过一定距离时，是否自动将焦点调整到屏中心\nlet NERDTreeAutoCenter=1\n\" 指定鼠标模式（1.双击打开；2.单目录双文件；3.单击打开）\n\" let NERDTreeMouseMode=2\n\" 是否默认显示书签列表\n\" let NERDTreeShowBookmarks=1\n\" 是否默认显示文件\nlet NERDTreeShowFiles=1\n\" 是否默认显示隐藏文件\n\" let NERDTreeShowHidden=1\n\" 是否默认显示行号\n\" let NERDTreeShowLineNumbers=1\n\" 窗口位置（'left' or 'right'）\n\" let NERDTreeWinPos='left'\n\" 窗口宽\nlet NERDTreeWinSize=31\n```\n上面只添加了一些常用的设置，更具体的设置请在vim中输入 `:help nerdtree` 查看。\n\nnerdtree基本操作\n\n|key|Description|\n|:-|:-|\n|`o`|在已有窗口中打开文件、目录或书签，并跳到该窗口|\n|`go`|在已有窗口 中打开文件、目录或书签，但不跳到该窗口|\n|`x`|合拢选中结点的父目录|\n|`J` (大写)|跳到当前目录下同级的最后一个结点|\n|`I` (大写)|切换是否显示隐藏文件|\n|`m`|显示系统菜单|\n|`C` (大写)|设置当前目录为root|\n|`u`|返回到当前root的上级父目录并设置为root|\n|`q`|关闭NerdTree窗口|\n\n## taglist\n\ntaglist是一个用于显示定位程序中各种符号的插件，例如宏定义、变量名、结构名、函数名这些东西我们将其称之为符号(symbols)，而在taglist中将其称之为tag。显然，要想将程序文件中的tag显示出来，需要事先了解全部tag的信息，并将其保存在一个文件中，然后去解析对应的tag文件。taglist做的仅仅是将tag文件中的内容解析完后显示在Vim上而已。tag扫描以及数据文件的生成则是由[ctags(Exuberant Ctags)](http://ctags.sourceforge.net/)这一工具完成的，所以在使用taglist之前，你的电脑需要装有ctags(Vim默认已安装)。\n\ntaglist的设置：\n```\n\" taglist设置\nlet Tlist_Show_One_File=1 \" 0为同时显示多个文件函数列表,1则只显示当前文件函数列表\nlet Tlist_Auto_Update=1\nlet Tlist_File_Fold_Auto_Close=1 \" 非当前文件，函数列表折叠隐藏\nlet Tlist_Exit_OnlyWindow=1 \"如果taglist是最后一个窗口，则退出vim \nlet Tlist_Auto_Update=1            \"Automatically update the taglist to include newly edited files.\n\"把taglist窗口放在屏幕的右侧，缺省在左侧\n\"let Tlist_Use_Right_Window=1 \n\"显示taglist菜单\n\"let Tlist_Show_Menu=1\n\"启动vim自动打开taglist\n\"let Tlist_Auto_Open=1\n\" ctags, 指定tags文件的位置,让vim自动在当前或者上层文件夹中寻找tags文件\nset tags=tags\n\" 添加系统调用路径\nset tags+=/usr/include/tags\n\"键绑定，刷新tags\nnmap tg :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR>:set tags+=./tags<CR>\n```\n\n我们已经稍微解释了下taglist和ctags的关系，在真正使用过程中，需要在项目文件夹下面运行命令 `ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR>:set tags+=./tags<CR>` ，这个命令的主要任务是对当前目录下的全部文件递归扫描，然后生成一个“tags”文件，里面记录整个项目的全部符号信息，同时将当前目录下的这个tags文件告知taglist，taglist根据这个tags文件显示项目的tag。(对于ctags命令中的各个开关，可以通过man ctags查看具体作用，此处不再赘述)\n\n接下来，稍微解释下部分配置内容：\n`set tags=tags` 表示tags文件所在位置，此处设定为当前目录下查找tags文件，当然，你也可以添加其它路径下的tags文件。`set tags+=/usr/include/tags` 就将系统调用的tags文件也包含进来了，这样如果程序中包含系统的一些调用，那么也能被正确解析。此外，我们还将生成tags的ctags命令进行了键盘映射：`nmap tg :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR>:set tags+=./tags<CR>`  ，这样就可以直接在Vim的Normal模式下输入`tg`直接在当前工作目录下产生tags文件而不用先在终端运行ctags命令后在到Vim显示了。同时还需要注意的一点是，一旦程序代码发生改动，则相应的“tag”也会发生变化，这时需要重新利用ctags命令生成tags文件，这个对于我们设置完键位映射后显得比较简单，再输入`tg`即可。\n\ntaglist的基本操作：\n\n|key|Description|\n|:-|:-|\n|`ctrl+]`|查找当前光标所在处tag的定义|\n|`ctrl+t`|返回到之前执行查找tag时的位置|\n|`o`|在一个新打开的窗口中显示光标下tag|\n|`Space`|显示光标下tag的原型定义|\n|`x`|taglist窗口放大和缩小，方便查看较长的tag|\n|`q`|关闭taglist窗口|\n\n关于taglists的具体配置以及使用，请在Vim下输入`:help taglist `查看。同时，这里推荐一个关于ctags介绍的[视频](http://happycasts.net/episodes/25?autoplay=true)。\n\n**cscope**\n\n说到ctags，就不得不提下cscope。ctags最大的优点在于通过 `ctrl+]`就可以快速定位到程序符号所在的位置进行查看，之后再通过 `ctrl+t` 或者 `ctrl+o` 返回之前的位置，用两组按键来总结ctags，那就是 `ctrl+]` 和 `ctrl+t` 。ctags虽然已经相当不错了，但是仍然无法解决一些问题，例如查看函数被哪些函数调用，函数调用了哪些函数，查找该头文件被哪些文件包含等等，而解决这些问题，就需要用到cscope了。cscope不是Vim插件，而是一个工具，因此需要在终端进行安装。cscope的原理其实和ctags一样，也需要事先扫描项目目录，生成相关信息文件，方便之后查找的时候使用，cscope生成的数据文件为 `cscope.out` 和 `cscope.in.out`。\n\ncscope设置：\n\n```\n\" Cscope 设置\nif has(\"cscope\")\n    set csprg=/usr/bin/cscope   \"指定用来执行cscope的命令\n    set csto=0                  \" 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库\"\n    set cst                     \" 同时搜索cscope数据库和标签文件\"\n    set cscopequickfix=s-,c-,d-,i-,t-,e-    \" 使用QuickFix窗口来显示cscope查找结果\"\n    set nocsverb\n    if filereadable(\"cscope.out\")    \" 若当前目录下存在cscope数据库，添加该数据库到vim\n        cs add cscope.out\n    elseif $CSCOPE_DB != \"\"            \" 否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim\n        cs add $CSCOPE_DB\n    endif\n    set csverb\nendif\nmap <F4>:!cscope -Rbq<CR>:cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>\n\"对:cs find c等Cscope查找命令进行映射\nnmap <leader>s :cs find s <C-R>=expand(\"<cword>\")<CR><CR> :copen<CR><CR>\nnmap <leader>g :cs find g <C-R>=expand(\"<cword>\")<CR><CR>\nnmap <leader>d :cs find d <C-R>=expand(\"<cword>\")<CR><CR> :copen<CR><CR>\nnmap <leader>c :cs find c <C-R>=expand(\"<cword>\")<CR><CR>:copen<CR><CR>\nnmap <leader>t :cs find t <C-R>=expand(\"<cword>\")<CR><CR>:copen<CR><CR>\nnmap <leader>e :cs find e <C-R>=expand(\"<cword>\")<CR><CR>:copen<CR><CR>\nnmap <leader>f :cs find f <C-R>=expand(\"<cfile>\")<CR><CR>\nnmap <leader>i :cs find i <C-R>=expand(\"<cfile>\")<CR><CR> :copen<CR><CR>\n\" 设定是否使用 quickfix 窗口来显示 cscope 结果\nset cscopequickfix=s-,c-,d-,i-,t-,e-\n```\n\ncscope生成数据文件的命令为：`cscope -Rbq` ，`-R` 表示在生成索引文件时，搜索子目录树中的代码；`-b` 表示只生成索引文件，不进入cscope的界面；`-q` 表示生成 `cscope.in.out` 和 `cscope.po.out` 文件，加快cscope的索引速度。我们的配置文件将`<F4>`键映射成了cscope命令，同时将生成的cscope.out文件加入到当前索引文件中。(由于cscope和ctags往往配合一同使用，而且都需要事先生成数据文件，所以本人直接将ctags和cscope生成数据文件的操作组合起来，绑定到了一组组合键上：`nmap tg :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR> :set tags+=./tags<CR>:!cscope -Rbq<CR>:cs add ./cscope.out .<CR>` ，键位绑定这东西，仁者见仁，智者见智，根据自己的喜好来。)\n\ncscope基本操作：\n\n|key|Description|\n|:-|:-|\n|`:cs find s`|查找这个C符号|\n|`:cs find g`|查找这个定义|\n|`:cs find d`|查找被这个函数调用的函数（们）|\n|`:cs find c`|查找调用这个函数的函数（们）|\n|`:cs find t`|查找这个字符串|\n|`:cs find e`|查找这个egrep匹配模式|\n|`:cs find f`|查找这个文件|\n|`:cs find i`|查找#include这个文件的文件（们）|\n\nfind可以简写为f, 所以命令可以写成`:cs f s symbol_name`\n\n参考上面cscope的配置语句，我们将 `:cs find` 操作映射成了 `<leader>` ，这样方便很多。`nmap <leader>s :cs find s <C-R>=expand(\"<cword>\")<CR><CR> :copen<CR><CR>` ，这里我们主要关注下这条语句后面的内容，其中 `<C-R>=expand(\"<cword>\")` 代表当前光标所在地方的单词，而 `:copen` 则是打开Vim中内置的一个称之为 `quickfix` 的窗口用于显示查找的结果。\n\n对我而言，我看代码时最常用的就是 `ctrl+]` ，`ctrl+o` 和 `:cs find c` 了。\n\n关于cscope的详细信息，请在终端运行 `man cscope` 。\n\n## winmanager\n\n我们上面介绍了用于文件浏览的nerdtree以及浏览程序符号的taglist，这两个插件都会以窗口的形式出现在Vim的窗口中，那么如何合理的安排它们，这就是winmanager的作用。\n\n这里，我们利用winmanager将nerdtree和taglist放到同一个\"侧边栏\"中，nerdtree在上方，taglist在下方，效果如下图所示：\n\n![](/img/vim2/winmanager_with_nerdtree_and_taglist.png)\n\nwinmanager设置：\n```\n\" WinManager设置\n\" NERD_Tree集成到WinManager\nlet g:NERDTree_title=\"[NERDTree]\" \nfunction! NERDTree_Start()\n    exec 'NERDTree'\nendfunction\n\nfunction! NERDTree_IsValid()\n    return 1\nendfunction\n\n\" 键盘映射，同时加入防止因winmanager和nerdtree冲突而导致空白页的语句\nnmap wm :if IsWinManagerVisible() <BAR> WMToggle<CR> <BAR> else <BAR> WMToggle<CR>:q<CR> endif <CR><CR>\n\" 设置winmanager的宽度，默认为25\nlet g:winManagerWidth=30 \n\" 窗口布局\nlet g:winManagerWindowLayout='NERDTree|TagList'\n\" 如果所有编辑文件都关闭了，退出vim\nlet g:persistentBehaviour=0\n```\n这里唯一要说的就是我将wm映射成了winmanager的开关，这意味着，在Vim的Normal模式下，我输入`wm`即可打开“侧边栏”，再次输入`wm`即可关闭“侧边栏”。\n\n## vim-airline\n\n接下来介绍一下个人非常喜欢的一个插件vim-airline。这是一款状态栏增强插件，可以让你的Vim状态栏非常的美观，同时包括了buffer显示条扩展smart tab line以及集成了一些插件。vim-airline-demo\n\n![airline展示](/img/vim2/vim-airline-demo.gif)\n\n(关于状态栏增强插件，你可能还听说过Powerline，airline是受Powerline的启发而开发的。和airline不同的是，Powerline不是纯粹的Vim脚本编写的，需要python的支持，同时airline的代码远少于powerline，这意味着airline更轻更快。)\n\n### vim-airline字体补丁\n\n虽然我们在本文的上半部分中讲解了通过Vundle来安装插件，但是airline有点特殊，还需要进行些额外的操作才能达到最佳的显示效果。这是因为airline中的三角形箭头实际上是通过特殊的字符而非图片实现的，但是系统原先的字体库中并没有包含这类特殊的图形字符，因此，想要达到上图所示的显示效果，需要对系统字库“打补丁”，即添加特殊图形字符。具体步骤如下：\n\n1. 下载已经打过补丁的字体\n\n在家目录下新建一个.fonts文件夹：`$ mkdir ~/.fonts` 然后 `$ cd ~/.fonts` 进入文件夹，执行 `$git clone git@github.com:Lokaltog/powerline-fonts.git` 下载已经打过补丁的字体文件。此时，`~/.fonts/` 目录下已经存在打过补丁的常用系统字体文件了。\n\n2. 向系统中安装打过补丁的字体\n\n运行 `$ fc-cache -vf ~/.fonts` 安装patched fonts到系统中。\n\n3. 设置终端字体为打过补丁的字体\n\n![](/img/vim2/set_patched_font_for_terminal.png)\n\n我这里将终端字体设置成了DejaVu Sans Mono for Powerline。(打过补丁的字体名字后面都会有个for Powerline，选择自己喜欢的就好)。\n\n### vim-airline设置\n```\n\" airline设置\nset laststatus=2\n\" 使用powerline打过补丁的字体\nlet g:airline_powerline_fonts = 1\n\" 开启tabline\nlet g:airline#extensions#tabline#enabled = 1\n\" tabline中当前buffer两端的分隔字符\nlet g:airline#extensions#tabline#left_sep = ' '\n\" tabline中未激活buffer两端的分隔字符\nlet g:airline#extensions#tabline#left_alt_sep = '|'\n\" tabline中buffer显示编号\nlet g:airline#extensions#tabline#buffer_nr_show = 1\n\" 映射切换buffer的键位\nnnoremap [b :bp<CR>\nnnoremap ]b :bn<CR>\n```\n关于上述的配置文件没什么好说的，注释都解释的比较明白了。这里我只想提一下vim-airline中自带的smart tab line扩展，smart tab line效果如下\n\n![airline中的tabline展示](/img/vim2/tabline_in_airline.gif)\n\n我们都知道在Vim中可以同时操作多个文件，多文件操作主要有两个显示手段，一个是buffer方式，一个tab的方式。tab方式我想不用多说，就相当于标签页，每个标签页位于不同的Vim窗口。因此，当切换tab的时候，原先的窗口布局会发生混乱，这个是我们不愿意看到的，而buffer则是在同一个窗口下的，便不存在这个问题。实际使用过程中，我更倾向于使用buffer来管理打开的多个文件。但是Vim对于buffer，默认的是隐藏的，也就是说，你打开了A、B、C三个文件，Vim并不将这三个文件的buffer显示出来，你只能通过 `:ls` 来查看buffer，然后通过 `:bn` (buffer next)和 `:bp` (buffer previous)，或者 `:b num` (打开编号为num的buffer)这样的命令来切换不同文件。如果能把buffer显示在Vim的窗口上，那么buffer切换起来就相对比较轻松，同时也能明白自己打开的文件都有哪些。\n\n对于buffer可视化以及buffer管理的插件，比较著名的有 `Minibufexplorer` 和 `Bufexplorer`，大多数人选择使用Minibufexplorer(Bufexplorer我没用过)。Minibufexplorer整体上来说不错，但是存在一个个人认为非常致命的缺陷，那就是和winmanager的兼容性不好，表现在当打开多个buffer的时候，winmanager中的nerdtree显示部分会被压扁，无法还原，同时关闭文件buffer时，窗体的布局有时候会发生混乱。正因为这样的原因导致我最后放弃了Minibufexplorer。而airline中自带的smart tab line的主要功能是将buffer显示出来，同时当文件名太长的时候，会根据设定的模式进行适当的缩写。可能没有Minibufexplorer功能多，但是这样对我而言就已经足够了，更何况tab line还如此的美观呢 :-D\n\n因为tab line只是一个显示buffer的扩展，并不提供操作buffer的功能，所以想要操作buffer还是要通过Vim自带的命令实现，从上面的配置语句中可以看到，我将切换到前一个buffer的命令 `:bp` 映射成了 `[b` ，将切换至后一个buffer的命令 `:bn` 映射成了 `]b` (这实际上是airline作者的映射)\n\n ## vim-Bbye\n\nvim-Bbye主要是用于解决在关闭buffer时候导致的窗口混乱问题。(如果你在关闭buffer的时候没有任何问题的话，可以无视此插件= =)问题主要表现为，在Vim中，如果当前窗口里存在多个buffer，而你用 `:bd` 命令删除当前操作的buffer的话，会导致整个Vim窗口都被关闭的问题。vim-Bbye很好的解决了这个问题。\n\nvim-Bbye涉及到的主要命令就是 `:Bd`,采用这个命令关闭当前buffer不会导致整个窗口被关闭的问题。因此我将这条命令映射成了bd ，在vimrc中的配置如下：\n\n```\n\" Bbye设置\n\" 由于原生的:bd在删除当前buffer时会将整个窗口关闭，故使用Bbye的:Bd\nnnoremap bd :Bd<CR>\n```\n\n ## ctrlp\n\nctrlp是一款相当棒的插件，主要的功能是对文件进行模糊的查找，如果你的project目录结构复杂，或者你正在阅读一个较大的项目的话，那么ctrlp可以帮你快速的定位到你想要文件而不必在终端不断的cd、ls。\n\n例如想打开文件 `linux/arch/x86/mm/mmap.c` , 只需要在vim中通过 `ctrl+p` , 打开ctrlp, 输入 `laxmm` 或者 `lucxmp` (诸如此类的, 即路径中顺序出现的字符组合), ctrlp就能帮你定位到对应的 `mmap.c` 文件, 回车打开即可.\n\nctrlp在阅读大项目时特别有用, 很多时候,  我们只记得要找的文件大概在某个文件夹下, 不确定中间还有哪些文件夹, 这时ctrlp就可以极大程度的提高你定位文件的效率.\n\n这里提供一个介绍ctrlp不错的[视频](http://happycasts.net/episodes/64?autoplay=true)给大家。\n\n## nerdcommenter\n\n如果你是一个酷爱写注释的程序员的话，那么你一定要用一下nerdcommenter，即便你不热衷于写注释，你也应该关注下nerdcommenter这款插件。\n\nnerdcommenter基本操作：\n\n|key|Description|\n|:-|:-|\n|`<leader>cc`|注释当前行|\n|`<leader>c+space`|注释选定代码行|\n|`<leader>cu`|取消注释|\n|`<leader>ca`|在可选的注释方式之间切换，比如C/C++ 的块注释/* */和行注释//|\n|`<leader>cA`|在当前行尾添加注释符，并进入Insert模式|\n\nnerdcommenter和Vim的Visual模式结合可以快速的注释/取消注释多行代码，同时在行尾追加注释并自动进入Insert模式可以方便的进行行内注释。\n\n关于nerdcommenter的更多信息，请在Vim中执行 `:help nerdcommenter` 。\n\n## a.vim\n\na.vim的主要功能是快速的在`*.c` / `*.cpp` 和 `*.h`之间进行转换，如果你正在用C/C++进行开发或者正在阅读C/C++项目的话，那么你可能会需要用到a.vim的。\n\na.vim的基本操作：\n\n|key|Description|\n|:-|:-|\n|`:A`|头文件／源文件切换|\n|`:AN`|在多个匹配文件间循环切换|\n|`<Leader>ih`|切换至光标所在文件|\n|`<Leader>is`|切换至光标所在处(单词所指)文件的配对文件(如光标所在处为foo.h，则切换至foo.c/foo.cpp...)|\n|`<Leader>ihn`|在多个匹配文件间循环切换|\n\n关于a.vim的更多信息请参考a.vim插件目录下的README文件。\n\n## OmniCppComplete\n\n老牌的C/C++自动补全插件了，目前似乎存在更好的自动补全插件，例如 `YouCompleteMe` 和 `Neocomplete`。这里就不再对OmniCppComplete进行叙述了。\n\n---\n\n# Vim及插件集的备份\n\n经过了上面这么多道复杂的工序后，我们现在手里的Vim似乎更加完善了。在讲解的最后部分，让我们来聊聊如何对Vim的环境来进行备份。\n\n目前我们对Vim的配置主要涉及vimrc文件和插件集，对于有多台电脑或者经常四处跑的同学来说，肯定能理解同步环境的意义，如果能将我们在本地配置好的Vim环境都保存在某个服务器上，那么不管在哪里，用哪台电脑，只要能联网，我们就可以通过网络迅速的恢复/搭建好我们的Vim环境。这里不得不称赞一下github，实在是广大程序员的福音，即便不是程序员，合理的使用github也能省去不少麻烦。利用git，我们可以在github服务器上建立一个项目，专门用来存放我们的Vim配置文件以及插件，然后将本地配置好的Vim环境全都发送至服务器端，等需要的时候，直接从服务器端取回即可，不需要再进行额外的配置，可以说是非常的方便。我们接下来讲讲具体的步骤。\n\n## 建立Github帐号\n\n如何申请github账号，这里就不说了。\n\n## 新建Github项目\n\n在你的github账号上新建一个项目\n\n![新建github项目](/img/vim2/github_create_repo.png)\n\n这里，不要勾选 `Initialize this repository with a README` 。点击 `create repository` 来创建一个属于你的项目。这一步的目的是在github服务器上建立用于存放Vim配置及插件的仓库，以便之后可以将本地上的文件提交到这个仓库中保存。\n\n## 操作本地仓库\n\n在本地 `～/.vim/` 目录进行git操作\n\n`$ cd ~/.vim` 移动到 `~/.vim/` 文件夹下，我们的Vim插件都在这个文件夹下，因此我们要将这个目录作为git操作的根目录，之后才能将这个目录的内容提交到服务器上。\n\nVim环境除了插件外，还有 `～/.vimrc` 文件，因为我们备份的目录是 `~/.vim/` 并不包含 `～/.vimrc` 文件，因此我们 `$ mv ~/.vimrc ~/.vim/` 将 `.vimrc` 移动到 `~/.vim/` 目录下，同时 `ln -sf ～/.vim/.vimrc ~/.vimrc` 在家目录下创建一个符号链接。\n\n接下来是本地的git操作：\n\n对于第一次使用git的同学而言，你需要告知git工具你的用户名和邮箱信息，以便在你执行git操作的时候可以知道是谁作出的改动。\n```\n$ git config --global user.name \"你的名字\" \n$ git config --global user.email \"你的邮箱\"\n```\n在～/.vim/文件夹下初始化git项目信息。\n```\n$ git init\n```\n\n将～/.vim/文件夹的内容和隐藏文件.vimrc全都加入git的追踪列表里\n```\n$ git add * .vimrc \n```\n(git add . 是常用的添加命令, 但是不包括隐藏文件, 这也是为什么单独添加.vimrc的原因)。\n\n提交追踪列表里的文件，同时给出本次提交操作的相关信息。\n```\n$ git commit -m 'first commit for my vim evironment' \n```\n这样我们 `～/.vim/` 文件夹下的全部内容就全都提交到本地的git仓库中了。接下来要做的就是将本地的git仓库发送(push)到远端的github服务器的对应项目上。\n\n## 同步本地仓库至远端仓库\n\n接下来是将本地仓库push到github上的操作：\n\npush操作实际上是将已经提交给git的本地仓库发送到远端服务器上，这里我们将上面提交好的 `～/.vim/`目录提交到特定账号上的特定项目中。这个过程需要对你的github账户上的项目进行写操作，显然只有用户自身才有权限对其账号下的项目执行写操作，因此在提交之前，需要完成github对应用户的验证过程。\n\ngithub采用SSH的验证方式，即用户需要在本地电脑上生成一对SSH密钥，将公钥保存在github上，自己本地电脑上保留私钥，在连接github时进行私钥和公钥的验证，匹配则被认定为用户登陆成功(关于SSH的连接原理，请参见[SSH连接认证原理概述]()。所以，第一次向github提交项目的同学，需要执行：\n\n`$ ssh-keygen` 一路回车，这条命令会在 `~/.ssh/` 目录下产生私钥文件 `id_rsa` 以及公钥文件 `id_rsa.pub`，我们需要将公钥文件`id_rsa`中的内容填入到github账户下的SSH key中。\n\n在github.com上点击 `账户设定 -- SSH-Keys -- add SSH key`\n![](/img/vim2/add_sshkey_for_github.png)\n\n可以看到我已经上传了一个公钥(Public Key)了，在这里，你需要给公钥一个名字，便于区别，同时在Title下方的Key文本框内，将 `~/.ssh/` 目录下的 `id_rsa.pub` 文件中的内容粘贴进来(复制粘贴的时候注意格式，公钥不包含回车换行的，同时不要在末尾留有空格)。点击Add key，就可以成功添加公钥了。这样，就完成了github账户和本地电脑的SSH密钥配对。\n\n`$ ssh -T git@github.com` 在终端对github来进行连接，这里的用户名为git，是所有github用户统一的用户名。如果连接成功，终端会返回 `Hi 你的用户名! You've successfully authenticated, but GitHub does not provide shell access.` 。\n\n`$ cd ~/.vim/` 再次回到 `~/.vim/` 目录，接下来将本地的git仓库推送到github的对应项目上：\n```\n$ git remote add origin git@github.com:你的用户名/你的项目名.git\n$ git push origin master\n```\n现在，到github上看看，`.vim`文件夹下的内容是不是都出现在上面了: - )\n\n自此，备份过程结束。如果想要恢复备份的话，只需要 `$ git clone https://github.com/你的用户名/你的vim项目.git` 将github上的vim项目拷贝至本地, 之后再 `mv 你的vim项目名 ~/.vim` 即可。如果你又给你的Vim做了修改或者添加了新的插件的话，那么只要重新执行上述过程中的git add、git commit、git push操作即可。\n\n对于git的基本操作，可以参见这个[视频](http://happycasts.net/episodes/7?autoplay=true)。\n\n---\n\n# 总结\n\nVim真的是一款非常强大的文本编辑工具，搭配上适当的插件之后更是如虎添翼，但是过多的插件又会让Vim变得非常的臃肿，甚至反应速度会变慢，而且也违背Unix的KISS(keep it simple, stupid)原则。在网上也有部分人认为不应该使用Vim插件，避免对插件过渡依赖。就我个人而言，我需要的只是一个高效的工具，来帮我完成特定的任务，至于这个工具是复杂，是简单，是不是需要恪守一些原则我不是很在意，我真正关心的是这个工具能否高效的完成我的任务。正如白猫黑猫的道理一样。因此，对于Vim，我一直本着让Vim来适应我的习惯和需求而非让我去适应Vim的想法来使用它的，如果不添加任何插件，那我想在很多时候Vim就不是那么的好用，如果添加了许多的插件，那么Vim的响应速度会很慢而且其中大部分插件只是会偶尔的用到或根本不用。这是一个trade-off的过程，总之自己用的顺手，用的舒坦才是最重要的。\n\n这篇文章亦是我心血来潮之作，介绍Vim及其插件的文章可谓成千上万，而且Vim本身以及绝大部分的插件都正在不断的发展和完善中，可能现在流行的插件，过不了多久就被另外一个新兴的插件给替代了，同样的，现在写的关于Vim插件的相关文章也会因为时间的流逝而慢慢过时而变得没有意义。即便如此，我依然还是很开心的把这一大篇的文章给写完了，为何如此？只是最近使用Vim开代码，添加新的插件的时候，回想起自己当初刚接触Vim时茫然无措的情景，而上网找到的资料要不是早就过时的，要不就是存在错误或者轻描淡写草草带过的，只有极少数负责任的博主的几篇优秀的博文真正帮到了我。而我所能做的，也只是将我目前所知道，尽可能认真的阐述出来，或许能帮到一些人。学习、记录、分享，不亦乐乎。","slug":"vim2","published":1,"updated":"2015-04-08T14:27:32.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o8w0008kady0aolq9q5"},{"title":"Vim(1) -- 认识Vim","date":"2014-05-15T14:55:25.000Z","_content":"\n我想对于每一个在Linux或Mac再或Windows工作下的同学，肯定都非常的熟悉，或者至少听说过Vim。Vim博大精深，非一文可蔽之，但是我希望可以以一个简单并广阔的视角来叙述Vim，从一个使用者的角度来从头到脚地讲述我为何选择Vim，如何使用Vim以及如何用好Vim的。以此来给各位同学提供一个完整的使用Vim的视角，同时能够依照本文的介绍，了解整个配置的过程进而能配置属于自己的Vim。<!-- more -->\n\n# 作者的吐槽\n\n我想对于每一个在Linux或Mac再或Windows工作下的同学，肯定都非常的熟悉，或者至少听说过Vim。Vim是一款强大的编辑器，其最显著的一个特性就是提高了效率的同时解放了程序员双手，呃，保守点说是解放了程序员操作鼠标的手，从而一定程序上缓解了腕关节疼痛和肩周炎等不良症状。利用Vim，程序员，或者一般的电脑操作人员可以在编辑文本时脱离鼠标，只依靠键盘，且仅依靠键盘中主要区域(不包括方向键及小键盘区域)来进行快速高效的编辑。\n\n我想，我之所以在这里介绍Vim，不是因为说Vim很cool，人人都说它好，说它牛bi，用Vim的人逼格怎么怎么高，而只是单纯的因为我喜欢这款工具，喜欢这种屏幕能跟随键盘，键盘能跟随大脑的操作体验，Vim让我的注意力全都集中在文本编辑中，而不需要时不时动一下鼠标，时不时切换窗口的多余操作来影响我工作的前后一致性。\n\n我在此介绍Vim，目的很明确，是让更多的人喜欢上它，人们为什么会喜欢一件东西，就我看来原因很简单，无非是两点：1.简单 2.好用。而当我回想我初学Vim乃至现在偶尔配置Vim的过程中，我在网上找到的绝大部分资料，里面的内容虽然是在教你如何掌握用好Vim，但基本都在间接的告诉你Vim是个多么多么复杂的东西，学习使用它你要付出多么多么巨大的时间精力，而当你还没有真正感受到Vim的高效甚至都还没开始尝试使用Vim时，就已经被繁多的键位操作，复杂的.vimrc配置文件以及数不清的插件淹没了。我并不擅长讲故事，但是就我看来，一篇好的文章，看起来应该像一个完整的故事，有起因，有过渡，有主体，有结果。而我所google到的绝大部分文章，里面包含的仅仅是一堆无聊的命令参数，一些文档的翻译以及零散的铺垫，讨论问题非常的狭小和具体，往往是诸如某个插件如何使用，某个问题如何解决，如何把Vim配置成×××，又如何把Vim配置成×××之类的博文。我经常就纳闷，我连Vim的基本操作都没弄明白呢，我看“把Vim配置成×××”有什么用？我连这插件干嘛的我用不用的到都不知道，我看“×××插件使用教程”干嘛？\n\n诚然，Vim博大精深，非一文可蔽之，但是我希望可以以一个简单并广阔的视角来叙述Vim，从一个使用者的角度来从头到脚地讲述我为何选择Vim，如何使用Vim以及如何用好Vim的。以此来给各位同学提供一个完整的使用Vim的视角，同时能够依照本文的介绍，了解整个配置的过程进而能配置属于自己的Vim。\n\n# 为何选择Vim\n\n对于Vim，我见过很多人，每每提及，总是像描述巫师手中的魔杖一样形容Vim是多么多么神奇，多么多么高端，但当真正开始编辑文件时，不是用notepad就是用gedit，然后紧接着就是连串行云流水的鼠标滑动。当然，我不是说鼠标操作有什么问题，我一直认为鼠标是现代操作系统，至少是桌面操作系统中不可或缺的一部分，甚至在将来，还会有各式各样鼠标的升级替代品出现，比如触控，立体控制，脑电波控制等等。但是对于文本编辑这一块，我想鼠标的操作仅仅满足了基本的需求，效率较低而且严重影响了编辑体验。想想看，当你打开一份文本文档，想要进行修改时要采取的操作。首先，右手要拖动鼠标，移动到要修改的地方，点击，然后把右手移回到键盘，将手指和键位对应上，最后才能开始输入。这个过程看起来似乎非常的流畅，事实上也真的是很流畅，但是仔细回想下你是否遇到过在移动光标，修改文档，或是编辑代码时，你的右手是不是要频繁的离开主键位区，操作鼠标或是方向键来进行定位，然后再返回继续被中断的输入。右手就这样来来回回不停游走于主键位，方向键和鼠标之间，长此以往，程序员自然就有了一支健壮的右手(这个解释我觉得比较正能量= =)。如果你也发现里面有些不对劲的话，那我想，我们应该坐下来好好聊聊Vim。\n\n归根结底，鼠标这个东西是面向图形的，而非面向文本的，且不说GUI和CLI的纷争向来已久，单纯从编辑文本这方面来说，我觉得Vim还是略胜其它图形化编辑器一筹的，在谈论之前我们先看看几张Vim编辑时的gif图片直观感受下。\n\n![](/img/vim1/vim-indro1.gif)\n\n![](/img/vim1/vim-intro2.gif)\n\n我们可以注意到，在操作Vim的过程中，在没有鼠标介入的情况下完成了诸如光标移动，自动补齐，窗口切换，目录更改等操作。在熟悉了基本的Vim的操作之后，就能仅依靠键盘实现精准的光标定位以及增删改查等一系列文本编辑操作。当然，Vim的强大不仅限于此，Vim的优点在于其高度的可扩展性和定制性，可以说，Vim提供了一个Ecosystem，通过各式各样的插件可以让其针对不同场合进行有效的扩展。\n\n到这里，相信你已经对Vim有了个大致的直观印象，或许还有一些跃跃欲试。那么接下来，我们来看看Vim的基本操作。\n\n# Vim基本操作\n\n## Vim学习基础资料\n\n关于Vim的基本操作，在本文中并不赘述，因为随手一google一抓一大把，虽然介绍Vim基本操作的文章很多，但是其中质量低下，同质化的文章占了绝大多数，对于一个刚接触Vim的人而言，避免太早接触高级功能以及复杂插件，对非必要的知识进行有效的屏蔽，只关注Vim最核心的部分是愉快并快速了解Vim的有效途径。本文一方面不想在介绍Vim基本操作这方面重复造轮子，另一方面熟悉Vim的基本操作又是高效利用Vim的关键。因此，本文在此推荐了一些学习Vim基础的优秀资源，帮助读者快速上手体验Vim。\n\n- [简明Vim练级攻略](http://coolshell.cn/articles/5426.html)               如果你想只花30分钟来学(ai)习(shang)Vim的话，那么你应该看这篇文章。\n- [Learn Vim Progressively](http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/) 《简明Vim练级攻略》是翻译自这篇文章的，其它的就没必要多说了:-P\n- [vim adventures](http://vim-adventures.com/)                    一款精美的Vim游戏，一边玩一边学习Vim，对于这种寓教于乐的学习方式，人民大众自然是喜闻乐见的。\n- [vi-improved.org](http://www.vi-improved.org/)                  首先,这个网站很美观, 其次, 对于Vim, 你总可以在这上面找到或多或少有用的东西。\n\n话说回来，如果你有一些空余的时间，系统的学习一下Vim，听起来也是一件比较不错的事情。`vimtutor` 可比网上的大多数教程都靠谱多了。你只需要在终端中执行 `$ vimtutor zh` 即可打开vimtutor的中文版，依据里面的指示自由的练习Vim吧。\n\n## vimrc文件\n\n当你使用了Vim一段时间后，你可能会觉得Vim有一部分设计是你很喜欢的，而有一小部分操作则显得不是那么的舒服，这时候，你可能就需要对你的Vim进行一些细微的调整了。Vim是一个工具，没有哪个工具一开始就能满足某个人的全部需求，真正适合自己的工具需要在使用中不断的打磨，同时进行细微的调整，这样工具才会越来越顺手。\n\n![本人的Vim界面(不包含插件)](/img/vim1/my_vim_without_plugin.png)\n\n在Vim中，想要对原先的配置进行修改或增加一些新的配置，就需要修改Vim的配置文件 `vimrc`。Vim会在启动的时候先读取 `vimrc` 文件内的配置内容对Vim进行设置。在系统中，`vimrc` 文件存在于两个地方，一个是用户的家目录下的 `.vimrc`，即 `~/.vimrc` ，用于管理对应单个用户的Vim配置；另一个是 `/etc/vim/vimrc` ，用于管理root用户及全局的vim配置。一般说来，我们并不倾向于更改系统的 `vimrc` 文件，而只对用户家目录下的 `.vimrc` 文件进行修改(如果家目录下没有的话，可以新建一个，注意.vimrc是隐藏文件，开头有个“.”)。修改 `~/.vimrc` 的好处在于配置仅对该用户生效而不影响整个系统。\n\nvimrc文件到底长什么样？能干些什么？要解决这两个问题，让我们先来看看本人的vimrc文件。\n```\n\" 设置vi兼容性，设置为不兼容以避免vi限制\nset nocompatible\n\n\" 默认显示行号\nset nu\n\n\" 设置（软）制表符宽度为4：\nset tabstop=4\nset softtabstop=4\n\n\" 设置自动缩进：即每行的缩进值与上一行相等；使用 noautoindent 取消设置：\nset autoindent\n\n\" 设置（自动）缩进的空格数为4\nset shiftwidth=4\n\n\" 设置 使用 C/C++ 语言的自动缩进方式：\nset cindent\n\n\" 智能缩进\nset smartindent\n\n\" 语法高亮\nsyntax enable\nsyntax on\n\n\" vim皮肤\ncolorscheme torte\n\n\"在状态栏显示正在输入的命令\nset showcmd\n\n\"为方便复制，用<F2>开启/关闭行号显示:\nnnoremap <F2> :set nonumber!<CR>\n\n\" 在终端下打开256色\nset t_Co=256\n\n\" 搜索的时候实时显示结果\nset incsearch\n\n\" 高亮搜索结果\nset hlsearch\n\n\" 禁止循环查找\nset nowrapscan\n\n\"  设置匹配模式，显示匹配的括号\nset showmatch\n\n\" 文件类型自动识别, Vundle要求必须为off\n\" filetype on\nfiletype plugin on\nfiletype plugin indent on\n\n\" 智能补全\nset completeopt=longest,menu\n\n\" 设置历史记录为50条\nset history=50\n\n\" 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行\n\" set laststatus=2\n\n\" 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上。\nset ruler\n\n\" 括号引号补全\n:inoremap ( ()<ESC>i\n:inoremap { {<CR>}<ESC>O\n:inoremap [ []<ESC>i\n\n\" 折叠设置\nset foldmethod=syntax \" 用语法高亮来定义折叠\nset foldlevel=100 \" 启动vim时不要自动折叠代码\n\n\" (这是本人vimrc文件的部分内容，由于目前尚未讲到插件，故不包括插件的配置部分。) \n```\n\nvimrc配置文件的格式还是比较简单的，其中 `\"` 号后跟的注释，每个设置的作用我都已经用注释进行了说明。我们可以看到，在配置文件中，大多数是`set value` 这样的声明，这些设置你其实可以在运行Vim的过程中通过`:set value` 来进行动态的设定。比如，当你打开Vim，发现没有行号的时候，可以输入`:set nu` 来显示行号，当你不想显示行号时，可以输入`:set nonu` 来关闭行号显示。之所以把这些设置写入vimrc文件，是因为这样做可以避免每次使用Vim都手动进行设定的麻烦而让Vim在打开的时候就已经按照你的设置设定好了。\n\n对于上述给出的vimrc文件, 我个人是认为太长太繁琐了. 不过不要怀疑, 如果你google一下\"vimrc 配置文件\", 相信你看到的绝大部分人的vimrc文件都是相当长并且足够的复杂. 长长的vimrc或许真的非常强大, 但我认为 less is more. 如果没有特别的需求的话, 我还是希望我的vimrc文件能保持在一个比较精简的状态, 这也能让我们更专注于使用Vim最擅长部分, 避免去研究一些稀奇古怪的配置语句和脚本.\n\n对于vimrc配置文件的具体讲解, 请参考以下材料:\n\n[Happycasts: vimrc 使用入门](http://happycasts.net/episodes/31?autoplay=true)\n一个相当不错的介绍vimrc配置文件的视频, 通俗易懂, 重要的是观看体验特别好...\n\n[The Perfect .Vimrc Vim Config File](http://spf13.com/post/perfect-vimrc-vim-config-file/)\n号称最牛Bi的vimrc文件,  研究vimrc, 你迟早会看到spf13, 相信我 = =\n\n### 键位映射\n\n其次，在上述的vimrc文件中，读者们可能会发现，我已经将F2键映射成行号显示的开关了。具体的语句是`nnoremap <F2> :set nonumber!<CR>`，这条语句的意思是：在Normal模式下，将F2键映射为`:set nonumber!<CR>` 这一串输入，也就是说按下F2键，相当于输入了后面这么一长串的东西。在后面的一串输入中，`:set nonumber` 代表取消行号显示，而后面加一个`!`，代表针对前面的命令进行on/off的翻转。`<CR>`代表回车，此外，`<ESC>`代表ESC键盘，`<C-r>`代表`ctrl+r`，`<cword>`代表当前光标所在处的单词，`<cfile>`代表光标所在的文件...\n\n同样，配置文件中还设置了对括号补全进行的键位映射。比如`:inoremap ( ()<ESC>i` ，这条语句的意思是：在Insert模式下，将`(`映射成`()<ESC>i` 这串输入，其中 `<ESC>`表示ESC键。这条语句的效果是在写代码的时候，输入`(`时，自动变成 `()` 同时光标停留在两个括号中间，并等待输入。\n注意：这句映射在某些时候存在一定问题，当你在Insert模式下进行粘贴并且粘贴内容包含`(`符号时，原来的文本一对匹配的括号，在粘贴过来的时候会多出右半边的括号。不过由于本人基本不怎么在Insert模式下用 `ctrl+shift+v` 进行粘贴，要粘贴也是在Normal模式下用`y`和`p`进行，所以没什么影响。\n当然, 也可以通过`:set paste`进入paste模式来避免这一问题.\n\n对于键位映射，可能细心的读者会注意到存在 `nnoremap`，`inoremap`，`map`，`nmap`，`imap` 等一些用于键位映射的设置指令。这里简单讲解下，它们都用于进行键盘映射，只是适用的模式不同，像 `map` 就作用于Normal，Visual和操作符等待模式下，而 `nmap` 就只作用于Normal模式下。同理，`imap` 就只作用于Insert模式下。至于 `noremap` 则表示对map后得到的序列，不再进行递归的映射，比如我把a映射成了ab，又把b映射成了bc。若我采用的是map方式，当我输入a时，得到的实际是abc，但是如果采用 `noremap`，则不会对得到的序列进行再次映射，因此当我输入a时，得到的是ab。而 `nnoremap` 则表示只在Normal模式才有效，`inoremap` 表示只在Insert模式下映射才生效。关于Vim键位映射更详细的介绍，请参见[VIM :map](http://www.douban.com/group/topic/10866937/)\n\n### 配色方案\n\n如果你设置了语法高亮，即在vimrc中设置了 `syntax on`，那么Vim会很聪明的根据你打开的文件扩展名对文件内容进行特定的高亮处理。Vim自带了若干个配色方案，可以在 `/usr/share/vim/vim74/colors/` 下找到，在上面的vimrc文件中，本人将色彩方案设定为了 `torte`，即 `colorscheme torte`。不过话说回来，配色方案这东西每个人的喜好千差万别，其中[Solarized](https://github.com/altercation/solarized)和[molokai](http://winterdom.com/2008/08/molokaiforvim)相对而言比较受欢迎。当然，除此之外还有很多种配色方案，在google code上有个 [vimcolorschemetest](https://code.google.com/p/vimcolorschemetest/) 项目，罗列了428个配色方案，并给出了示意图。什么？你已经把全部的配色的方案都浏览了一遍并确定没有一款适合你的？那么，你应该尝试下自己写一个配色方案，不过那听起来有点麻烦，不如就到这个网站上看一下吧：[A ColorScheme Editor for Vim](http://bytefluent.com/vivify/)，这回可以随心所欲的DIY自己的配色方案了╮(╯▽╰)╭\n\n# 总结\n\n至此, 我想你已经对Vim有了大致的了解, 并能根据自己的需要适当的配置vimrc文件, 可能还渐渐适应或是喜欢上Vim了. 如果你还想知道Vim插件相关的内容以及如何配置使用插件,请参见 [Vim(2) -- Vim插件介绍及配置]().\n","source":"_posts/vim1.md","raw":"title: \"Vim(1) -- 认识Vim\"\ndate: 2014-5-15 22:55:25\ntags: [vim]\n---\n\n我想对于每一个在Linux或Mac再或Windows工作下的同学，肯定都非常的熟悉，或者至少听说过Vim。Vim博大精深，非一文可蔽之，但是我希望可以以一个简单并广阔的视角来叙述Vim，从一个使用者的角度来从头到脚地讲述我为何选择Vim，如何使用Vim以及如何用好Vim的。以此来给各位同学提供一个完整的使用Vim的视角，同时能够依照本文的介绍，了解整个配置的过程进而能配置属于自己的Vim。<!-- more -->\n\n# 作者的吐槽\n\n我想对于每一个在Linux或Mac再或Windows工作下的同学，肯定都非常的熟悉，或者至少听说过Vim。Vim是一款强大的编辑器，其最显著的一个特性就是提高了效率的同时解放了程序员双手，呃，保守点说是解放了程序员操作鼠标的手，从而一定程序上缓解了腕关节疼痛和肩周炎等不良症状。利用Vim，程序员，或者一般的电脑操作人员可以在编辑文本时脱离鼠标，只依靠键盘，且仅依靠键盘中主要区域(不包括方向键及小键盘区域)来进行快速高效的编辑。\n\n我想，我之所以在这里介绍Vim，不是因为说Vim很cool，人人都说它好，说它牛bi，用Vim的人逼格怎么怎么高，而只是单纯的因为我喜欢这款工具，喜欢这种屏幕能跟随键盘，键盘能跟随大脑的操作体验，Vim让我的注意力全都集中在文本编辑中，而不需要时不时动一下鼠标，时不时切换窗口的多余操作来影响我工作的前后一致性。\n\n我在此介绍Vim，目的很明确，是让更多的人喜欢上它，人们为什么会喜欢一件东西，就我看来原因很简单，无非是两点：1.简单 2.好用。而当我回想我初学Vim乃至现在偶尔配置Vim的过程中，我在网上找到的绝大部分资料，里面的内容虽然是在教你如何掌握用好Vim，但基本都在间接的告诉你Vim是个多么多么复杂的东西，学习使用它你要付出多么多么巨大的时间精力，而当你还没有真正感受到Vim的高效甚至都还没开始尝试使用Vim时，就已经被繁多的键位操作，复杂的.vimrc配置文件以及数不清的插件淹没了。我并不擅长讲故事，但是就我看来，一篇好的文章，看起来应该像一个完整的故事，有起因，有过渡，有主体，有结果。而我所google到的绝大部分文章，里面包含的仅仅是一堆无聊的命令参数，一些文档的翻译以及零散的铺垫，讨论问题非常的狭小和具体，往往是诸如某个插件如何使用，某个问题如何解决，如何把Vim配置成×××，又如何把Vim配置成×××之类的博文。我经常就纳闷，我连Vim的基本操作都没弄明白呢，我看“把Vim配置成×××”有什么用？我连这插件干嘛的我用不用的到都不知道，我看“×××插件使用教程”干嘛？\n\n诚然，Vim博大精深，非一文可蔽之，但是我希望可以以一个简单并广阔的视角来叙述Vim，从一个使用者的角度来从头到脚地讲述我为何选择Vim，如何使用Vim以及如何用好Vim的。以此来给各位同学提供一个完整的使用Vim的视角，同时能够依照本文的介绍，了解整个配置的过程进而能配置属于自己的Vim。\n\n# 为何选择Vim\n\n对于Vim，我见过很多人，每每提及，总是像描述巫师手中的魔杖一样形容Vim是多么多么神奇，多么多么高端，但当真正开始编辑文件时，不是用notepad就是用gedit，然后紧接着就是连串行云流水的鼠标滑动。当然，我不是说鼠标操作有什么问题，我一直认为鼠标是现代操作系统，至少是桌面操作系统中不可或缺的一部分，甚至在将来，还会有各式各样鼠标的升级替代品出现，比如触控，立体控制，脑电波控制等等。但是对于文本编辑这一块，我想鼠标的操作仅仅满足了基本的需求，效率较低而且严重影响了编辑体验。想想看，当你打开一份文本文档，想要进行修改时要采取的操作。首先，右手要拖动鼠标，移动到要修改的地方，点击，然后把右手移回到键盘，将手指和键位对应上，最后才能开始输入。这个过程看起来似乎非常的流畅，事实上也真的是很流畅，但是仔细回想下你是否遇到过在移动光标，修改文档，或是编辑代码时，你的右手是不是要频繁的离开主键位区，操作鼠标或是方向键来进行定位，然后再返回继续被中断的输入。右手就这样来来回回不停游走于主键位，方向键和鼠标之间，长此以往，程序员自然就有了一支健壮的右手(这个解释我觉得比较正能量= =)。如果你也发现里面有些不对劲的话，那我想，我们应该坐下来好好聊聊Vim。\n\n归根结底，鼠标这个东西是面向图形的，而非面向文本的，且不说GUI和CLI的纷争向来已久，单纯从编辑文本这方面来说，我觉得Vim还是略胜其它图形化编辑器一筹的，在谈论之前我们先看看几张Vim编辑时的gif图片直观感受下。\n\n![](/img/vim1/vim-indro1.gif)\n\n![](/img/vim1/vim-intro2.gif)\n\n我们可以注意到，在操作Vim的过程中，在没有鼠标介入的情况下完成了诸如光标移动，自动补齐，窗口切换，目录更改等操作。在熟悉了基本的Vim的操作之后，就能仅依靠键盘实现精准的光标定位以及增删改查等一系列文本编辑操作。当然，Vim的强大不仅限于此，Vim的优点在于其高度的可扩展性和定制性，可以说，Vim提供了一个Ecosystem，通过各式各样的插件可以让其针对不同场合进行有效的扩展。\n\n到这里，相信你已经对Vim有了个大致的直观印象，或许还有一些跃跃欲试。那么接下来，我们来看看Vim的基本操作。\n\n# Vim基本操作\n\n## Vim学习基础资料\n\n关于Vim的基本操作，在本文中并不赘述，因为随手一google一抓一大把，虽然介绍Vim基本操作的文章很多，但是其中质量低下，同质化的文章占了绝大多数，对于一个刚接触Vim的人而言，避免太早接触高级功能以及复杂插件，对非必要的知识进行有效的屏蔽，只关注Vim最核心的部分是愉快并快速了解Vim的有效途径。本文一方面不想在介绍Vim基本操作这方面重复造轮子，另一方面熟悉Vim的基本操作又是高效利用Vim的关键。因此，本文在此推荐了一些学习Vim基础的优秀资源，帮助读者快速上手体验Vim。\n\n- [简明Vim练级攻略](http://coolshell.cn/articles/5426.html)               如果你想只花30分钟来学(ai)习(shang)Vim的话，那么你应该看这篇文章。\n- [Learn Vim Progressively](http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/) 《简明Vim练级攻略》是翻译自这篇文章的，其它的就没必要多说了:-P\n- [vim adventures](http://vim-adventures.com/)                    一款精美的Vim游戏，一边玩一边学习Vim，对于这种寓教于乐的学习方式，人民大众自然是喜闻乐见的。\n- [vi-improved.org](http://www.vi-improved.org/)                  首先,这个网站很美观, 其次, 对于Vim, 你总可以在这上面找到或多或少有用的东西。\n\n话说回来，如果你有一些空余的时间，系统的学习一下Vim，听起来也是一件比较不错的事情。`vimtutor` 可比网上的大多数教程都靠谱多了。你只需要在终端中执行 `$ vimtutor zh` 即可打开vimtutor的中文版，依据里面的指示自由的练习Vim吧。\n\n## vimrc文件\n\n当你使用了Vim一段时间后，你可能会觉得Vim有一部分设计是你很喜欢的，而有一小部分操作则显得不是那么的舒服，这时候，你可能就需要对你的Vim进行一些细微的调整了。Vim是一个工具，没有哪个工具一开始就能满足某个人的全部需求，真正适合自己的工具需要在使用中不断的打磨，同时进行细微的调整，这样工具才会越来越顺手。\n\n![本人的Vim界面(不包含插件)](/img/vim1/my_vim_without_plugin.png)\n\n在Vim中，想要对原先的配置进行修改或增加一些新的配置，就需要修改Vim的配置文件 `vimrc`。Vim会在启动的时候先读取 `vimrc` 文件内的配置内容对Vim进行设置。在系统中，`vimrc` 文件存在于两个地方，一个是用户的家目录下的 `.vimrc`，即 `~/.vimrc` ，用于管理对应单个用户的Vim配置；另一个是 `/etc/vim/vimrc` ，用于管理root用户及全局的vim配置。一般说来，我们并不倾向于更改系统的 `vimrc` 文件，而只对用户家目录下的 `.vimrc` 文件进行修改(如果家目录下没有的话，可以新建一个，注意.vimrc是隐藏文件，开头有个“.”)。修改 `~/.vimrc` 的好处在于配置仅对该用户生效而不影响整个系统。\n\nvimrc文件到底长什么样？能干些什么？要解决这两个问题，让我们先来看看本人的vimrc文件。\n```\n\" 设置vi兼容性，设置为不兼容以避免vi限制\nset nocompatible\n\n\" 默认显示行号\nset nu\n\n\" 设置（软）制表符宽度为4：\nset tabstop=4\nset softtabstop=4\n\n\" 设置自动缩进：即每行的缩进值与上一行相等；使用 noautoindent 取消设置：\nset autoindent\n\n\" 设置（自动）缩进的空格数为4\nset shiftwidth=4\n\n\" 设置 使用 C/C++ 语言的自动缩进方式：\nset cindent\n\n\" 智能缩进\nset smartindent\n\n\" 语法高亮\nsyntax enable\nsyntax on\n\n\" vim皮肤\ncolorscheme torte\n\n\"在状态栏显示正在输入的命令\nset showcmd\n\n\"为方便复制，用<F2>开启/关闭行号显示:\nnnoremap <F2> :set nonumber!<CR>\n\n\" 在终端下打开256色\nset t_Co=256\n\n\" 搜索的时候实时显示结果\nset incsearch\n\n\" 高亮搜索结果\nset hlsearch\n\n\" 禁止循环查找\nset nowrapscan\n\n\"  设置匹配模式，显示匹配的括号\nset showmatch\n\n\" 文件类型自动识别, Vundle要求必须为off\n\" filetype on\nfiletype plugin on\nfiletype plugin indent on\n\n\" 智能补全\nset completeopt=longest,menu\n\n\" 设置历史记录为50条\nset history=50\n\n\" 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行\n\" set laststatus=2\n\n\" 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上。\nset ruler\n\n\" 括号引号补全\n:inoremap ( ()<ESC>i\n:inoremap { {<CR>}<ESC>O\n:inoremap [ []<ESC>i\n\n\" 折叠设置\nset foldmethod=syntax \" 用语法高亮来定义折叠\nset foldlevel=100 \" 启动vim时不要自动折叠代码\n\n\" (这是本人vimrc文件的部分内容，由于目前尚未讲到插件，故不包括插件的配置部分。) \n```\n\nvimrc配置文件的格式还是比较简单的，其中 `\"` 号后跟的注释，每个设置的作用我都已经用注释进行了说明。我们可以看到，在配置文件中，大多数是`set value` 这样的声明，这些设置你其实可以在运行Vim的过程中通过`:set value` 来进行动态的设定。比如，当你打开Vim，发现没有行号的时候，可以输入`:set nu` 来显示行号，当你不想显示行号时，可以输入`:set nonu` 来关闭行号显示。之所以把这些设置写入vimrc文件，是因为这样做可以避免每次使用Vim都手动进行设定的麻烦而让Vim在打开的时候就已经按照你的设置设定好了。\n\n对于上述给出的vimrc文件, 我个人是认为太长太繁琐了. 不过不要怀疑, 如果你google一下\"vimrc 配置文件\", 相信你看到的绝大部分人的vimrc文件都是相当长并且足够的复杂. 长长的vimrc或许真的非常强大, 但我认为 less is more. 如果没有特别的需求的话, 我还是希望我的vimrc文件能保持在一个比较精简的状态, 这也能让我们更专注于使用Vim最擅长部分, 避免去研究一些稀奇古怪的配置语句和脚本.\n\n对于vimrc配置文件的具体讲解, 请参考以下材料:\n\n[Happycasts: vimrc 使用入门](http://happycasts.net/episodes/31?autoplay=true)\n一个相当不错的介绍vimrc配置文件的视频, 通俗易懂, 重要的是观看体验特别好...\n\n[The Perfect .Vimrc Vim Config File](http://spf13.com/post/perfect-vimrc-vim-config-file/)\n号称最牛Bi的vimrc文件,  研究vimrc, 你迟早会看到spf13, 相信我 = =\n\n### 键位映射\n\n其次，在上述的vimrc文件中，读者们可能会发现，我已经将F2键映射成行号显示的开关了。具体的语句是`nnoremap <F2> :set nonumber!<CR>`，这条语句的意思是：在Normal模式下，将F2键映射为`:set nonumber!<CR>` 这一串输入，也就是说按下F2键，相当于输入了后面这么一长串的东西。在后面的一串输入中，`:set nonumber` 代表取消行号显示，而后面加一个`!`，代表针对前面的命令进行on/off的翻转。`<CR>`代表回车，此外，`<ESC>`代表ESC键盘，`<C-r>`代表`ctrl+r`，`<cword>`代表当前光标所在处的单词，`<cfile>`代表光标所在的文件...\n\n同样，配置文件中还设置了对括号补全进行的键位映射。比如`:inoremap ( ()<ESC>i` ，这条语句的意思是：在Insert模式下，将`(`映射成`()<ESC>i` 这串输入，其中 `<ESC>`表示ESC键。这条语句的效果是在写代码的时候，输入`(`时，自动变成 `()` 同时光标停留在两个括号中间，并等待输入。\n注意：这句映射在某些时候存在一定问题，当你在Insert模式下进行粘贴并且粘贴内容包含`(`符号时，原来的文本一对匹配的括号，在粘贴过来的时候会多出右半边的括号。不过由于本人基本不怎么在Insert模式下用 `ctrl+shift+v` 进行粘贴，要粘贴也是在Normal模式下用`y`和`p`进行，所以没什么影响。\n当然, 也可以通过`:set paste`进入paste模式来避免这一问题.\n\n对于键位映射，可能细心的读者会注意到存在 `nnoremap`，`inoremap`，`map`，`nmap`，`imap` 等一些用于键位映射的设置指令。这里简单讲解下，它们都用于进行键盘映射，只是适用的模式不同，像 `map` 就作用于Normal，Visual和操作符等待模式下，而 `nmap` 就只作用于Normal模式下。同理，`imap` 就只作用于Insert模式下。至于 `noremap` 则表示对map后得到的序列，不再进行递归的映射，比如我把a映射成了ab，又把b映射成了bc。若我采用的是map方式，当我输入a时，得到的实际是abc，但是如果采用 `noremap`，则不会对得到的序列进行再次映射，因此当我输入a时，得到的是ab。而 `nnoremap` 则表示只在Normal模式才有效，`inoremap` 表示只在Insert模式下映射才生效。关于Vim键位映射更详细的介绍，请参见[VIM :map](http://www.douban.com/group/topic/10866937/)\n\n### 配色方案\n\n如果你设置了语法高亮，即在vimrc中设置了 `syntax on`，那么Vim会很聪明的根据你打开的文件扩展名对文件内容进行特定的高亮处理。Vim自带了若干个配色方案，可以在 `/usr/share/vim/vim74/colors/` 下找到，在上面的vimrc文件中，本人将色彩方案设定为了 `torte`，即 `colorscheme torte`。不过话说回来，配色方案这东西每个人的喜好千差万别，其中[Solarized](https://github.com/altercation/solarized)和[molokai](http://winterdom.com/2008/08/molokaiforvim)相对而言比较受欢迎。当然，除此之外还有很多种配色方案，在google code上有个 [vimcolorschemetest](https://code.google.com/p/vimcolorschemetest/) 项目，罗列了428个配色方案，并给出了示意图。什么？你已经把全部的配色的方案都浏览了一遍并确定没有一款适合你的？那么，你应该尝试下自己写一个配色方案，不过那听起来有点麻烦，不如就到这个网站上看一下吧：[A ColorScheme Editor for Vim](http://bytefluent.com/vivify/)，这回可以随心所欲的DIY自己的配色方案了╮(╯▽╰)╭\n\n# 总结\n\n至此, 我想你已经对Vim有了大致的了解, 并能根据自己的需要适当的配置vimrc文件, 可能还渐渐适应或是喜欢上Vim了. 如果你还想知道Vim插件相关的内容以及如何配置使用插件,请参见 [Vim(2) -- Vim插件介绍及配置]().\n","slug":"vim1","published":1,"updated":"2015-04-08T13:21:31.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o8y000bkadyogsozdrx"},{"title":"CentOS/Fedora下SVN+Apache服务器配置","date":"2013-11-17T06:03:34.000Z","_content":"\n# SVN简介\nSVN是一个优秀的版本管理工具，并且适用于小型的团队开发。SVN可以独立服务器运行或者借助Apache运行，所谓独立运行是指在服务器上配置好SVN服务器后，网内的计算机可以利用诸如TortoiseSVN这样的SVN客户端软件通过SVN协议(svn://***.***.***.***)对服务器进行签出(checkout)提交(commit)等操作。若SVN借助Apache运行，则可通过浏览器的http协议直接访问服务器对应地址下的代码。\n\n本文先讲述如何单独配置SVN服务器，之后再讲述如何添加Apache的http访问支持。\n\n---\n\n# 安装环境\nFedora 19 / CentOS 6.4\n(Windows也可当作SVN服务器，貌似配置过程很简单，不过从稳定性上考虑，还是选用CentOS作为服务器更为理想)\n\n---\n\n# SVN服务器配置\n\n## 安装subversion包\n```\n# yum install subversion\n```\n## 初始化版本仓库(Repositories)\n安装完subversion后，需要初始化一个版本仓库，用于管理代码。 新建目录\n```\n# mkdir -p /home/svn/project\n```\n在新建的目录上创建仓库\n```\n# svnadmin create /home/svn/project\n```\n这里，`svnadmin create`之后跟的为版本仓库存放代码的目录地址，在本文中为 `/home/svn/project`，当然，可以根据需求改成其它目录，但请在以下的操作中根据具体目录进行对应的修改。 在执行完`svnadmin create`操作后，在创建的仓库下，会自动生成几个目录\n```\nls /home/svn/project/\nconf  db  format  hooks  locks  README.txt\n```\n此时，如果你的电脑上有待进行管理的代码目录，可以将其导入(import)到SVN的仓库中。作为示例，这里要导入的代码目录为\n```\n# svn import /home/chen/Lab file:///home/svn/project -m \"初始化导入代码目录\"\n```\n在`svn import`命令中，末尾的`-m(--message)`选项表示为执行操作的日志消息，如果不加`-m` “消息内容”的话，此操作将会报错`svn: E205007`。\n如果导入成功，你将会看到诸如如下过程(此处截取了导入过程中的末尾部分)\n```\nAdding  (bin)  /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/PCM-Memory_Win/pcm-memory-win.vcproj\nAdding         /home/chen/Lab/IntelPerformanceCoun(((ujterMonitorV2.4/freegetopt/README\nAdding         /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/freegetopt/getopt.c\nAdding         /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/freegetopt/ChangeLog\nAdding         /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/.gitignore\nAdding         /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/FREEBSD_HOWTO.txt\n\nCommitted revision 1.\n```\n## 用户管理及权限设置\nSVN服务器的配置文件主要有3个，分别为\n```\n/your_svn_repos/conf/passwd --用户名及密码管理\n/your_svn_repos/conf/authz  --权限配置\n/your_svn_repos/conf/svnserve.conf  --SVN全局配置文件\n```\n### 添加用户\n添加用户只需要打开`/home/svn/project/conf/passwd`文件，添加一行形如 `user = password` 条目即可。这里，作为示例，添加一个admin账户，密码为123456，以及其它2个账户则`passwd`文件如下\n```\n### This file is an example password file for svnserve.\n### Its format is similar to that of svnserve.conf. As shown in the\n### example below it contains one section labelled [users].\n### The name and password for each user follow, one account per line.\n\n[users]\n# harry = harryssecret\n# sally = sallyssecret\nadmin = 123456\nrole_a = 123456\nrole_b = 123456\n```\n### 用户访问策略配置\n`/home/svn/project/conf/authz`文件用于管理用户以及用户组的访问策略。authz文件中包含若干个节，包括`[groups]`以及类似`[repository:/baz/fuz]`这样的节，注意`[groups]`节，这里用于定义用户组，在`[groups]`节中定义完不同组的用户后可以很方便的利用组进行权限管理。\n```\n[groups]\n# harry_and_sally = harry,sally\n# harry_sally_and_joe = harry,sally,&joe\ng_admin = admin\ng_common = role_a,role_b\n\n[/]\n@g_admin = rw\n* = \n\n[project:/]\n@g_admin = rw\n@g_common = rw\n* =\n```\n在以上的authz文件中，定义了组`g_admin`和`g_common`，`g_admin`组中包含有admin用户，`g_common`组中包含了用户role_a和role_b。\n接下来进行具体目录的权限控制，可用类似 `user = rw` 类似的方式为用户分配该目录的对应权限，也可用 `@groupname = rw` 类似的方式为用户组分配该目录的对应权限，r代表可读，w代表可写，rw代表可读可写。同时，一定要注意在末尾添加其他人的权限设置，利用 `*` 通配符代表除了之前提到的其他人。`* =` 表示其他人不具有任何权限。\n注意到文件中的两个节`[/]`和`[project:/]`，`[/]`表示SVN根目录的权限配置，而`[project:/]`表示库project的根目录权限配置，二者存在细微的差别，但是若没搞清楚，则会导致访问时验证失败或连接失败等问题。\n\n### SVN全局配置文件\n`/home/svn/project/conf/subserve.conf`为SVN的全局配置文件，这里取消对应行的注释并指定适当的值，注意不要行前不要留空格，具体如下:\n```\n[general]\nanon-access = none   --匿名用户默认情况下不具有任何权限\nauth-access = write  --授权用户具默认情况下有写权限\npassword-db = /home/svn/project/conf/passwd  --指定passwd文件所在位置\nauthz-db = /home/svn/project/conf/authz      --指定authz文件所在位置\n```\n\n## 启动SVN服务器\n```\n# svnserve -d -r /home/svn\n```\n`-d` 表示以deamon方式运行，即后台运行。 `-r`用于指定SVN服务根目录，这里我们指定的根目录为 `/home/svn`。\n联系到authz文件中，`[/]`节中的权限则对应 `/home/svn` 下权限，`[project:/]`节中的权限即对应 `/home/svn/project` 下的权限。但是如果指定SVN服务根目录为 `/home/svn/project`，那么authz文件中`[/]`代表目录 `/home/svn/project`，而此时`[project:/]`则没有对应目录，因为`/home/svn/project`下并没有名为project的仓库，所以就会出错。\n如果修改了SVN的配置文件，那么需要重启SVN服务器才能使修改生效。\n```\n# ps -aux|grep svnserve\n# kill -9 pid_of_svnserve\n# svnserve -d -r /home/svn\n```\n\n## 在防火墙中开放SVN端口\n\n如果不在防火墙中开放SVN默认端口3690，则会出现，服务器本机可以访问SVN服务，而其它网内机器无法连接SVN服务器的错误。\n首先关闭selinux，修改 `/etc/selinux/config` 文件\n```\nSELINUX=disabled\n```\nSVN服务的默认端口为3690，设置防火墙开放3690端口\n```\n# iptables -I INPUT -p tcp --dport 3690 -j ACCEPT\n# iptables -I OUTPUT -p tcp --sport 3690 -j ACCEPT\n# service iptables save\n# service iptables restart\n```\n## 测试SVN服务器\n随意找一个目录，尝试从SVN服务器签出(check out)仓库\n```\n# svn co svn://58.154.190.***/project\nAuthentication realm: <svn://58.154.190.***:3690> ecf95e5d-5de1-44de-91b3-f44b1bd795d1\nPassword for 'root': \nAuthentication realm: <svn://58.154.190.***:3690> ecf95e5d-5de1-44de-91b3-f44b1bd795d1\nUsername: admin\nPassword for 'admin': \n\n-----------------------------------------------------------------------\nATTENTION!  Your password for authentication realm:\n\n   <svn://58.154.190.***:3690> ecf95e5d-5de1-44de-91b3-f44b1bd795d1\n\ncan only be stored to disk unencrypted!  You are advised to configure\nyour system so that Subversion can store passwords encrypted, if\npossible.  See the documentation for details.\n\nYou can avoid future appearances of this warning by setting the value\nof the 'store-plaintext-passwords' option to either 'yes' or 'no' in\n'/root/.subversion/servers'.\n-----------------------------------------------------------------------\nStore password unencrypted (yes/no)?yes \n...\n...\nA    project/IntelPerformanceCounterMonitorV2.4/pcm3d/widget.h\nA    project/IntelPerformanceCounterMonitorV2.4/pcm-memory.cpp\nA    project/IntelPerformanceCounterMonitorV2.4/pcm-sensor.cpp\nA    project/IntelPerformanceCounterMonitorV2.4/.gitattributes\nChecked out revision 1.\n```\n在第一次签出的时候会提示是否保存明文密码(因为SVN的密码是明文保存的，所以SVN的账户安全依赖与Linux系统账户的安全)选择\"yes\"的话下次就不需要在输入密码了，反之，选择\"no\"的话下次操作还需进行身份验证。如果想换个身份操作SVN或者密码输错太多被拒绝，可以删除用户目录下的 `～/.subversion` 文件夹以清空身份信息。\n如果能顺利 check out revision 则表明独立SVN服务器配置已成功。\n这时不论是在服务器本机上还是其它客户端机器，均能使用SVN服务。对于客户端操作系统为Windows的计算机，可以安装TortoiseSVN进行相应的客户端操作。\n\n---\n\n# 为SVN服务器添加HTTP支持\n\n经过上面的配置过程后，SVN服务器已经可以正常使用，但是，只能通过SVN协议，无法通过http协议访问。为SVN服务器添加HTTP支持可以使得用户能用浏览器通过HTTP协议直接查看仓库内容，同时也可以在代码签出提交时使用HTTP协议。\n\n## 安装必要包\n```\nyum install httpd mod_dav_svn mod_perl  perl* ntsysv vim-enhanced\n```\n## 转换SVN明文密码为HTTP要求的加密格式\nSVN的密码是明文保存的，而http服务器不支持明文密码，所以需要将SVN服务的明文密码转换为http要求的加密格式，可以通过以下的perl脚本完成：\n移动到 `/home/svn/project/conf` 目录下，新建并编辑perl脚本 `PtoWP.pl`  (此脚本的作者为ha97)\n```\ncd /home/svn/project/conf/\nvim PtoWP.pl\n```\n```\n#!/usr/bin/perl\nuse warnings;\nuse strict;\n\n#open the svn passwd file\nopen (FILE, \"passwd\") or die (\"Cannot open the passwd file!!!n\");\n\n#clear the apache passwd file\nopen (OUT_FILE, \">webpasswd\") or die (\"Cannot open the webpasswd file!!!n\");\nclose (OUT_FILE);\n\n#begin\nforeach () {\nif($_ =~ m/^[^#].*=/) {\n$_ =~ s/=//;\n`htpasswd -b webpasswd $_`;\n}\n}\n```\n为脚本添加可执行属性\n```\n# chmod +x PtoWP.pl\n```\n在目录 `/home/svn/project/conf/passwd` 所在目录中运行`PtoWP.pl`脚本，对passwd文件进行转换\n```\n# ./PtoWP.pl\n```\n转换过程如下\n```\nAdding password for user admin\nAdding password for user role_a\nAdding password for user role_b\n```\n转换完成后目录下会出现一个 `webpasswd` 文件，即为http支持的密码文件。\n\n## 修改http.conf，使得http支持SVN\n\n```\nvim /etc/httpd/conf/httpd.conf\n```\n在`httpd.conf`文件的最后添加如下信息\n```\n# 服务模块\nDAV svn\n# SVN仓库根目录\nSVNPath /home/svn/project/\n# 授权方式,这里配置为基本授权方式\nAuthType Basic\n# 授权名\nAuthName \"svn for project\"\n# 用户名及用户密码文件\nAuthUserFile /home/svn/project/conf/webpasswd\n# 访问权限配置文件\nAuthzSVNAccessFile /home/svn/project/conf/authz\nSatisfy all\n# 访问方式，这里配置为必须输入账户密码\nRequire valid-user\n```\n看了不少文章，有部分文章说在这里还需添加两个模块的语句，另外还需要 `yum install subversion-deps-*` 包来使得svn得到http的支持。\n```\nLoadModule dav_svn_module modules/mod_dav_svn.so\nLoadModule authz_svn_module modules/mod_authz_svn.so\n```\n但是，根据官方的说明(Please note that the dependencies distribution subversion-deps-* is no longer available in 1.7 and later.)也就是说在1.7以及1.7之后的版本中不需要安装依赖的`subversion-deps-*`包，而本人实验证明，也不需要在`httpd.conf`文件中添加上述两行加载模块的语句。\n\n修改SVN主目录的所有者和所属组为Apache\n```\n# chown -R apache.apache /home/svn/project/\n```\n\n## 在防火墙中开放httpd服务的80端口\n```\n# iptables -I INPUT -p tcp --dport 80 -j ACCEPT\n# iptables -I OUTPUT -p tcp --sport 80 -j ACCEPT\n# service iptables save\n# service iptables restart\n```\n如果不在防火墙中开放80端口，则会出前客户机无法通过http协议连接SVN服务器的情况。\n**注:** 关于服务重启命令，在fedora 19中采用的是systemctl restart service_name.service形式。\n\n## 重启httpd服务\n```\n# service httpd restart\n```\n\n## 通过浏览器测试\n在浏览器地址栏输入 `http://your_svn_server_ip/project`，在弹出的身份确认框中输入用户名密码，能通过浏览器查看SVN仓库。\n同时可以通过http协议执行svn操作\n```\n$ svn co http://your_svn_server_ip/project\nAuthentication realm: <http://58.154.190.***:80> svn for project\nPassword for 'chen': \nAuthentication realm: <http://58.154.190.***:80> svn for project\nUsername: admin\nPassword for 'admin':\n```\n\n# 参考资料\n[（总结）CentOS Linux搭建SVN Server配置详解](http://www.ha97.com/4467.html)","source":"_posts/svn.md","raw":"title: \"CentOS/Fedora下SVN+Apache服务器配置\"\ndate: 2013-11-17 14:03:34\ntags: [CentOS, Fedora, Linux, SVN, maintenance, apache, server]\n---\n\n# SVN简介\nSVN是一个优秀的版本管理工具，并且适用于小型的团队开发。SVN可以独立服务器运行或者借助Apache运行，所谓独立运行是指在服务器上配置好SVN服务器后，网内的计算机可以利用诸如TortoiseSVN这样的SVN客户端软件通过SVN协议(svn://***.***.***.***)对服务器进行签出(checkout)提交(commit)等操作。若SVN借助Apache运行，则可通过浏览器的http协议直接访问服务器对应地址下的代码。\n\n本文先讲述如何单独配置SVN服务器，之后再讲述如何添加Apache的http访问支持。\n\n---\n\n# 安装环境\nFedora 19 / CentOS 6.4\n(Windows也可当作SVN服务器，貌似配置过程很简单，不过从稳定性上考虑，还是选用CentOS作为服务器更为理想)\n\n---\n\n# SVN服务器配置\n\n## 安装subversion包\n```\n# yum install subversion\n```\n## 初始化版本仓库(Repositories)\n安装完subversion后，需要初始化一个版本仓库，用于管理代码。 新建目录\n```\n# mkdir -p /home/svn/project\n```\n在新建的目录上创建仓库\n```\n# svnadmin create /home/svn/project\n```\n这里，`svnadmin create`之后跟的为版本仓库存放代码的目录地址，在本文中为 `/home/svn/project`，当然，可以根据需求改成其它目录，但请在以下的操作中根据具体目录进行对应的修改。 在执行完`svnadmin create`操作后，在创建的仓库下，会自动生成几个目录\n```\nls /home/svn/project/\nconf  db  format  hooks  locks  README.txt\n```\n此时，如果你的电脑上有待进行管理的代码目录，可以将其导入(import)到SVN的仓库中。作为示例，这里要导入的代码目录为\n```\n# svn import /home/chen/Lab file:///home/svn/project -m \"初始化导入代码目录\"\n```\n在`svn import`命令中，末尾的`-m(--message)`选项表示为执行操作的日志消息，如果不加`-m` “消息内容”的话，此操作将会报错`svn: E205007`。\n如果导入成功，你将会看到诸如如下过程(此处截取了导入过程中的末尾部分)\n```\nAdding  (bin)  /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/PCM-Memory_Win/pcm-memory-win.vcproj\nAdding         /home/chen/Lab/IntelPerformanceCoun(((ujterMonitorV2.4/freegetopt/README\nAdding         /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/freegetopt/getopt.c\nAdding         /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/freegetopt/ChangeLog\nAdding         /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/.gitignore\nAdding         /home/chen/Lab/IntelPerformanceCounterMonitorV2.4/FREEBSD_HOWTO.txt\n\nCommitted revision 1.\n```\n## 用户管理及权限设置\nSVN服务器的配置文件主要有3个，分别为\n```\n/your_svn_repos/conf/passwd --用户名及密码管理\n/your_svn_repos/conf/authz  --权限配置\n/your_svn_repos/conf/svnserve.conf  --SVN全局配置文件\n```\n### 添加用户\n添加用户只需要打开`/home/svn/project/conf/passwd`文件，添加一行形如 `user = password` 条目即可。这里，作为示例，添加一个admin账户，密码为123456，以及其它2个账户则`passwd`文件如下\n```\n### This file is an example password file for svnserve.\n### Its format is similar to that of svnserve.conf. As shown in the\n### example below it contains one section labelled [users].\n### The name and password for each user follow, one account per line.\n\n[users]\n# harry = harryssecret\n# sally = sallyssecret\nadmin = 123456\nrole_a = 123456\nrole_b = 123456\n```\n### 用户访问策略配置\n`/home/svn/project/conf/authz`文件用于管理用户以及用户组的访问策略。authz文件中包含若干个节，包括`[groups]`以及类似`[repository:/baz/fuz]`这样的节，注意`[groups]`节，这里用于定义用户组，在`[groups]`节中定义完不同组的用户后可以很方便的利用组进行权限管理。\n```\n[groups]\n# harry_and_sally = harry,sally\n# harry_sally_and_joe = harry,sally,&joe\ng_admin = admin\ng_common = role_a,role_b\n\n[/]\n@g_admin = rw\n* = \n\n[project:/]\n@g_admin = rw\n@g_common = rw\n* =\n```\n在以上的authz文件中，定义了组`g_admin`和`g_common`，`g_admin`组中包含有admin用户，`g_common`组中包含了用户role_a和role_b。\n接下来进行具体目录的权限控制，可用类似 `user = rw` 类似的方式为用户分配该目录的对应权限，也可用 `@groupname = rw` 类似的方式为用户组分配该目录的对应权限，r代表可读，w代表可写，rw代表可读可写。同时，一定要注意在末尾添加其他人的权限设置，利用 `*` 通配符代表除了之前提到的其他人。`* =` 表示其他人不具有任何权限。\n注意到文件中的两个节`[/]`和`[project:/]`，`[/]`表示SVN根目录的权限配置，而`[project:/]`表示库project的根目录权限配置，二者存在细微的差别，但是若没搞清楚，则会导致访问时验证失败或连接失败等问题。\n\n### SVN全局配置文件\n`/home/svn/project/conf/subserve.conf`为SVN的全局配置文件，这里取消对应行的注释并指定适当的值，注意不要行前不要留空格，具体如下:\n```\n[general]\nanon-access = none   --匿名用户默认情况下不具有任何权限\nauth-access = write  --授权用户具默认情况下有写权限\npassword-db = /home/svn/project/conf/passwd  --指定passwd文件所在位置\nauthz-db = /home/svn/project/conf/authz      --指定authz文件所在位置\n```\n\n## 启动SVN服务器\n```\n# svnserve -d -r /home/svn\n```\n`-d` 表示以deamon方式运行，即后台运行。 `-r`用于指定SVN服务根目录，这里我们指定的根目录为 `/home/svn`。\n联系到authz文件中，`[/]`节中的权限则对应 `/home/svn` 下权限，`[project:/]`节中的权限即对应 `/home/svn/project` 下的权限。但是如果指定SVN服务根目录为 `/home/svn/project`，那么authz文件中`[/]`代表目录 `/home/svn/project`，而此时`[project:/]`则没有对应目录，因为`/home/svn/project`下并没有名为project的仓库，所以就会出错。\n如果修改了SVN的配置文件，那么需要重启SVN服务器才能使修改生效。\n```\n# ps -aux|grep svnserve\n# kill -9 pid_of_svnserve\n# svnserve -d -r /home/svn\n```\n\n## 在防火墙中开放SVN端口\n\n如果不在防火墙中开放SVN默认端口3690，则会出现，服务器本机可以访问SVN服务，而其它网内机器无法连接SVN服务器的错误。\n首先关闭selinux，修改 `/etc/selinux/config` 文件\n```\nSELINUX=disabled\n```\nSVN服务的默认端口为3690，设置防火墙开放3690端口\n```\n# iptables -I INPUT -p tcp --dport 3690 -j ACCEPT\n# iptables -I OUTPUT -p tcp --sport 3690 -j ACCEPT\n# service iptables save\n# service iptables restart\n```\n## 测试SVN服务器\n随意找一个目录，尝试从SVN服务器签出(check out)仓库\n```\n# svn co svn://58.154.190.***/project\nAuthentication realm: <svn://58.154.190.***:3690> ecf95e5d-5de1-44de-91b3-f44b1bd795d1\nPassword for 'root': \nAuthentication realm: <svn://58.154.190.***:3690> ecf95e5d-5de1-44de-91b3-f44b1bd795d1\nUsername: admin\nPassword for 'admin': \n\n-----------------------------------------------------------------------\nATTENTION!  Your password for authentication realm:\n\n   <svn://58.154.190.***:3690> ecf95e5d-5de1-44de-91b3-f44b1bd795d1\n\ncan only be stored to disk unencrypted!  You are advised to configure\nyour system so that Subversion can store passwords encrypted, if\npossible.  See the documentation for details.\n\nYou can avoid future appearances of this warning by setting the value\nof the 'store-plaintext-passwords' option to either 'yes' or 'no' in\n'/root/.subversion/servers'.\n-----------------------------------------------------------------------\nStore password unencrypted (yes/no)?yes \n...\n...\nA    project/IntelPerformanceCounterMonitorV2.4/pcm3d/widget.h\nA    project/IntelPerformanceCounterMonitorV2.4/pcm-memory.cpp\nA    project/IntelPerformanceCounterMonitorV2.4/pcm-sensor.cpp\nA    project/IntelPerformanceCounterMonitorV2.4/.gitattributes\nChecked out revision 1.\n```\n在第一次签出的时候会提示是否保存明文密码(因为SVN的密码是明文保存的，所以SVN的账户安全依赖与Linux系统账户的安全)选择\"yes\"的话下次就不需要在输入密码了，反之，选择\"no\"的话下次操作还需进行身份验证。如果想换个身份操作SVN或者密码输错太多被拒绝，可以删除用户目录下的 `～/.subversion` 文件夹以清空身份信息。\n如果能顺利 check out revision 则表明独立SVN服务器配置已成功。\n这时不论是在服务器本机上还是其它客户端机器，均能使用SVN服务。对于客户端操作系统为Windows的计算机，可以安装TortoiseSVN进行相应的客户端操作。\n\n---\n\n# 为SVN服务器添加HTTP支持\n\n经过上面的配置过程后，SVN服务器已经可以正常使用，但是，只能通过SVN协议，无法通过http协议访问。为SVN服务器添加HTTP支持可以使得用户能用浏览器通过HTTP协议直接查看仓库内容，同时也可以在代码签出提交时使用HTTP协议。\n\n## 安装必要包\n```\nyum install httpd mod_dav_svn mod_perl  perl* ntsysv vim-enhanced\n```\n## 转换SVN明文密码为HTTP要求的加密格式\nSVN的密码是明文保存的，而http服务器不支持明文密码，所以需要将SVN服务的明文密码转换为http要求的加密格式，可以通过以下的perl脚本完成：\n移动到 `/home/svn/project/conf` 目录下，新建并编辑perl脚本 `PtoWP.pl`  (此脚本的作者为ha97)\n```\ncd /home/svn/project/conf/\nvim PtoWP.pl\n```\n```\n#!/usr/bin/perl\nuse warnings;\nuse strict;\n\n#open the svn passwd file\nopen (FILE, \"passwd\") or die (\"Cannot open the passwd file!!!n\");\n\n#clear the apache passwd file\nopen (OUT_FILE, \">webpasswd\") or die (\"Cannot open the webpasswd file!!!n\");\nclose (OUT_FILE);\n\n#begin\nforeach () {\nif($_ =~ m/^[^#].*=/) {\n$_ =~ s/=//;\n`htpasswd -b webpasswd $_`;\n}\n}\n```\n为脚本添加可执行属性\n```\n# chmod +x PtoWP.pl\n```\n在目录 `/home/svn/project/conf/passwd` 所在目录中运行`PtoWP.pl`脚本，对passwd文件进行转换\n```\n# ./PtoWP.pl\n```\n转换过程如下\n```\nAdding password for user admin\nAdding password for user role_a\nAdding password for user role_b\n```\n转换完成后目录下会出现一个 `webpasswd` 文件，即为http支持的密码文件。\n\n## 修改http.conf，使得http支持SVN\n\n```\nvim /etc/httpd/conf/httpd.conf\n```\n在`httpd.conf`文件的最后添加如下信息\n```\n# 服务模块\nDAV svn\n# SVN仓库根目录\nSVNPath /home/svn/project/\n# 授权方式,这里配置为基本授权方式\nAuthType Basic\n# 授权名\nAuthName \"svn for project\"\n# 用户名及用户密码文件\nAuthUserFile /home/svn/project/conf/webpasswd\n# 访问权限配置文件\nAuthzSVNAccessFile /home/svn/project/conf/authz\nSatisfy all\n# 访问方式，这里配置为必须输入账户密码\nRequire valid-user\n```\n看了不少文章，有部分文章说在这里还需添加两个模块的语句，另外还需要 `yum install subversion-deps-*` 包来使得svn得到http的支持。\n```\nLoadModule dav_svn_module modules/mod_dav_svn.so\nLoadModule authz_svn_module modules/mod_authz_svn.so\n```\n但是，根据官方的说明(Please note that the dependencies distribution subversion-deps-* is no longer available in 1.7 and later.)也就是说在1.7以及1.7之后的版本中不需要安装依赖的`subversion-deps-*`包，而本人实验证明，也不需要在`httpd.conf`文件中添加上述两行加载模块的语句。\n\n修改SVN主目录的所有者和所属组为Apache\n```\n# chown -R apache.apache /home/svn/project/\n```\n\n## 在防火墙中开放httpd服务的80端口\n```\n# iptables -I INPUT -p tcp --dport 80 -j ACCEPT\n# iptables -I OUTPUT -p tcp --sport 80 -j ACCEPT\n# service iptables save\n# service iptables restart\n```\n如果不在防火墙中开放80端口，则会出前客户机无法通过http协议连接SVN服务器的情况。\n**注:** 关于服务重启命令，在fedora 19中采用的是systemctl restart service_name.service形式。\n\n## 重启httpd服务\n```\n# service httpd restart\n```\n\n## 通过浏览器测试\n在浏览器地址栏输入 `http://your_svn_server_ip/project`，在弹出的身份确认框中输入用户名密码，能通过浏览器查看SVN仓库。\n同时可以通过http协议执行svn操作\n```\n$ svn co http://your_svn_server_ip/project\nAuthentication realm: <http://58.154.190.***:80> svn for project\nPassword for 'chen': \nAuthentication realm: <http://58.154.190.***:80> svn for project\nUsername: admin\nPassword for 'admin':\n```\n\n# 参考资料\n[（总结）CentOS Linux搭建SVN Server配置详解](http://www.ha97.com/4467.html)","slug":"svn","published":1,"updated":"2015-04-07T16:17:36.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o90000dkadyqcnpp8am"},{"title":"SSH连接认证原理概述","date":"2013-12-30T05:54:46.000Z","_content":"\n# SSH简要介绍\n\nSSH的英文全称为Secure Shell，是IETF（Internet Engineering Task Force）的Network Working Group所制定的一族协议，其目的是要在非安全网络上提供安全的远程登录和其他安全网络服务。<sup>[[1]](http://blog.csdn.net/oncoding/article/details/4365062)</sup>用于在主机之间建立起安全连接, 并加密传输内容, 以达到安全的远程访问, 操作以及数据传输的目的.\n\nSSH主要有两个特点: 1. 安全性 2. 传输速度快\n\n为什么要强调SSH的安全特性, 因为传统的网络服务程序，如 FTP、POP 和 Telnet 其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。 而 SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。透过 SSH 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗。<sup>[[2]](http://biaobiaoqi.me/blog/2013/04/19/use-ssh/)</sup>\n\nSSH的传输速度快是因为SSH传输的数据都是经过压缩的, 自然传输速度快.\n\n# SSH认证原理简述\n\n在介绍SSH具体的认证原理之前, 先简单的介绍下关于公钥和密钥加密的概念.所谓的公钥加密 (public-key cryptography)，或非对称密钥加密 (asymmetric key cryptography) 是一类广泛使用的加密算法。这类算法使用一对(pair)密钥即**公钥 (public key)** 和**私钥 (private key)**。 其中公钥可以随便分发，只用于加密 (encryption)，私钥则只由一人持有，只用于解密。通过公钥加密过的密文使用密钥可以轻松解密, 但根据公钥来猜测私钥却十分困难.\n\n因此, 我们可以很容易的发现这么一个事实, 一个消息在用公钥加密后, 哪怕在传输中被人截获, 如果没有私钥, 是无法解密获得其内容的, 只有拥有私钥的人才能成功解密消息. 所以私钥应该由消息的接收方紧紧攥在手里, 不应让他人得知.\n\n公钥加密的关键点在于，一方面，公钥加密是可逆的，但是不能用公钥推断出私钥。显然数学上，已知一个公钥是能够算出对应私钥的，但是只要设计足够好的加密算法（以及使用足够复杂的密钥对），使得不能在可以接受的时间内破译即可。\n\nRSA<sup>[[3]](http://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95)</sup> 是一种常见的公钥加密算法。RSA 的工作原理依赖于如下事实：破译 RSA 私钥需要对某些极大的整数进行因数分解，而目前尚未找到快速的对极大整数作因数分解的算法。换言之，如果有人找到了这样的算法，那么全世界的 RSA 加密都会失效。\n\nRSA是由Ron Rivest, Adi Shamir, Leonard Adleman三人在1978年首次提出的.三人并因此项工作荣获了2002年[Turing Award](http://en.wikipedia.org/wiki/Turing_award). Rivest还是[算法导论](http://book.douban.com/subject/1885170/)的作者之一, 书中在31章对RSA系统的原理进行了简要说明, 系统实现中利用到了数论中的[Euler-Fermat theorem](http://en.wikipedia.org/wiki/Euler%E2%80%93Fermat_theorem).<sup>[[4]](https://wiki.tuna.tsinghua.edu.cn/SshKeyHowto)</sup>\n\n一个基于RSA的**公钥**大概如下所示\n```\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAvSkEZ0fKXRqQ/DkjCfsAETsQgV8OR/RVQmwBk/J5IWoknf8Dr\ny5kOs+1bnx9zaf8oIcVuXf0jRxTccLBOXiReFJE4aD2rWO33sqA0M4qP1ESYhsU4yokRA0IMDJ62JUv2cWVJg\nGpeQriol2t7mH8E6aB8OiJ+NgRbh6+/0LbtQs40VA2+W5PtaBwT4sjv9LOHIdzQcsEeCM8MIHqmXHst7/JuVI\ni7wLCxB7Ur8qtwZ2/Ii8Ckjfo6mikWmSh6mRMq9qn0FkMkPCcpm8o4f1zJWOuf+RnjPpopFTqIa8JssMHJMuQ\ncCm3EHDkBHjLk/SkidWOzqOtSvUeGKieWiijuw== username@localhost.localdomain\n```\n与之配对的**私钥**形如\n```\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAvSkEZ0fKXRqQ/DkjCfsAETsQgV8OR/RVQmwBk/J5IWoknf8D\nry5kOs+1bnx9zaf8oIcVuXf0jRxTccLBOXiReFJE4aD2rWO33sqA0M4qP1ESYhsU\n4yokRA0IMDJ62JUv2cWVJgGpeQriol2t7mH8E6aB8OiJ+NgRbh6+/0LbtQs40VA2\n+W5PtaBwT4sjv9LOHIdzQcsEeCM8MIHqmXHst7/JuVIi7wLCxB7Ur8qtwZ2/Ii8C\nkjfo6mikWmSh6mRMq9qn0FkMkPCcpm8o4f1zJWOuf+RnjPpopFTqIa8JssMHJMuQ\ncCm3EHDkBHjLk/SkidWOzqOtSvUeGKieWiijuwIBIwKCAQEAjITesx9jIJdkY5go\nqFQOrbbZD6Wy1l27ra9RoRqF3k7ZX2z7bDEXQaGcuHm8iiUEzwVDVpOfuUg9/LyP\nicdHffP4p5wk9dUMPxoWjHvk3pP/BwzNsBCtOd3LkYSVxXYji9SaroTkS0nqL3jK\nWVAaV72FGVxJPINAJer0SJgQ7OJ7f0kZJYoPwG0VpMTLOsmulH7/M5e9i+kwDLmH\n+TMvJ3y8gXjc/Sj5UqN/JQIY+h07UxYGvoju/isqFHh8OmahsjJ3Nb3QsUEkC/Kj\ncKG2K+mUzTe/4/XQuqMadrjX82QF2b2gL+cdvUAwLn55boXmrtUzxEPo4xxiDNzY\nAbYxSwKBgQDxIkaa+EPSJXYej/5YzJLJLVsnb9ygqe/0fM0x022J6Z+0Yq9AIwJ7\nN7dvMgNSROLoJ17Oij/N7aoiAZy1KHg1vOoqx6T6BClay8I1+dOsbY6Fi0QbkZeI\nRr6CDueq5PBR8j/oghNhQeFfJUEICBFU6Z7+uFwxuAtQqqdFHyDhSwKBgQDI0nX6\nJz9oW+Y+dXAvhpL8Yln0R45ufiqatkTQgGbeZ70XlKeR7VzQiXecy/XDteJCMlnv\n4BhjHL967nSAmrCza13I3eXIYxbzypeNC57bVVXM9BBTg5f4nWwTN+I8Gd/BA5Y8\nmekQPBuSyAOp7ULAecjKZrD9Jhw1vybT/aYxUQKBgQDcdxv7ZqRoXMPEK+E7PrIX\nBOWgZkYPPEkaC7RKz+8fAXwSo15mhmirK6BlqhGqTZxB+BwqjQcirWhZmxLuxeo/\nwqo1vdiqEm7z7X5dPC8+kA1G5bqc3OJQtbV+OYNaaupZjQc6+pVgPDvEtFi24s4E\nfdMyB6S/vjY7H67gHHXVSwKBgQC3m9mUQSQHpHq8wyS9vN4olG+AQWxHw88uXYC+\noUgbzI+gh+mp/ZawCKff0GurnvrALgkV1DON0SQYn4B1lL7P7SKLw5BCLrXmNZHg\nCp/eeegL19RpnOK3a1t/SQlbhV7cWw0ENPJX/HD7OocBwvszoouxvPmW/kWte5E2\n```\nSSH 连接是 `C/S` 模型, 客户端发出连接申请, 服务器对客户端进行验证, 再考虑是否接受连接申请.\n\n# SSH具体认证过程\n\nSSH提供了两种认证的方式, 分别为:\n\n## Password认证\n\n即账号口令验证, SSH的实现方式是,\n\n1. 客户端向 ssh 服务器发出请求, 服务器将自己的公钥返回给客户端;\n2. 客户端用服务器的公钥加密自己的登录密码, 再将信息发送给服务器;\n3. 服务器接收到客户端传送的密码, 用自己的私钥解码, 如果结果正确, 则同意登录, 建立起连接.\n\n这种方式还是存在漏洞, 中间人可以假扮成服务器, 骗取客户端的密码.<sup>[[2]](http://biaobiaoqi.me/blog/2013/04/19/use-ssh/)</sup>而且在每次登陆的时候都需要输入密码, 所以一般不采用该验证方式.\n\n## Public Key认证\n\nPublic Key认证利用公钥私钥对进行认证, 在请求连接时不需要输入密码, 并且由于整个请求连接和通信过程全程加密, 因此安全性高.\n\nSSH协议第二版中有RSA和DSA两种算法认证, 其中RSA加密验证比较常用. RSA加密验证方式，充分利用了非对称加密体系的优势，不需要在网络传输密码，完全杜绝了中间人攻击的可能。\n\n认证的具体步骤如下:\n\n### 准备工作\n\n1. 客户端先使用 `ssh-keygen` 命令, 生成公钥和私钥. 按照默认配置, 私钥会被保存在`~/.ssh/id_rsa` 中, 公钥则在`~/.ssh/id_rsa.pub` 中.\n\n2. 客户端通过安全的方式(一般通过scp(Secure Copy Protocol)方式或者U盘拷贝的方式)将公钥发送给服务器. 在服务器端, 将客户端发的公钥写入到`~/.ssh/authorized_keys` 文件末尾.\n\n*(其实公钥和私钥不是必须在客户端生成, 在服务器端生成也是可以的, 在哪生成的对公钥和私钥并没有任何影响, 重要的是二者是配对的, 而准备阶段其实是要保证这么一个事实, 即服务器端握有公钥, 并在对应账户的家目录下的`.ssh/authorized_keys`文件中保存以便验证程序访问. 请求端握有私钥. 至于为什么要将公钥和私钥这么分配, 接下来将会解释.)*\n\n### 建立连接\n\n在建立连接的时候, 涉及到2对密钥, 其中一对为准备阶段产生并分配好的密钥对, 另一对为服务器在接收到一个连接请求时生成的密钥对. 为了讲述方便, 我们将这两组密钥对表示如下\n\n|Symbol|Description|\n|:-:|:-|\n|PubC| 客户端密钥对应的公钥|\n|PrvC| 客户端握有的私钥|\n|PubS| 服务器端产生的公钥|\n|PrvS| 服务器端产生的私钥|\n\n1. **认证**\n\n①服务器生成随机数(称之为challenge) `x`, 并用 `PubC` 加密后生成结果 `s(x)`, 发送给客户端.\n\n②客户端使用 `PrvC` 解密 `s(x)` 得到 `x`, 再将`x`用`PubS`加密发送回服务器端.\n\n③服务器端使用`PrvS`解密得到`x`, 进行核对, 如果正确则链接正式成立.\n\n2. **通信加密**\n\n在请求连接前, 服务器端和客户端拥有的密钥为\n```\nServer          |           Client\n--------------------------------------\nPubC            |            PrvC\n```\n\n①客户端发出申请. 服务器会产生一组 `session` 密钥对, 即`PubS`和`PrvS`.\n\n此时服务器端和客户端拥有的密钥如下所示\n```\nServer           |           Client\n-------------------------------------\nPubC             |            PrvC\nPubS             |\nPrvS             |\n```\n\n②服务器端利用客户端的公钥`PubC`对 `session` 公钥PubS进行加密后发送给客户端.\n\n③客户端用自己的密钥`PrvC`解密信息，得到 `session` 公钥`PubS`。\n```\nServer           |           Client\n-------------------------------------\nPubC             |            PubS\nPrvS             |            PrvC\nPubS             |\n```\n\n④之后的数据交互，都通过对方方公钥加密，对方收到信息后，用其私钥解密，实现安全加密过程。<sup>[[2]](http://biaobiaoqi.me/blog/2013/04/19/use-ssh/)[[5]](http://tech.idv2.com/2006/10/21/ssh-rsa-auth/)</sup>\n\n\n# 参考引用\n\n至此, 关于SSH原理性部分的讲解结束. 以下是相关的参考引用出处:\n\n1. [SSH协议基础](http://blog.csdn.net/oncoding/article/details/4365062)\n2. [SSH原理和使用](http://biaobiaoqi.me/blog/2013/04/19/use-ssh/)\n3. [RSA加密算法](http://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95)\n4. [使用 RSA 密钥对进行 SSH 登录验证](https://wiki.tuna.tsinghua.edu.cn/SshKeyHowto)\n5. [ssh 公钥方式认证攻略](http://tech.idv2.com/2006/10/21/ssh-rsa-auth/)\n[SSH隧道加密技术](http://en.flossmanuals.net/circumvention-tools-zh/advanced-techniques/ssh/)\n[MD5 wikipedia](http://zh.wikipedia.org/wiki/MD5)\n\n关于SSH的具体配置以及在windows下通过SSH远程登录Linux服务器的详细操作过程请看下一篇文章[SSH配置-在Windows下远程登陆Linux服务器Shell]().","source":"_posts/ssh_overview.md","raw":"title: \"SSH连接认证原理概述\"\ndate: 2013-12-30 13:54:46\ntags: [ssh]\n---\n\n# SSH简要介绍\n\nSSH的英文全称为Secure Shell，是IETF（Internet Engineering Task Force）的Network Working Group所制定的一族协议，其目的是要在非安全网络上提供安全的远程登录和其他安全网络服务。<sup>[[1]](http://blog.csdn.net/oncoding/article/details/4365062)</sup>用于在主机之间建立起安全连接, 并加密传输内容, 以达到安全的远程访问, 操作以及数据传输的目的.\n\nSSH主要有两个特点: 1. 安全性 2. 传输速度快\n\n为什么要强调SSH的安全特性, 因为传统的网络服务程序，如 FTP、POP 和 Telnet 其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。 而 SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。透过 SSH 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗。<sup>[[2]](http://biaobiaoqi.me/blog/2013/04/19/use-ssh/)</sup>\n\nSSH的传输速度快是因为SSH传输的数据都是经过压缩的, 自然传输速度快.\n\n# SSH认证原理简述\n\n在介绍SSH具体的认证原理之前, 先简单的介绍下关于公钥和密钥加密的概念.所谓的公钥加密 (public-key cryptography)，或非对称密钥加密 (asymmetric key cryptography) 是一类广泛使用的加密算法。这类算法使用一对(pair)密钥即**公钥 (public key)** 和**私钥 (private key)**。 其中公钥可以随便分发，只用于加密 (encryption)，私钥则只由一人持有，只用于解密。通过公钥加密过的密文使用密钥可以轻松解密, 但根据公钥来猜测私钥却十分困难.\n\n因此, 我们可以很容易的发现这么一个事实, 一个消息在用公钥加密后, 哪怕在传输中被人截获, 如果没有私钥, 是无法解密获得其内容的, 只有拥有私钥的人才能成功解密消息. 所以私钥应该由消息的接收方紧紧攥在手里, 不应让他人得知.\n\n公钥加密的关键点在于，一方面，公钥加密是可逆的，但是不能用公钥推断出私钥。显然数学上，已知一个公钥是能够算出对应私钥的，但是只要设计足够好的加密算法（以及使用足够复杂的密钥对），使得不能在可以接受的时间内破译即可。\n\nRSA<sup>[[3]](http://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95)</sup> 是一种常见的公钥加密算法。RSA 的工作原理依赖于如下事实：破译 RSA 私钥需要对某些极大的整数进行因数分解，而目前尚未找到快速的对极大整数作因数分解的算法。换言之，如果有人找到了这样的算法，那么全世界的 RSA 加密都会失效。\n\nRSA是由Ron Rivest, Adi Shamir, Leonard Adleman三人在1978年首次提出的.三人并因此项工作荣获了2002年[Turing Award](http://en.wikipedia.org/wiki/Turing_award). Rivest还是[算法导论](http://book.douban.com/subject/1885170/)的作者之一, 书中在31章对RSA系统的原理进行了简要说明, 系统实现中利用到了数论中的[Euler-Fermat theorem](http://en.wikipedia.org/wiki/Euler%E2%80%93Fermat_theorem).<sup>[[4]](https://wiki.tuna.tsinghua.edu.cn/SshKeyHowto)</sup>\n\n一个基于RSA的**公钥**大概如下所示\n```\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAvSkEZ0fKXRqQ/DkjCfsAETsQgV8OR/RVQmwBk/J5IWoknf8Dr\ny5kOs+1bnx9zaf8oIcVuXf0jRxTccLBOXiReFJE4aD2rWO33sqA0M4qP1ESYhsU4yokRA0IMDJ62JUv2cWVJg\nGpeQriol2t7mH8E6aB8OiJ+NgRbh6+/0LbtQs40VA2+W5PtaBwT4sjv9LOHIdzQcsEeCM8MIHqmXHst7/JuVI\ni7wLCxB7Ur8qtwZ2/Ii8Ckjfo6mikWmSh6mRMq9qn0FkMkPCcpm8o4f1zJWOuf+RnjPpopFTqIa8JssMHJMuQ\ncCm3EHDkBHjLk/SkidWOzqOtSvUeGKieWiijuw== username@localhost.localdomain\n```\n与之配对的**私钥**形如\n```\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAvSkEZ0fKXRqQ/DkjCfsAETsQgV8OR/RVQmwBk/J5IWoknf8D\nry5kOs+1bnx9zaf8oIcVuXf0jRxTccLBOXiReFJE4aD2rWO33sqA0M4qP1ESYhsU\n4yokRA0IMDJ62JUv2cWVJgGpeQriol2t7mH8E6aB8OiJ+NgRbh6+/0LbtQs40VA2\n+W5PtaBwT4sjv9LOHIdzQcsEeCM8MIHqmXHst7/JuVIi7wLCxB7Ur8qtwZ2/Ii8C\nkjfo6mikWmSh6mRMq9qn0FkMkPCcpm8o4f1zJWOuf+RnjPpopFTqIa8JssMHJMuQ\ncCm3EHDkBHjLk/SkidWOzqOtSvUeGKieWiijuwIBIwKCAQEAjITesx9jIJdkY5go\nqFQOrbbZD6Wy1l27ra9RoRqF3k7ZX2z7bDEXQaGcuHm8iiUEzwVDVpOfuUg9/LyP\nicdHffP4p5wk9dUMPxoWjHvk3pP/BwzNsBCtOd3LkYSVxXYji9SaroTkS0nqL3jK\nWVAaV72FGVxJPINAJer0SJgQ7OJ7f0kZJYoPwG0VpMTLOsmulH7/M5e9i+kwDLmH\n+TMvJ3y8gXjc/Sj5UqN/JQIY+h07UxYGvoju/isqFHh8OmahsjJ3Nb3QsUEkC/Kj\ncKG2K+mUzTe/4/XQuqMadrjX82QF2b2gL+cdvUAwLn55boXmrtUzxEPo4xxiDNzY\nAbYxSwKBgQDxIkaa+EPSJXYej/5YzJLJLVsnb9ygqe/0fM0x022J6Z+0Yq9AIwJ7\nN7dvMgNSROLoJ17Oij/N7aoiAZy1KHg1vOoqx6T6BClay8I1+dOsbY6Fi0QbkZeI\nRr6CDueq5PBR8j/oghNhQeFfJUEICBFU6Z7+uFwxuAtQqqdFHyDhSwKBgQDI0nX6\nJz9oW+Y+dXAvhpL8Yln0R45ufiqatkTQgGbeZ70XlKeR7VzQiXecy/XDteJCMlnv\n4BhjHL967nSAmrCza13I3eXIYxbzypeNC57bVVXM9BBTg5f4nWwTN+I8Gd/BA5Y8\nmekQPBuSyAOp7ULAecjKZrD9Jhw1vybT/aYxUQKBgQDcdxv7ZqRoXMPEK+E7PrIX\nBOWgZkYPPEkaC7RKz+8fAXwSo15mhmirK6BlqhGqTZxB+BwqjQcirWhZmxLuxeo/\nwqo1vdiqEm7z7X5dPC8+kA1G5bqc3OJQtbV+OYNaaupZjQc6+pVgPDvEtFi24s4E\nfdMyB6S/vjY7H67gHHXVSwKBgQC3m9mUQSQHpHq8wyS9vN4olG+AQWxHw88uXYC+\noUgbzI+gh+mp/ZawCKff0GurnvrALgkV1DON0SQYn4B1lL7P7SKLw5BCLrXmNZHg\nCp/eeegL19RpnOK3a1t/SQlbhV7cWw0ENPJX/HD7OocBwvszoouxvPmW/kWte5E2\n```\nSSH 连接是 `C/S` 模型, 客户端发出连接申请, 服务器对客户端进行验证, 再考虑是否接受连接申请.\n\n# SSH具体认证过程\n\nSSH提供了两种认证的方式, 分别为:\n\n## Password认证\n\n即账号口令验证, SSH的实现方式是,\n\n1. 客户端向 ssh 服务器发出请求, 服务器将自己的公钥返回给客户端;\n2. 客户端用服务器的公钥加密自己的登录密码, 再将信息发送给服务器;\n3. 服务器接收到客户端传送的密码, 用自己的私钥解码, 如果结果正确, 则同意登录, 建立起连接.\n\n这种方式还是存在漏洞, 中间人可以假扮成服务器, 骗取客户端的密码.<sup>[[2]](http://biaobiaoqi.me/blog/2013/04/19/use-ssh/)</sup>而且在每次登陆的时候都需要输入密码, 所以一般不采用该验证方式.\n\n## Public Key认证\n\nPublic Key认证利用公钥私钥对进行认证, 在请求连接时不需要输入密码, 并且由于整个请求连接和通信过程全程加密, 因此安全性高.\n\nSSH协议第二版中有RSA和DSA两种算法认证, 其中RSA加密验证比较常用. RSA加密验证方式，充分利用了非对称加密体系的优势，不需要在网络传输密码，完全杜绝了中间人攻击的可能。\n\n认证的具体步骤如下:\n\n### 准备工作\n\n1. 客户端先使用 `ssh-keygen` 命令, 生成公钥和私钥. 按照默认配置, 私钥会被保存在`~/.ssh/id_rsa` 中, 公钥则在`~/.ssh/id_rsa.pub` 中.\n\n2. 客户端通过安全的方式(一般通过scp(Secure Copy Protocol)方式或者U盘拷贝的方式)将公钥发送给服务器. 在服务器端, 将客户端发的公钥写入到`~/.ssh/authorized_keys` 文件末尾.\n\n*(其实公钥和私钥不是必须在客户端生成, 在服务器端生成也是可以的, 在哪生成的对公钥和私钥并没有任何影响, 重要的是二者是配对的, 而准备阶段其实是要保证这么一个事实, 即服务器端握有公钥, 并在对应账户的家目录下的`.ssh/authorized_keys`文件中保存以便验证程序访问. 请求端握有私钥. 至于为什么要将公钥和私钥这么分配, 接下来将会解释.)*\n\n### 建立连接\n\n在建立连接的时候, 涉及到2对密钥, 其中一对为准备阶段产生并分配好的密钥对, 另一对为服务器在接收到一个连接请求时生成的密钥对. 为了讲述方便, 我们将这两组密钥对表示如下\n\n|Symbol|Description|\n|:-:|:-|\n|PubC| 客户端密钥对应的公钥|\n|PrvC| 客户端握有的私钥|\n|PubS| 服务器端产生的公钥|\n|PrvS| 服务器端产生的私钥|\n\n1. **认证**\n\n①服务器生成随机数(称之为challenge) `x`, 并用 `PubC` 加密后生成结果 `s(x)`, 发送给客户端.\n\n②客户端使用 `PrvC` 解密 `s(x)` 得到 `x`, 再将`x`用`PubS`加密发送回服务器端.\n\n③服务器端使用`PrvS`解密得到`x`, 进行核对, 如果正确则链接正式成立.\n\n2. **通信加密**\n\n在请求连接前, 服务器端和客户端拥有的密钥为\n```\nServer          |           Client\n--------------------------------------\nPubC            |            PrvC\n```\n\n①客户端发出申请. 服务器会产生一组 `session` 密钥对, 即`PubS`和`PrvS`.\n\n此时服务器端和客户端拥有的密钥如下所示\n```\nServer           |           Client\n-------------------------------------\nPubC             |            PrvC\nPubS             |\nPrvS             |\n```\n\n②服务器端利用客户端的公钥`PubC`对 `session` 公钥PubS进行加密后发送给客户端.\n\n③客户端用自己的密钥`PrvC`解密信息，得到 `session` 公钥`PubS`。\n```\nServer           |           Client\n-------------------------------------\nPubC             |            PubS\nPrvS             |            PrvC\nPubS             |\n```\n\n④之后的数据交互，都通过对方方公钥加密，对方收到信息后，用其私钥解密，实现安全加密过程。<sup>[[2]](http://biaobiaoqi.me/blog/2013/04/19/use-ssh/)[[5]](http://tech.idv2.com/2006/10/21/ssh-rsa-auth/)</sup>\n\n\n# 参考引用\n\n至此, 关于SSH原理性部分的讲解结束. 以下是相关的参考引用出处:\n\n1. [SSH协议基础](http://blog.csdn.net/oncoding/article/details/4365062)\n2. [SSH原理和使用](http://biaobiaoqi.me/blog/2013/04/19/use-ssh/)\n3. [RSA加密算法](http://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95)\n4. [使用 RSA 密钥对进行 SSH 登录验证](https://wiki.tuna.tsinghua.edu.cn/SshKeyHowto)\n5. [ssh 公钥方式认证攻略](http://tech.idv2.com/2006/10/21/ssh-rsa-auth/)\n[SSH隧道加密技术](http://en.flossmanuals.net/circumvention-tools-zh/advanced-techniques/ssh/)\n[MD5 wikipedia](http://zh.wikipedia.org/wiki/MD5)\n\n关于SSH的具体配置以及在windows下通过SSH远程登录Linux服务器的详细操作过程请看下一篇文章[SSH配置-在Windows下远程登陆Linux服务器Shell]().","slug":"ssh_overview","published":1,"updated":"2015-04-08T12:20:28.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o94000skadysa8qv6dh"},{"title":"SSH配置-在Windows下远程登陆Linux服务器Shell","date":"2013-12-31T09:24:47.000Z","_content":"\n# Background\n\n这几天需要在实验室空闲电脑上配置一个samba服务器用于共享文件, 而那台电脑所在座位上刚好来了一个人临时要在这边待几个星期, 因此无法直接在服务器前进行配置, 于是乎想到了利用SSH来远程登陆服务器进行操作. 其实说是远程, 也就隔了不到5米, 但是通过自己的电脑操控另一台电脑的感觉真的还是很美妙的. 想象一下此刻你正处于地球上不知道哪个地方, 然后通过庞大的互联网, 连接到了与你距离十万八千里的某台主机上进行操作, 想想还有点小激动呢.\n\n---\n\n# 系统环境\n\n服务器: CentOS 6.4 x86_64    OpenSSH\nSSH客户机: Windows 7 64bit    PuTTY\n\n---\n\n# 安装启动SSH服务\n\n在CentOS上查看是否安装了ssh相关的包.\n```\n[fancyseeker@localhost ~]$ rpm -qa | grep ssh\nopenssh-5.3p1-94.el6.x86_64\nopenssh-askpass-5.3p1-94.el6.x86_64\nlibssh2-1.4.2-1.el6.x86_64\nopenssh-server-5.3p1-94.el6.x86_64\nopenssh-clients-5.3p1-94.el6.x86_64\nopenssh-ldap-5.3p1-94.el6.x86_64\n```\n如果没有安装, 那么需要手动安装下\n```\n# yum install openssh*\n```\n\n2. 设置开机启动SSH服务\n```\n# chkconfig sshd on\n```\n3. 开启SSH服务\n```\n# /etc/init.d/sshd start\n```\n4. 查看SSH服务运行状态\n```\n# /etc/init.d/sshd status\n```\n\n---\n\n# 配置SSH服务\n\nSSH服务配置 SSH服务的配置文件主要有2个, 分别为 `/etc/ssh/ssh_config` 以及 `/etc/ssh/sshd_config`\n\n## ssh_config配置文件\n\n这里我们先对`ssh_config`配置文件进行修改, 添加或修改如下几项\n```\n# 使用RSA算法进行安全验证\nRSAAuthentication yes\n# 关闭密码验证\nPasswordAuthentication no\n# 强制使用的SSH2\nProtocol 2\n```\n由于接下来我们会选用RSA算法来产生密钥对, 因此将`RSAAuthentication`设置成`yes`, `PasswordAuthentication`设置成`no`使得客户端无法通过不安全的账户密码方式登录, 增强安全性. `Protocol 2`设定强制使用SSH的第二版. 当然, 如果希望仅在某一个网段内进行SSH连接, 那么可以设置 `Host *`选项, 将`*`换成允许的网段, 例如`192.168.1.`代表IP地址为`192.168.1.x`的电脑可以进行SSH连接, 而其他IP地址的电脑则无法连接. 关于`ssh_config`文件的具体选项的解释如下所示<sup>[[1](http://blog.lizhigang.net/archives/249)</sup>\n```\nHost *\n# 选项“Host”只对能够匹配后面字串的计算机有效。“*”表示所有的计算机。\nForwardAgent no\n# “ForwardAgent”设置连接是否经过验证代理（如果存在）转发给远程计算机。\nForwardX11 no\n# “ForwardX11”设置X11连接是否被自动重定向到安全的通道和显示集（DISPLAY set）。\nRhostsAuthentication no\n# “RhostsAuthentication”设置是否使用基于rhosts的安全验证。\nRhostsRSAAuthentication no\n# “RhostsRSAAuthentication”设置是否使用用RSA算法的基于rhosts的安全验证。\nRSAAuthentication yes\n# “RSAAuthentication”设置是否使用RSA算法进行安全验证。\nPasswordAuthentication no\n# “PasswordAuthentication”设置是否使用口令验证。\nFallBackToRsh no\n# “FallBackToRsh”设置如果用ssh连接出现错误是否自动使用rsh。\nUseRsh no\n# “UseRsh”设置是否在这台计算机上使用“rlogin/rsh”。\nBatchMode no\n# “BatchMode”如果设为“yes”，passphrase/password（交互式输入口令）的提示将被禁止。当不能交互式输入口令的时候，这个选项对脚本文件和批处理任务十分有用。\nCheckHostIP yes\n# “CheckHostIP”设置ssh是否查看连接到服务器的主机的IP地址以防止DNS欺骗。建议设置为“yes”。\nStrictHostKeyChecking no\n# “StrictHostKeyChecking”如果设置成“yes”，ssh就不会自动把计算机的密匙加入“$HOME/.ssh/known_hosts”文件，并且一旦计算机的密匙发生了变化，就拒绝连接。\nIdentityFile ~/.ssh/identity\n# “IdentityFile”设置从哪个文件读取用户的RSA安全验证标识。\nPort 22\n# “Port”设置连接到远程主机的端口。\nCipher blowfish\n# “Cipher”设置加密用的密码。\nEscapeChar ~\n# “EscapeChar”设置escape字符。\n```\n\n## sshd_config配置文件\n\n在sshd_config文件中添加或修改如下选项\n```\nPermitRootLogin no\nPermitEmptyPasswords no\n```\n出于安全性的考虑, 我们不允许客户端直接用root账户进行登录, 故将`PermitRootLogin`设置成`no`(当然, 可以在登陆了其他用户后切换至root用户), 同时不允许空密码. `sshd_config`文件的其它具体选项的解释如下所示<sup>[[1](http://blog.lizhigang.net/archives/249)</sup>\n```\nPort 22\n# “Port”设置sshd监听的端口号。\nListenAddress 192.168.1.1\n# “ListenAddress”设置sshd服务器绑定的IP地址。\nHostKey /etc/ssh/ssh_host_key\n# “HostKey”设置包含计算机私人密匙的文件。\nServerKeyBits 1024\n# “ServerKeyBits”定义服务器密匙的位数。\nLoginGraceTime 600\n# “LoginGraceTime”设置如果用户不能成功登录，在切断连接之前服务器需要等待的时间（以秒为单位）。\nKeyRegenerationInterval 3600\n# “KeyRegenerationInterval”设置在多少秒之后自动重新生成服务器的密匙（如果使用密匙）。重新生成密匙是为了防止用盗用的密匙解密被截获的信息。\nPermitRootLogin no\n# “PermitRootLogin”设置root能不能用ssh登录。这个选项一定不要设成“yes”。\nIgnoreRhosts yes\n# “IgnoreRhosts”设置验证的时候是否使用“rhosts”和“shosts”文件。\nIgnoreUserKnownHosts yes\n# “IgnoreUserKnownHosts”设置ssh daemon是否在进行RhostsRSAAuthentication安全验证的时候忽略用户的“$HOME/.ssh/known_hosts”\nStrictModes yes\n# “StrictModes”设置ssh在接收登录请求之前是否检查用户家目录和rhosts文件的权限和所有权。这通常是必要的，因为新手经常会把自己的目录和文件设成任何人都有写权限。\nX11Forwarding no\n# “X11Forwarding”设置是否允许X11转发。\nPrintMotd yes\n# “PrintMotd”设置sshd是否在用户登录的时候显示“/etc/motd”中的信息。\nSyslogFacility AUTH\n# “SyslogFacility”设置在记录来自sshd的消息的时候，是否给出“facility code”。\nLogLevel INFO\n# “LogLevel”设置记录sshd日志消息的层次。INFO是一个好的选择。查看sshd的man帮助页，已获取更多的信息。\nRhostsAuthentication no\n# “RhostsAuthentication”设置只用rhosts或“/etc/hosts.equiv”进行安全验证是否已经足够了。\nRhostsRSAAuthentication no\n# “RhostsRSA”设置是否允许用rhosts或“/etc/hosts.equiv”加上RSA进行安全验证。\nRSAAuthentication yes\n# “RSAAuthentication”设置是否允许只有RSA安全验证。\nPasswordAuthentication no\n# “PasswordAuthentication”设置是否允许口令验证。\nPermitEmptyPasswords no\n# “PermitEmptyPasswords”设置是否允许用口令为空的帐号登录。\nAllowUsers admin\n# “AllowUsers”的后面可以跟着任意的数量的用户名的匹配串（patterns）或user@host这样的匹配串，这些字符串用空格隔开。主机名可以是DNS名或IP地址。\n```\n\n---\n\n# 密钥对配置\n\n在上面的设置中, 我们已经禁止了用户通过提供账号密码这种不太安全的方式进行登录, 因此, 用户只能通过公钥认证这种方式登录. 公钥认证登录方式相对而言安全, 而且方便, 不要输入密码. 关于公钥认证的原理请看上一篇文章[<SSH连接认证原理概述>](). 接下来, 需要生成密钥对, 即一组配对的公钥`Public Key`和私钥`Private Key`. 登录一个普通用户, 利用`$ ssh-keygen -t rsa`命令为其生成密钥对, `-t rsa`开关代表利用RSA算法产生密钥对.\n```\n[fancyseeker@localhost ~]$ who \nfancyseeker pts/0 2013-12-30 17:49 (192.168.1.9)\n[fancyseeker@localhost ~]$ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/fancyseeker/.ssh/id_rsa): //此处设置私钥存放目录,直接回车即可,将私钥保存在~/.ssh/id_rsa\nEnter passphrase (empty for no passphrase): //此处设置公钥认证密码,直接回车表示不设置\nEnter same passphrase again:\nYour identification has been saved in /home/fancyseeker/.ssh/id_rsa. //私钥\nYour public key has been saved in /home/fancyseeker/.ssh/id_rsa.pub. //公钥\nThe key fingerprint is:\n9b:f3:bf:f6:39:70:c9:66:d2:1c:99:c6:71:6a:b8:a9 fancyseeker@localhost.localdomain\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|                 |\n|              . .|\n|             o * |\n|            . O  |\n|        S    O o |\n|         o  = O  |\n|        +  . *   |\n|         oE . .. |\n|          .oooo. |\n+-----------------+\n```\n注: 运行`ssh-keygen`命令并不需要切换至特定的用户 (比如你想要通过sample_user这个用户来进行ssh登陆, 但是并不一定要求说需要切换至sample_user来执行`ssh-keygen`这个命令), 同样的也不需要指定在服务器还是客户端执行, 执行`ssh-keygen`的目的仅仅是为了得到一个密钥对, 与谁来执行, 在哪执行没有特别的关系. 当然, 生成的密钥对会默认存放在当前用户的`~/.ssh`文件夹下, 因此如果用特定用户来执行`ssh-keygen`会省事很多. 在得到密钥对之后, 将公钥和私钥设置好权限之后放置在合适的目录下即可. 具体的权限和位置请看接下来的部分.\n\n这时候, 可以查看下`~/.ssh`目录下生成的公钥和私钥文件.\n```\n[fancyseeker@localhost .ssh]$ ll ~/.ssh\n-rw------- 1 fancyseeker fancyseeker 1679 Dec 31 14:12 id_rsa\n-rw-r--r-- 1 fancyseeker fancyseeker  410 Dec 31 14:12 id_rsa.pub\n```\n这里可以看到`ssh-keygen`命令生成了公钥 **`id_rsa.pub`** 和私钥 **`id_rsa`**文件.\n\n接下来, 需要做的就是把公钥文件留在服务器特定用户的 `~/.ssh` 文件夹下, 而将私钥文件放置于客户端.\n\n## 公钥处理\n\n首先, 将公钥 `id_rsa.pub` 文件重命名为 **`authorized_keys`**放置于服务器端指定登陆用户的 `~/.ssh` 文件夹下.\n```\n[fancyseeker@localhost .ssh]$ cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n```\n这里有几点要说明下, 关于为什么要将公钥名称更改为`authorized_keys`, 这是因为ssh服务会在客户端发起连接请求的时候在对应用户家目录的`.ssh`文件夹下寻找 `authorized_keys` 文件, 并打开访问文件中包含的公钥. 除此之外, `authorized_keys` 文件中可以包含多个公钥, 因此上述的命令中用了`>>`指令将之前生成的公钥追加至`authorized_keys`文件的尾部.\n\n为了使登陆更加安全, 我们需要将公钥的权限设置为只有所有者可读, 同时删除之前的 `id_rsa.pub` 文件, 即\n```\n[fancyseeker@localhost .ssh]$ chmod 400 ~/.ssh/authorized_keys\n[fancyseeker@localhost .ssh]$ rm -f id_rsa.pub\n[fancyseeker@localhost .ssh]$ ll\n-r-------- 1 fancyseeker fancyseeker  410 Dec 29 20:51 authorized_keys\n-rw------- 1 fancyseeker fancyseeker 1679 Dec 31 14:12 id_rsa\n```\n至此, 服务器端的配置结束. 接下来介绍Windows客户端PuTTY的配置和使用.\n\n---\n\n# Windows下使用PuTTY登陆\n\n[PuTTY](http://www.putty.org/)是Windows环境下一个简单易用的SSH客户端软件.\n\n首先, 我们需要利用一种安全的方式(可以用U盘, 移动硬盘之类的存储介质, 也可以使用scp(secure copy)协议进行安全传输), 将服务器端产生的私钥文件 `id_rsa` 移动到客户端上来.\n\n## 转换私钥格式\n由于服务器端产生的私钥文件`id_rsa`的格式PuTTY无法识别, 因此需要先利用`PuTTYgen`工具转换成PuTTY识别的格式.(PuTTYgen工具需要[此处](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html)下载)\n\n运行PuTTYgen工具, 点击 Load, 选择要转换的私钥文件.\n\n![PuTTYgen](/img/ssh_connect/puttygen.jpg)\n\n找到之前存放私钥文件的地方.\n\n![](/img/ssh_connect/PuTTYgen_all.jpg)\n\n这里需要将文件名后面的文件类型更改为All File(*.*)才能看到服务器端产生的私钥文件.\n\n![](/img/ssh_connect/PuTTYgen_pk.jpg)\n\n此时, PuTTYgen会要求你输入passphrase口令, 该口令是之前在服务器端利用`ssh-keygen`生成密钥对时,由用户输入的一个口令, 如果为空, 直接回车即可.\n\n![](/img/ssh_connect/passphrase.jpg)\n\n输入口令, 点击ok, PuTTYgen会提示私钥格式转换成功\n\n![](/img/ssh_connect/pksucc.jpg)\n\n点击 Save private key 将转换成功后的 ppk 文件保存至自己想要的指定位置. 此时, 私钥的转换工作结束, 接下来配置PuTTY.\n\n## 导入私钥\n\n双击打开PuTTY, 在左侧的列表中找到`Connection-SSH-Auth`, 在右边的窗口中, 选择需要导入的私钥.\n\n![](/img/ssh_connect/PuTTYconfig.jpg)\n\n然后找到刚才利用PuTTYgen转换得到的ppk私钥文件\n\n![](/img/ssh_connect/pkpos.jpg)\n\n## 配置会话Session\n\n之后点击左侧列表中的Session, 来配置SSH会话, 即连接的具体参数\n\n![](/img/ssh_connect/session.jpg)\n\n此处需要配置服务器的IP地址, 以及要保存的连接名称(任意取), 设定完后点击右侧的 `Save` 按钮将连接保存, 这样下次就不需要设置而能快速访问了.\n\n至此, SSH的服务器端和客户端的配置全部结束, 接下来是测试过程.\n\n## 测试登录\n\n双击打开PuTTY, 选中之前我们保存的名为 Whatever you like 的连接, 点击`Open`, 发起SSH连接\n![](/img/ssh_connect/testPuTTY.jpg)\n我们会看到一个黑色的连接对话框, 在输入要登陆的用户名以及在生成密钥对时要求的passphrase后, 成功地登陆了远程服务器.\n\n![](/img/ssh_connect/sshlogin.jpg)\n\n有几点需要在本文的最后稍微做下说明.\n1. SSH配置的关键在于首先需要先生成一个密钥对, 该密钥对是由哪个用户生成以及是在服务器端生成还是在客户端生成的都不重要, 重要的是最后这个密钥对中的公钥必须要在服务器端的特定用户家目录下的.ssh文件夹中,并命名为authorized_keys,而私钥则必须经由客户端转换后导入客户端软件,这样才能满足SSH连接的需求.\n2. 服务器端的公钥权限不对,无法被读取有可能导致在进行SSH登陆的时候被服务器端拒绝.\n3. 一个萝卜一个坑, 不同用户不可共同使用同一组密钥对, 否则可能导致登陆失败.\n4. 服务器之所以接受该用户利用SSH登陆是因为在服务器端的改用户家目录的.ssh文件夹下有公钥文件, 并且和发起请求客户端的私钥文件是配对的. 显然的, 如果发起请求的用户在服务器端的家目录.ssh文件夹下没有公钥文件, 那么便无法成功登陆.\n\n至此, 本文结束.","source":"_posts/ssh_connect.md","raw":"title: \"SSH配置-在Windows下远程登陆Linux服务器Shell\"\ndate: 2013-12-31 17:24:47\ntags: [ssh, shell, PuTTY]\n---\n\n# Background\n\n这几天需要在实验室空闲电脑上配置一个samba服务器用于共享文件, 而那台电脑所在座位上刚好来了一个人临时要在这边待几个星期, 因此无法直接在服务器前进行配置, 于是乎想到了利用SSH来远程登陆服务器进行操作. 其实说是远程, 也就隔了不到5米, 但是通过自己的电脑操控另一台电脑的感觉真的还是很美妙的. 想象一下此刻你正处于地球上不知道哪个地方, 然后通过庞大的互联网, 连接到了与你距离十万八千里的某台主机上进行操作, 想想还有点小激动呢.\n\n---\n\n# 系统环境\n\n服务器: CentOS 6.4 x86_64    OpenSSH\nSSH客户机: Windows 7 64bit    PuTTY\n\n---\n\n# 安装启动SSH服务\n\n在CentOS上查看是否安装了ssh相关的包.\n```\n[fancyseeker@localhost ~]$ rpm -qa | grep ssh\nopenssh-5.3p1-94.el6.x86_64\nopenssh-askpass-5.3p1-94.el6.x86_64\nlibssh2-1.4.2-1.el6.x86_64\nopenssh-server-5.3p1-94.el6.x86_64\nopenssh-clients-5.3p1-94.el6.x86_64\nopenssh-ldap-5.3p1-94.el6.x86_64\n```\n如果没有安装, 那么需要手动安装下\n```\n# yum install openssh*\n```\n\n2. 设置开机启动SSH服务\n```\n# chkconfig sshd on\n```\n3. 开启SSH服务\n```\n# /etc/init.d/sshd start\n```\n4. 查看SSH服务运行状态\n```\n# /etc/init.d/sshd status\n```\n\n---\n\n# 配置SSH服务\n\nSSH服务配置 SSH服务的配置文件主要有2个, 分别为 `/etc/ssh/ssh_config` 以及 `/etc/ssh/sshd_config`\n\n## ssh_config配置文件\n\n这里我们先对`ssh_config`配置文件进行修改, 添加或修改如下几项\n```\n# 使用RSA算法进行安全验证\nRSAAuthentication yes\n# 关闭密码验证\nPasswordAuthentication no\n# 强制使用的SSH2\nProtocol 2\n```\n由于接下来我们会选用RSA算法来产生密钥对, 因此将`RSAAuthentication`设置成`yes`, `PasswordAuthentication`设置成`no`使得客户端无法通过不安全的账户密码方式登录, 增强安全性. `Protocol 2`设定强制使用SSH的第二版. 当然, 如果希望仅在某一个网段内进行SSH连接, 那么可以设置 `Host *`选项, 将`*`换成允许的网段, 例如`192.168.1.`代表IP地址为`192.168.1.x`的电脑可以进行SSH连接, 而其他IP地址的电脑则无法连接. 关于`ssh_config`文件的具体选项的解释如下所示<sup>[[1](http://blog.lizhigang.net/archives/249)</sup>\n```\nHost *\n# 选项“Host”只对能够匹配后面字串的计算机有效。“*”表示所有的计算机。\nForwardAgent no\n# “ForwardAgent”设置连接是否经过验证代理（如果存在）转发给远程计算机。\nForwardX11 no\n# “ForwardX11”设置X11连接是否被自动重定向到安全的通道和显示集（DISPLAY set）。\nRhostsAuthentication no\n# “RhostsAuthentication”设置是否使用基于rhosts的安全验证。\nRhostsRSAAuthentication no\n# “RhostsRSAAuthentication”设置是否使用用RSA算法的基于rhosts的安全验证。\nRSAAuthentication yes\n# “RSAAuthentication”设置是否使用RSA算法进行安全验证。\nPasswordAuthentication no\n# “PasswordAuthentication”设置是否使用口令验证。\nFallBackToRsh no\n# “FallBackToRsh”设置如果用ssh连接出现错误是否自动使用rsh。\nUseRsh no\n# “UseRsh”设置是否在这台计算机上使用“rlogin/rsh”。\nBatchMode no\n# “BatchMode”如果设为“yes”，passphrase/password（交互式输入口令）的提示将被禁止。当不能交互式输入口令的时候，这个选项对脚本文件和批处理任务十分有用。\nCheckHostIP yes\n# “CheckHostIP”设置ssh是否查看连接到服务器的主机的IP地址以防止DNS欺骗。建议设置为“yes”。\nStrictHostKeyChecking no\n# “StrictHostKeyChecking”如果设置成“yes”，ssh就不会自动把计算机的密匙加入“$HOME/.ssh/known_hosts”文件，并且一旦计算机的密匙发生了变化，就拒绝连接。\nIdentityFile ~/.ssh/identity\n# “IdentityFile”设置从哪个文件读取用户的RSA安全验证标识。\nPort 22\n# “Port”设置连接到远程主机的端口。\nCipher blowfish\n# “Cipher”设置加密用的密码。\nEscapeChar ~\n# “EscapeChar”设置escape字符。\n```\n\n## sshd_config配置文件\n\n在sshd_config文件中添加或修改如下选项\n```\nPermitRootLogin no\nPermitEmptyPasswords no\n```\n出于安全性的考虑, 我们不允许客户端直接用root账户进行登录, 故将`PermitRootLogin`设置成`no`(当然, 可以在登陆了其他用户后切换至root用户), 同时不允许空密码. `sshd_config`文件的其它具体选项的解释如下所示<sup>[[1](http://blog.lizhigang.net/archives/249)</sup>\n```\nPort 22\n# “Port”设置sshd监听的端口号。\nListenAddress 192.168.1.1\n# “ListenAddress”设置sshd服务器绑定的IP地址。\nHostKey /etc/ssh/ssh_host_key\n# “HostKey”设置包含计算机私人密匙的文件。\nServerKeyBits 1024\n# “ServerKeyBits”定义服务器密匙的位数。\nLoginGraceTime 600\n# “LoginGraceTime”设置如果用户不能成功登录，在切断连接之前服务器需要等待的时间（以秒为单位）。\nKeyRegenerationInterval 3600\n# “KeyRegenerationInterval”设置在多少秒之后自动重新生成服务器的密匙（如果使用密匙）。重新生成密匙是为了防止用盗用的密匙解密被截获的信息。\nPermitRootLogin no\n# “PermitRootLogin”设置root能不能用ssh登录。这个选项一定不要设成“yes”。\nIgnoreRhosts yes\n# “IgnoreRhosts”设置验证的时候是否使用“rhosts”和“shosts”文件。\nIgnoreUserKnownHosts yes\n# “IgnoreUserKnownHosts”设置ssh daemon是否在进行RhostsRSAAuthentication安全验证的时候忽略用户的“$HOME/.ssh/known_hosts”\nStrictModes yes\n# “StrictModes”设置ssh在接收登录请求之前是否检查用户家目录和rhosts文件的权限和所有权。这通常是必要的，因为新手经常会把自己的目录和文件设成任何人都有写权限。\nX11Forwarding no\n# “X11Forwarding”设置是否允许X11转发。\nPrintMotd yes\n# “PrintMotd”设置sshd是否在用户登录的时候显示“/etc/motd”中的信息。\nSyslogFacility AUTH\n# “SyslogFacility”设置在记录来自sshd的消息的时候，是否给出“facility code”。\nLogLevel INFO\n# “LogLevel”设置记录sshd日志消息的层次。INFO是一个好的选择。查看sshd的man帮助页，已获取更多的信息。\nRhostsAuthentication no\n# “RhostsAuthentication”设置只用rhosts或“/etc/hosts.equiv”进行安全验证是否已经足够了。\nRhostsRSAAuthentication no\n# “RhostsRSA”设置是否允许用rhosts或“/etc/hosts.equiv”加上RSA进行安全验证。\nRSAAuthentication yes\n# “RSAAuthentication”设置是否允许只有RSA安全验证。\nPasswordAuthentication no\n# “PasswordAuthentication”设置是否允许口令验证。\nPermitEmptyPasswords no\n# “PermitEmptyPasswords”设置是否允许用口令为空的帐号登录。\nAllowUsers admin\n# “AllowUsers”的后面可以跟着任意的数量的用户名的匹配串（patterns）或user@host这样的匹配串，这些字符串用空格隔开。主机名可以是DNS名或IP地址。\n```\n\n---\n\n# 密钥对配置\n\n在上面的设置中, 我们已经禁止了用户通过提供账号密码这种不太安全的方式进行登录, 因此, 用户只能通过公钥认证这种方式登录. 公钥认证登录方式相对而言安全, 而且方便, 不要输入密码. 关于公钥认证的原理请看上一篇文章[<SSH连接认证原理概述>](). 接下来, 需要生成密钥对, 即一组配对的公钥`Public Key`和私钥`Private Key`. 登录一个普通用户, 利用`$ ssh-keygen -t rsa`命令为其生成密钥对, `-t rsa`开关代表利用RSA算法产生密钥对.\n```\n[fancyseeker@localhost ~]$ who \nfancyseeker pts/0 2013-12-30 17:49 (192.168.1.9)\n[fancyseeker@localhost ~]$ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/fancyseeker/.ssh/id_rsa): //此处设置私钥存放目录,直接回车即可,将私钥保存在~/.ssh/id_rsa\nEnter passphrase (empty for no passphrase): //此处设置公钥认证密码,直接回车表示不设置\nEnter same passphrase again:\nYour identification has been saved in /home/fancyseeker/.ssh/id_rsa. //私钥\nYour public key has been saved in /home/fancyseeker/.ssh/id_rsa.pub. //公钥\nThe key fingerprint is:\n9b:f3:bf:f6:39:70:c9:66:d2:1c:99:c6:71:6a:b8:a9 fancyseeker@localhost.localdomain\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|                 |\n|              . .|\n|             o * |\n|            . O  |\n|        S    O o |\n|         o  = O  |\n|        +  . *   |\n|         oE . .. |\n|          .oooo. |\n+-----------------+\n```\n注: 运行`ssh-keygen`命令并不需要切换至特定的用户 (比如你想要通过sample_user这个用户来进行ssh登陆, 但是并不一定要求说需要切换至sample_user来执行`ssh-keygen`这个命令), 同样的也不需要指定在服务器还是客户端执行, 执行`ssh-keygen`的目的仅仅是为了得到一个密钥对, 与谁来执行, 在哪执行没有特别的关系. 当然, 生成的密钥对会默认存放在当前用户的`~/.ssh`文件夹下, 因此如果用特定用户来执行`ssh-keygen`会省事很多. 在得到密钥对之后, 将公钥和私钥设置好权限之后放置在合适的目录下即可. 具体的权限和位置请看接下来的部分.\n\n这时候, 可以查看下`~/.ssh`目录下生成的公钥和私钥文件.\n```\n[fancyseeker@localhost .ssh]$ ll ~/.ssh\n-rw------- 1 fancyseeker fancyseeker 1679 Dec 31 14:12 id_rsa\n-rw-r--r-- 1 fancyseeker fancyseeker  410 Dec 31 14:12 id_rsa.pub\n```\n这里可以看到`ssh-keygen`命令生成了公钥 **`id_rsa.pub`** 和私钥 **`id_rsa`**文件.\n\n接下来, 需要做的就是把公钥文件留在服务器特定用户的 `~/.ssh` 文件夹下, 而将私钥文件放置于客户端.\n\n## 公钥处理\n\n首先, 将公钥 `id_rsa.pub` 文件重命名为 **`authorized_keys`**放置于服务器端指定登陆用户的 `~/.ssh` 文件夹下.\n```\n[fancyseeker@localhost .ssh]$ cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n```\n这里有几点要说明下, 关于为什么要将公钥名称更改为`authorized_keys`, 这是因为ssh服务会在客户端发起连接请求的时候在对应用户家目录的`.ssh`文件夹下寻找 `authorized_keys` 文件, 并打开访问文件中包含的公钥. 除此之外, `authorized_keys` 文件中可以包含多个公钥, 因此上述的命令中用了`>>`指令将之前生成的公钥追加至`authorized_keys`文件的尾部.\n\n为了使登陆更加安全, 我们需要将公钥的权限设置为只有所有者可读, 同时删除之前的 `id_rsa.pub` 文件, 即\n```\n[fancyseeker@localhost .ssh]$ chmod 400 ~/.ssh/authorized_keys\n[fancyseeker@localhost .ssh]$ rm -f id_rsa.pub\n[fancyseeker@localhost .ssh]$ ll\n-r-------- 1 fancyseeker fancyseeker  410 Dec 29 20:51 authorized_keys\n-rw------- 1 fancyseeker fancyseeker 1679 Dec 31 14:12 id_rsa\n```\n至此, 服务器端的配置结束. 接下来介绍Windows客户端PuTTY的配置和使用.\n\n---\n\n# Windows下使用PuTTY登陆\n\n[PuTTY](http://www.putty.org/)是Windows环境下一个简单易用的SSH客户端软件.\n\n首先, 我们需要利用一种安全的方式(可以用U盘, 移动硬盘之类的存储介质, 也可以使用scp(secure copy)协议进行安全传输), 将服务器端产生的私钥文件 `id_rsa` 移动到客户端上来.\n\n## 转换私钥格式\n由于服务器端产生的私钥文件`id_rsa`的格式PuTTY无法识别, 因此需要先利用`PuTTYgen`工具转换成PuTTY识别的格式.(PuTTYgen工具需要[此处](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html)下载)\n\n运行PuTTYgen工具, 点击 Load, 选择要转换的私钥文件.\n\n![PuTTYgen](/img/ssh_connect/puttygen.jpg)\n\n找到之前存放私钥文件的地方.\n\n![](/img/ssh_connect/PuTTYgen_all.jpg)\n\n这里需要将文件名后面的文件类型更改为All File(*.*)才能看到服务器端产生的私钥文件.\n\n![](/img/ssh_connect/PuTTYgen_pk.jpg)\n\n此时, PuTTYgen会要求你输入passphrase口令, 该口令是之前在服务器端利用`ssh-keygen`生成密钥对时,由用户输入的一个口令, 如果为空, 直接回车即可.\n\n![](/img/ssh_connect/passphrase.jpg)\n\n输入口令, 点击ok, PuTTYgen会提示私钥格式转换成功\n\n![](/img/ssh_connect/pksucc.jpg)\n\n点击 Save private key 将转换成功后的 ppk 文件保存至自己想要的指定位置. 此时, 私钥的转换工作结束, 接下来配置PuTTY.\n\n## 导入私钥\n\n双击打开PuTTY, 在左侧的列表中找到`Connection-SSH-Auth`, 在右边的窗口中, 选择需要导入的私钥.\n\n![](/img/ssh_connect/PuTTYconfig.jpg)\n\n然后找到刚才利用PuTTYgen转换得到的ppk私钥文件\n\n![](/img/ssh_connect/pkpos.jpg)\n\n## 配置会话Session\n\n之后点击左侧列表中的Session, 来配置SSH会话, 即连接的具体参数\n\n![](/img/ssh_connect/session.jpg)\n\n此处需要配置服务器的IP地址, 以及要保存的连接名称(任意取), 设定完后点击右侧的 `Save` 按钮将连接保存, 这样下次就不需要设置而能快速访问了.\n\n至此, SSH的服务器端和客户端的配置全部结束, 接下来是测试过程.\n\n## 测试登录\n\n双击打开PuTTY, 选中之前我们保存的名为 Whatever you like 的连接, 点击`Open`, 发起SSH连接\n![](/img/ssh_connect/testPuTTY.jpg)\n我们会看到一个黑色的连接对话框, 在输入要登陆的用户名以及在生成密钥对时要求的passphrase后, 成功地登陆了远程服务器.\n\n![](/img/ssh_connect/sshlogin.jpg)\n\n有几点需要在本文的最后稍微做下说明.\n1. SSH配置的关键在于首先需要先生成一个密钥对, 该密钥对是由哪个用户生成以及是在服务器端生成还是在客户端生成的都不重要, 重要的是最后这个密钥对中的公钥必须要在服务器端的特定用户家目录下的.ssh文件夹中,并命名为authorized_keys,而私钥则必须经由客户端转换后导入客户端软件,这样才能满足SSH连接的需求.\n2. 服务器端的公钥权限不对,无法被读取有可能导致在进行SSH登陆的时候被服务器端拒绝.\n3. 一个萝卜一个坑, 不同用户不可共同使用同一组密钥对, 否则可能导致登陆失败.\n4. 服务器之所以接受该用户利用SSH登陆是因为在服务器端的改用户家目录的.ssh文件夹下有公钥文件, 并且和发起请求客户端的私钥文件是配对的. 显然的, 如果发起请求的用户在服务器端的家目录.ssh文件夹下没有公钥文件, 那么便无法成功登陆.\n\n至此, 本文结束.","slug":"ssh_connect","published":1,"updated":"2015-04-08T12:48:05.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o96000vkadyn96pw4nf"},{"title":"CentOS和Fedora的源配置及repo文件解析","date":"2012-12-14T07:30:06.000Z","_content":"\n# Background\n\n最近由于项目上的需要, 在VMware上装上了CentOS. 由于学校的校园网无法访问国外的源, 所以CentOS默认的源无法使用, 于是装完系统的第一件事情自然是配源. 对于国内用户来说163的源和sohu的源速度都不错更新的也快, 对于校园网用户来说, 校园网内比较好的源有上海交大(sjtu), 中科大(ustc)... 呵呵, 不知道东北大学(neu)的算不算, 不过我用起来速度也不错.\n\n之前我自己在配Fedora和CentOS的源的时候都是直接google, 然后从网上直接select--copy--paste到本地的repo文件的. 经常找个合适的源文件要找半天, 最令人失望的是有时还不能正常使用. 俗话说的好, \"自己动手, 丰衣足食\"嘛. 所以花了点时间研究了下yum源配置文件的问题, 发现还是蛮简单的.\n\n# Yum与repo文件简介\n\n[Yum(Yellow dog Updater, Modified)](http://en.wikipedia.org/wiki/Yellowdog_Updater,_Modified)是一个在Fedora和RedHat以及SUSE、CentOS中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。\n\n在通过yum更新或者下载软件包的时候, yum需要从\"源\"获得软件包的信息, 所谓的\"源\", 在我理解看来就是一个规范化的软件包下载点, 之所以说它是规范化的是因为\"源\"中有一个列表和一些信息,用于记录\"源\"中软件的发布情况, 这样yum就可以通过列表获取软件包的信息,进而判断一个是否在\"源\"中存在指定软件或者当前的软件包过期需要升级等等.\n\nrepo文件, 由于yum需要利用\"源\"来获取软件包, 那么很自然的, 在本地机器上自然需要有描述\"源\"信息的文件, 这就是repo文件. repo文件存放在`/etc/yum.repo.d/`目录下, 通过root权限对其进行访问或者修改.\n![yum.repo.d](/img/repo_config/repofile.png)\n\n# repo源配置文件解析\n\n这里以网易的163源中的fedora源配置文件作为例子, 简单讲述下repo文件的结构.\n实际上, 获得163的源配置文件是件很容易的事情. 登陆[网易的镜像服务器](http://mirrors.163.com/)\n\n![163 mirror](/img/repo_config/163mirror.png)\n\n可以看到, 网易很人性化的在每个系统条目后面都添加了对应的使用帮助, 点击即可显示:\n![fedora mirror](/img/repo_config/fedorarepo.png)\n按照网页指示的, 我们下载对应的[fedora-163.repo](http://mirrors.163.com/.help/fedora-163.repo)文件下来看看.\n\n```bash\n[fedora]\nname=Fedora $releasever - $basearch - 164.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/os/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch\nenabled=1\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n\n[fedora-debuginfo]\nname=Fedora $releasever - $basearch - Debug - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/debug/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-debug-$releasever&arch=$basearch\nenabled=0\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n\n[fedora-source]\nname=Fedora $releasever - Source - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/source/SRPMS/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-source-$releasever&arch=$basearch\nenabled=0\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n```\n\n可以很明显的看到, repo文件分为若干个不同的节, 每节的内容类似.以上述文件为例,我们对其进行简要的分析.\n\n```bash\n#注:\"#\"后面的内容为repo文件的注释内容.\n[fedora]        #中括号内部的是软件源的名称,由yum提取识别\n\nname=Fedora $releasever - $basearch - 164.com   \n#name字段给出了软件仓库的名称,只是为了方便阅读,可随意填写\n\nfailovermethod=priority\n#failovermethod 有两个值,priority是默认值,表示当baseurl中有多个地址时,\n#从列出的baseurl中顺序选择镜像服务器地址,roundrobin表示在列出的服务器中随机选择\n\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/os/     \n#baseurl给出源的镜像服务器地址,yum就是通过它来访问镜像服务器的\n.\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch    \n#mirrorlist给出镜像服务器的列表,作用不大,可注释掉.\n\nenabled=1       #enable有两个值,1代表当前软件源启用,0代表禁用.\n\nmetadata_expire=7d      \n#此字段用于指定yum的元数据即metadata的过期时间,默认单位为秒,\n#可以通过加后缀来更改单位,例如h代表小时,m代表分钟,d代表天.\n#此处的值为7d即代表当yum更新了一次metadata后,在7天之内,它不会在主动更新metadata.\n\ngpgcheck=1      \n#gpgcheck有两个值,1和0,当值为1的时候,代表对下载的rpm包进行gpg校验,以确保包的有效性和安全性.\n\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch     \n#定义用于校验的gpg密钥信息\n\n#以下的两个软件源相对来说不是很常用,看他们的enable值就知道了=_=,格式和上述的软件源相同,故不再赘述,做注释也很累的有没有!\n[fedora-debuginfo]\nname=Fedora $releasever - $basearch - Debug - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/debug/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-debug-$releasever&arch=$basearch\nenabled=0\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n\n[fedora-source]\nname=Fedora $releasever - Source - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/source/SRPMS/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-source-$releasever&arch=$basearch\nenabled=0\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n```\n\n到这里,repo文件各个字段的大致含义,大家应该都了解了.但是想必各位童鞋都注意到了repo文件中的一些变量,例如: `$releasever`, `$arch`, `$basearch`等等.那么接下来,我们来介绍下repo文件中出现的几个变量吧.我们可以通过\n\n```\n$man yum.conf\n```\n\n在man手册yum.conf(5)中找到关于这几个变量的解释.节选一部分如下:\n\n> VARIABLES\n> There are a number of variables you can use to ease maintenance of yum's configuration files. They are available in the values of several options including name, baseurl and commands.\n>\n>     $releasever This will be replaced with the value of the version of the package listed in distroverpkg. This defaults to the version of `redhat-release' package.\n>\n>     $arch This will be replaced with your architecture as listed by os.uname()[4] in Python.\n> \n>     $basearch This will be replaced with your base architecture in yum. For example, if your $arch is i686 your $basearch will be i386.\n\n简单的说明下man手册中关于各个变量的解释\n`$releasever`:该变量将会被替换成具体的系统发行版本,比如我的系统为fedora 17,那么变量$releasever的值就为17.\n\n`$arch`:该变量会被替换成系统对应的架构,一般情况下$arch的值为i686(32位系统)或者x86_64(64位系统),当然,如果你的电脑是古董级的,有可能出现什么i386或者i486之类的值,或者你用的是PowerPC架构的处理器,$arch的值会是ppc = =.\n\n`$basearch`: basearch顾名思义就是基础架构啦,man手册中的解释是yum中对应的基础架构,我的理解是不管你用的是686,586还是486的CPU,只要是32位的都属于基础的i386架构,这里所谓的base,指的应该就是这个意思.\n\n关于这几个变量,有意思的是它们无法直接在终端下利用`echo $variable`方式输出得到.我找到一个比较方便的办法就是通过执行:\n```\n$uname -r\n```\n来间接得到`$releasever`和`$arch`的值.例如我执行`uname -r`命令得到的结果就是: `3.6.8-2.fc17.x86_64`\n所以针对我的电脑, `$releasever`的值为17, `$arch`的值为x86_64(我的系统是64bit的)\n\n常用源及其目录组织结构\n\n在掌握了repo文件后,我们现在要开始自己动手配置源了,毕竟本片文章的题目还涉及到源配置的问题嘛,不讲怎么配源肯定是对不起观众的XD.\n\n首先介绍几个国内比较知名的源:\n[网易163](http://mirrors.163.com/)\n[搜狐sohu](http://mirrors.sohu.com/)\n\n校园网下比较好的源有:\n[上海交大sjtu](ftp://ftp.sjtu.edu.cn/)\n[中科大ustc](http://mirrors.ustc.edu.cn/)\n[东北大学neu](http://mirror.neu.edu.cn/)\n\n其中比较推荐的是163的源和上海交大的源,因为他们相对来说更新及时,比较全面,同时速度也快.顺便说以下,**在这些源中,163,sohu和中科大的源是有包含帮助页面的,从而可以在帮助页面下直接下载到对应的repo文件,不需要做任何修改,直接放到对应位置然后运行yum makecache就可以了.**但是其他的一些源就没有相应的repo文件下载,所以需要我们自行配置repo文件.(这里不得不吐槽下,如果他们都弄个repo文件方便大家下载,我就不用这么辛苦的码字写文章了=_=b)\n\n自行配置源的思路很简单,就是更改repo文件中对应的字段的值.其中,对我们来说最重要的字段自然是baseurl字段了.正如前文说过的,yum通过baseurl字段给出的地址找到源镜像服务器,进而从镜像服务器下载软件包.\n\n从上文的示例repo文件中,我们可以看到baseurl字段通常是如下形式:\n`baseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/os/`\n很明显的,如果用具体的值带入其中的变量,那么baseurl给出的是一个网址.\n以本人电脑为例,`$releasever=17`, `$basearch=x86_64`,那么得到的网址是:\n`http://mirrors.163.com/fedora/releases/17/Everything/x86_64/os/`\n我们不妨打开对应的网址,你会发现,居然成功打开了,而且网页还有Packages和repodata两个文件夹,这两个文件夹下面还有好多东西,很神奇有没有~\n\n很显然的,yum就是在根据这个网址找到需要的软件包的.所以,我们的目的就是要让yum找到镜像源服务器的对应目录.这不禁让我们联想到,如果163的源需要的软件包在以上给出的目录下,那么像上海交大那样的源很可能也有一样的目录结构,因此我们不妨在上海交大的源服务器上找找是不是也有类似 `/fedora/releases/17/Everything/x86_64/os/`这样的目录.很容易的,我们就找到了类似的目录:\n`ftp://ftp.sjtu.edu.cn/fedora/linux/releases/17/Everything/x86_64/os/`\n通过查看其它的一些镜像源服务器,我们都可以发现实际上它们的目录结构都是差不多的.\n\n修改repo文件\n\n我们已经知道镜像源服务器的目录结构都是相似,因此我们可以利用已有的repo文件,适当的进行下修改,得到一个新的repo文件,从而达到配置新的软件源的目的.\n这里以163的源配置文件为基础,进行适当修改,得到上海交大的源配置文件.\n\n以下为163源配置文件中的一节\n```bash\n[fedora]\nname=Fedora $releasever - $basearch - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/os/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch\nenabled=1\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n```\n以下为修改后上海交大源配置文件中的一节\n\n```bash\n[fedora-sjtu]\nname=Fedora $releasever - $basearch - sjtu\nbaseurl=http://ftp.sjtu.edu.cn/fedora/linux/releases/$releasever/Fedora/$basearch/os/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch\nenabled=1\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n```\n\n通过对比我们不难发现,实际上就只对几处进行了修改.\n\n将中括号中更改为对应的软件源名字,例子中`fedora`->`fedora-sjtu`(不改也是可以的,仅仅是为了便于识别)\nname字段更改为对应的软件源名字(同样的,那么的更改也是非必须的,仅仅是为了便于识别)\nbaserul字段更改为新的镜像源服务器地址.这是最关键的一处更改,为了获得正确的地址,最好之前先通过浏览器访问下对应的地址查看是否正确,同时合理的利用`$releasever`, `$basearch`等变量可以方便的应对当系统升级或者其他情况带来的版本变更所导致的baserul错误等问题.\n除了以上给出的节之外,repo文件里还记录了一些不常用的软件仓库信息,它们一般都是不启用的(`enable`字段值为0),例如debuginfo等,具体的更改方法都是一样的.童鞋们可自行参照以上的例子进行更改.\n\n**最后,只需要将repo文件放入/etc/yum.repo.d/目录下,然后利用root权限运行**\n\n```bash\n#yum makecache\n```\n**更新yum的元数据,新的软件源即可正常使用了.**\n\n# 结束语\n\n至此,整个源配置过程结束,由于本人对ubuntu和Debian系的接触比较少,不太了解apt-get的源配置方法,就不丢人现眼啦.在这里只是简单介绍了下RedHat系的fedora和CentOS的源配置问题.由于linux distribution的更新速度很快,所以文中难免存在一些不足之处,还望指出.希望本文章能让大家了解源配置的过程,更快的配置自己需要的源.\n\n# 参考资料\n\n- yum的具体介绍参见wiki页面:[Yellowdog Updater, Modified](http://en.wikipedia.org/wiki/Yellowdog_Updater,_Modified)\n- repo文件解析可参考这篇帖子:[带你认识repo文件](http://bbs.fedora-zh.org/showthread.php?1376-%E5%B8%A6%E4%BD%A0%E8%AE%A4%E8%AF%86repo%E6%96%87%E4%BB%B6)\n- 变量$releasever和$basearch的讨论可以查看这篇帖子: [Yum: How can I view variables like$releasever, $basearch & $YUM0?](http://unix.stackexchange.com/questions/19701/yum-how-can-i-view-variables-like-releasever-basearch-yum0)\n- 官方的mirrorlist参考: [Fedora Public Active Mirrors](https://mirrors.fedoraproject.org/publiclist/)","source":"_posts/repo_config.md","raw":"title: \"CentOS和Fedora的源配置及repo文件解析\"\ndate: 2012-12-14 15:30:06\ntags: [CentOS, Fedora, Linux, repo, maintenance, yum]\n---\n\n# Background\n\n最近由于项目上的需要, 在VMware上装上了CentOS. 由于学校的校园网无法访问国外的源, 所以CentOS默认的源无法使用, 于是装完系统的第一件事情自然是配源. 对于国内用户来说163的源和sohu的源速度都不错更新的也快, 对于校园网用户来说, 校园网内比较好的源有上海交大(sjtu), 中科大(ustc)... 呵呵, 不知道东北大学(neu)的算不算, 不过我用起来速度也不错.\n\n之前我自己在配Fedora和CentOS的源的时候都是直接google, 然后从网上直接select--copy--paste到本地的repo文件的. 经常找个合适的源文件要找半天, 最令人失望的是有时还不能正常使用. 俗话说的好, \"自己动手, 丰衣足食\"嘛. 所以花了点时间研究了下yum源配置文件的问题, 发现还是蛮简单的.\n\n# Yum与repo文件简介\n\n[Yum(Yellow dog Updater, Modified)](http://en.wikipedia.org/wiki/Yellowdog_Updater,_Modified)是一个在Fedora和RedHat以及SUSE、CentOS中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。\n\n在通过yum更新或者下载软件包的时候, yum需要从\"源\"获得软件包的信息, 所谓的\"源\", 在我理解看来就是一个规范化的软件包下载点, 之所以说它是规范化的是因为\"源\"中有一个列表和一些信息,用于记录\"源\"中软件的发布情况, 这样yum就可以通过列表获取软件包的信息,进而判断一个是否在\"源\"中存在指定软件或者当前的软件包过期需要升级等等.\n\nrepo文件, 由于yum需要利用\"源\"来获取软件包, 那么很自然的, 在本地机器上自然需要有描述\"源\"信息的文件, 这就是repo文件. repo文件存放在`/etc/yum.repo.d/`目录下, 通过root权限对其进行访问或者修改.\n![yum.repo.d](/img/repo_config/repofile.png)\n\n# repo源配置文件解析\n\n这里以网易的163源中的fedora源配置文件作为例子, 简单讲述下repo文件的结构.\n实际上, 获得163的源配置文件是件很容易的事情. 登陆[网易的镜像服务器](http://mirrors.163.com/)\n\n![163 mirror](/img/repo_config/163mirror.png)\n\n可以看到, 网易很人性化的在每个系统条目后面都添加了对应的使用帮助, 点击即可显示:\n![fedora mirror](/img/repo_config/fedorarepo.png)\n按照网页指示的, 我们下载对应的[fedora-163.repo](http://mirrors.163.com/.help/fedora-163.repo)文件下来看看.\n\n```bash\n[fedora]\nname=Fedora $releasever - $basearch - 164.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/os/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch\nenabled=1\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n\n[fedora-debuginfo]\nname=Fedora $releasever - $basearch - Debug - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/debug/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-debug-$releasever&arch=$basearch\nenabled=0\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n\n[fedora-source]\nname=Fedora $releasever - Source - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/source/SRPMS/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-source-$releasever&arch=$basearch\nenabled=0\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n```\n\n可以很明显的看到, repo文件分为若干个不同的节, 每节的内容类似.以上述文件为例,我们对其进行简要的分析.\n\n```bash\n#注:\"#\"后面的内容为repo文件的注释内容.\n[fedora]        #中括号内部的是软件源的名称,由yum提取识别\n\nname=Fedora $releasever - $basearch - 164.com   \n#name字段给出了软件仓库的名称,只是为了方便阅读,可随意填写\n\nfailovermethod=priority\n#failovermethod 有两个值,priority是默认值,表示当baseurl中有多个地址时,\n#从列出的baseurl中顺序选择镜像服务器地址,roundrobin表示在列出的服务器中随机选择\n\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/os/     \n#baseurl给出源的镜像服务器地址,yum就是通过它来访问镜像服务器的\n.\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch    \n#mirrorlist给出镜像服务器的列表,作用不大,可注释掉.\n\nenabled=1       #enable有两个值,1代表当前软件源启用,0代表禁用.\n\nmetadata_expire=7d      \n#此字段用于指定yum的元数据即metadata的过期时间,默认单位为秒,\n#可以通过加后缀来更改单位,例如h代表小时,m代表分钟,d代表天.\n#此处的值为7d即代表当yum更新了一次metadata后,在7天之内,它不会在主动更新metadata.\n\ngpgcheck=1      \n#gpgcheck有两个值,1和0,当值为1的时候,代表对下载的rpm包进行gpg校验,以确保包的有效性和安全性.\n\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch     \n#定义用于校验的gpg密钥信息\n\n#以下的两个软件源相对来说不是很常用,看他们的enable值就知道了=_=,格式和上述的软件源相同,故不再赘述,做注释也很累的有没有!\n[fedora-debuginfo]\nname=Fedora $releasever - $basearch - Debug - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/debug/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-debug-$releasever&arch=$basearch\nenabled=0\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n\n[fedora-source]\nname=Fedora $releasever - Source - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/source/SRPMS/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-source-$releasever&arch=$basearch\nenabled=0\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n```\n\n到这里,repo文件各个字段的大致含义,大家应该都了解了.但是想必各位童鞋都注意到了repo文件中的一些变量,例如: `$releasever`, `$arch`, `$basearch`等等.那么接下来,我们来介绍下repo文件中出现的几个变量吧.我们可以通过\n\n```\n$man yum.conf\n```\n\n在man手册yum.conf(5)中找到关于这几个变量的解释.节选一部分如下:\n\n> VARIABLES\n> There are a number of variables you can use to ease maintenance of yum's configuration files. They are available in the values of several options including name, baseurl and commands.\n>\n>     $releasever This will be replaced with the value of the version of the package listed in distroverpkg. This defaults to the version of `redhat-release' package.\n>\n>     $arch This will be replaced with your architecture as listed by os.uname()[4] in Python.\n> \n>     $basearch This will be replaced with your base architecture in yum. For example, if your $arch is i686 your $basearch will be i386.\n\n简单的说明下man手册中关于各个变量的解释\n`$releasever`:该变量将会被替换成具体的系统发行版本,比如我的系统为fedora 17,那么变量$releasever的值就为17.\n\n`$arch`:该变量会被替换成系统对应的架构,一般情况下$arch的值为i686(32位系统)或者x86_64(64位系统),当然,如果你的电脑是古董级的,有可能出现什么i386或者i486之类的值,或者你用的是PowerPC架构的处理器,$arch的值会是ppc = =.\n\n`$basearch`: basearch顾名思义就是基础架构啦,man手册中的解释是yum中对应的基础架构,我的理解是不管你用的是686,586还是486的CPU,只要是32位的都属于基础的i386架构,这里所谓的base,指的应该就是这个意思.\n\n关于这几个变量,有意思的是它们无法直接在终端下利用`echo $variable`方式输出得到.我找到一个比较方便的办法就是通过执行:\n```\n$uname -r\n```\n来间接得到`$releasever`和`$arch`的值.例如我执行`uname -r`命令得到的结果就是: `3.6.8-2.fc17.x86_64`\n所以针对我的电脑, `$releasever`的值为17, `$arch`的值为x86_64(我的系统是64bit的)\n\n常用源及其目录组织结构\n\n在掌握了repo文件后,我们现在要开始自己动手配置源了,毕竟本片文章的题目还涉及到源配置的问题嘛,不讲怎么配源肯定是对不起观众的XD.\n\n首先介绍几个国内比较知名的源:\n[网易163](http://mirrors.163.com/)\n[搜狐sohu](http://mirrors.sohu.com/)\n\n校园网下比较好的源有:\n[上海交大sjtu](ftp://ftp.sjtu.edu.cn/)\n[中科大ustc](http://mirrors.ustc.edu.cn/)\n[东北大学neu](http://mirror.neu.edu.cn/)\n\n其中比较推荐的是163的源和上海交大的源,因为他们相对来说更新及时,比较全面,同时速度也快.顺便说以下,**在这些源中,163,sohu和中科大的源是有包含帮助页面的,从而可以在帮助页面下直接下载到对应的repo文件,不需要做任何修改,直接放到对应位置然后运行yum makecache就可以了.**但是其他的一些源就没有相应的repo文件下载,所以需要我们自行配置repo文件.(这里不得不吐槽下,如果他们都弄个repo文件方便大家下载,我就不用这么辛苦的码字写文章了=_=b)\n\n自行配置源的思路很简单,就是更改repo文件中对应的字段的值.其中,对我们来说最重要的字段自然是baseurl字段了.正如前文说过的,yum通过baseurl字段给出的地址找到源镜像服务器,进而从镜像服务器下载软件包.\n\n从上文的示例repo文件中,我们可以看到baseurl字段通常是如下形式:\n`baseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/os/`\n很明显的,如果用具体的值带入其中的变量,那么baseurl给出的是一个网址.\n以本人电脑为例,`$releasever=17`, `$basearch=x86_64`,那么得到的网址是:\n`http://mirrors.163.com/fedora/releases/17/Everything/x86_64/os/`\n我们不妨打开对应的网址,你会发现,居然成功打开了,而且网页还有Packages和repodata两个文件夹,这两个文件夹下面还有好多东西,很神奇有没有~\n\n很显然的,yum就是在根据这个网址找到需要的软件包的.所以,我们的目的就是要让yum找到镜像源服务器的对应目录.这不禁让我们联想到,如果163的源需要的软件包在以上给出的目录下,那么像上海交大那样的源很可能也有一样的目录结构,因此我们不妨在上海交大的源服务器上找找是不是也有类似 `/fedora/releases/17/Everything/x86_64/os/`这样的目录.很容易的,我们就找到了类似的目录:\n`ftp://ftp.sjtu.edu.cn/fedora/linux/releases/17/Everything/x86_64/os/`\n通过查看其它的一些镜像源服务器,我们都可以发现实际上它们的目录结构都是差不多的.\n\n修改repo文件\n\n我们已经知道镜像源服务器的目录结构都是相似,因此我们可以利用已有的repo文件,适当的进行下修改,得到一个新的repo文件,从而达到配置新的软件源的目的.\n这里以163的源配置文件为基础,进行适当修改,得到上海交大的源配置文件.\n\n以下为163源配置文件中的一节\n```bash\n[fedora]\nname=Fedora $releasever - $basearch - 163.com\nfailovermethod=priority\nbaseurl=http://mirrors.163.com/fedora/releases/$releasever/Everything/$basearch/os/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch\nenabled=1\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n```\n以下为修改后上海交大源配置文件中的一节\n\n```bash\n[fedora-sjtu]\nname=Fedora $releasever - $basearch - sjtu\nbaseurl=http://ftp.sjtu.edu.cn/fedora/linux/releases/$releasever/Fedora/$basearch/os/\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch\nenabled=1\nmetadata_expire=7d\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch\n```\n\n通过对比我们不难发现,实际上就只对几处进行了修改.\n\n将中括号中更改为对应的软件源名字,例子中`fedora`->`fedora-sjtu`(不改也是可以的,仅仅是为了便于识别)\nname字段更改为对应的软件源名字(同样的,那么的更改也是非必须的,仅仅是为了便于识别)\nbaserul字段更改为新的镜像源服务器地址.这是最关键的一处更改,为了获得正确的地址,最好之前先通过浏览器访问下对应的地址查看是否正确,同时合理的利用`$releasever`, `$basearch`等变量可以方便的应对当系统升级或者其他情况带来的版本变更所导致的baserul错误等问题.\n除了以上给出的节之外,repo文件里还记录了一些不常用的软件仓库信息,它们一般都是不启用的(`enable`字段值为0),例如debuginfo等,具体的更改方法都是一样的.童鞋们可自行参照以上的例子进行更改.\n\n**最后,只需要将repo文件放入/etc/yum.repo.d/目录下,然后利用root权限运行**\n\n```bash\n#yum makecache\n```\n**更新yum的元数据,新的软件源即可正常使用了.**\n\n# 结束语\n\n至此,整个源配置过程结束,由于本人对ubuntu和Debian系的接触比较少,不太了解apt-get的源配置方法,就不丢人现眼啦.在这里只是简单介绍了下RedHat系的fedora和CentOS的源配置问题.由于linux distribution的更新速度很快,所以文中难免存在一些不足之处,还望指出.希望本文章能让大家了解源配置的过程,更快的配置自己需要的源.\n\n# 参考资料\n\n- yum的具体介绍参见wiki页面:[Yellowdog Updater, Modified](http://en.wikipedia.org/wiki/Yellowdog_Updater,_Modified)\n- repo文件解析可参考这篇帖子:[带你认识repo文件](http://bbs.fedora-zh.org/showthread.php?1376-%E5%B8%A6%E4%BD%A0%E8%AE%A4%E8%AF%86repo%E6%96%87%E4%BB%B6)\n- 变量$releasever和$basearch的讨论可以查看这篇帖子: [Yum: How can I view variables like$releasever, $basearch & $YUM0?](http://unix.stackexchange.com/questions/19701/yum-how-can-i-view-variables-like-releasever-basearch-yum0)\n- 官方的mirrorlist参考: [Fedora Public Active Mirrors](https://mirrors.fedoraproject.org/publiclist/)","slug":"repo_config","published":1,"updated":"2015-04-07T15:39:53.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o990011kadyjg1j5fwh"},{"title":"利用NFS在Xen中设立共享文件夹","date":"2014-06-16T05:15:52.000Z","_content":"\n# Background\n\n趁着虚拟机在安装guest os的时候抽空写一篇小短文吧。这篇文章主要介绍利用NFS在Xen的host os和guest os中共享文件夹。众所周知的，VMware是很容易在宿主机(Host)的windows和客户机(Guest)中共享文件夹的，点几下按钮的事情。但是同样的事情到了Linux下的Xen上，就变得有点麻烦，因为Xen没有提供Host和Guest之间的共享手段，所以用户就需要利用其它方法来实现虚拟机和宿主机共享文件夹这事。\n\n首先，让我们来介绍一下故事的背景。故事的起因是本人想要阅读下内核代码，觉得单纯的读很枯燥，想顺带改改内核代码试试看效果，但改内核这事也不好直接在物理机上进行，所以自然而然的想到了放到虚拟机中取执行修改的内核。但是代码的修改又需要在Host机上进行(因为嫌麻烦Guest没有配置相对应的工具嘛)，这样就不免要涉及到将Host修改后的代码放入到Guest中编译安装的过程，很自然的，需要实现Host与Guest之间的文件共享机制。\n\n**实验环境：**\n本人的物理机上安装的是Linux Mint 16，然后在Mint上安装了Xen虚拟化平台。利用虚拟化软件Xen，安装了一个ubuntu的虚拟机。\n\n**本文结构：**\n如果不算开头背景啰嗦的话，本文大致分为2个部分，\n1. 介绍NFS(Network File System)的介绍及简易配置 \n2. 利用NFS实现虚拟化平台中Host与Guest，或是Guest与Guest之间的文件共享。\n\n---\n\n# NFS的介绍及配置\n\n## NFS介绍\n\nNFS(Network File System)是FreeBSD支持的文件系统中的一种主要用于在Linux机器之间提供文件共享服务，其基本的原理类似与C/S模式，即服务器/客户端模式，一台提供共享文件夹的计算机充当服务器，其它若干台计算机作为客户机来访问这个共享文件夹。因此，在配置NFS的时候，思路的就很简单。首先，针对共享文件夹所在的机器，进行相关的NFS配置，以便将共享文件夹发布(export)给指定网络内的机器以及设定对应的权限控制，这样指定网络内的计算机就都能看到这个共享文件夹，然后将网络上的共享文件夹挂载(mount)到自己的文件系统下便可以进行访问了。通过这种export/mount模式，NFS便实现了文件共享机制。\n\n事实上，在文件共享方面，还有一个更知名(或者说使用者更多)的服务，那便是Samba服务，而NFS则显得相对小众点(或者说使用者多为Linux管理员一类的)，之所以是这样，就是因为NFS只用于Linux与Linux系统之间的文件共享，而Samba则可用于Linux与Windows之间，Linux与Linux之间的文件共享。从Windows和Linux的用户基数的对比上就可以看出其中端倪。虽然Samba看起来比NFS功能强大，但是NFS也有自身优势，相比于Samba，NFS显得更加轻量级也更稳定点，当然，配置起来也更简单点。\n\n## NFS配置\n\n### 安装NFS\n\n首先，查看下机器中是否安装了NFS(一般的Linux发行版都是默认安装NFS的)。\n\nubuntu系统查看是否安装NFS：`$ dpkg -l | grep nfs`\n\nfedora/centos查看是否安装NFS：`$ rpm -qa | grep nfs`\n\n如果系统内没有NFS，那么便需要安装，\n\nubuntu系统安装NFS\n```\n$ sudo apt-get install nfs-kernel-server nfs-common\n```\n\nfedora/centos系统安装NFS\n```\n# yum install nfs\n```\n\n### 配置文件\n\n在安装完NFS后，在系统的 `/etc` 目录下会多一个 `exports` 文件，该文件用于指定要共享的目录以及相关的权限设置。\n\n接下来我们来修改配置文件 `/etc/exports`\n对于之前没有配置过NFS的机器，`exports` 的文件的样子是这样的：\n```\n# /etc/exports: the access control list for filesystems which may be exported\n#       to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n```\nNFS服务的配置基本上就只需要在exports文件中进行。注释中给出了配置文件信息的格式，我们根据注释添加相对应的行就行。\n\n在exports文件的末尾添加一行： `/your_path/nfs_dir *(rw,sync,no_root_squash)` \n\n其中 **`/your_path/nfs_dir`** 表示用户自定义的路径下的 **`nfs_dir`** 目录，用于与客户机共享；例如要想将 `/home/foo/share` 共享，那么可以在 exports文件中添加一行 `/home/foo/share *(rw,sync,no_root_squash)` 路径后面跟的是对该共享目录的权限控制信息。格式为 `network(permission parameters)`。\n\n上面例子中`*`代表任意网段的计算机均可访问到共享文件夹。当然，你也可以根据需要来指定特定的网段，例如特定IP地址的主机 `192.168.1.36`，或者特定网段内的主机 `58.154.190.0/24(58.154.190.0/255.255.255.0)`，在或者指定域名的主机 `*.neu.edu.cn` (域名能在本地 `/etc/hosts` 文件中或通过DNS服务器找到)。如果你不明确访问共享文件夹的计算机网络的话，那还是用`*`吧。\n\n**`(rw,sync,root_squash)`**表示其它机器访问共享文件夹时的权限。\n\nNFS常用的参数有：\n\n|Parameter|Description|\n|:-|:-|\n|`ro`|只读访问|\n|`rw`|读写访问sync所有数据在请求时写入共享|\n|`async`|nfs在写入数据前可以响应请求|\n|`secure`|nfs通过1024以下的安全TCP/IP端口发送|\n|`insecure`|nfs通过1024以上的端口发送|\n|`wdelay`|如果多个用户要写入nfs目录，则归组写入（默认）|\n|`no_wdelay`|如果多个用户要写入nfs目录，则立即写入，当使用async时，无需此设置。|\n|`hide`|在nfs共享目录中不共享其子目录|\n|`no_hide`|共享nfs目录的子目录|\n|`subtree_check`|如果共享/usr/bin之类的子目录时，强制nfs检查父目录的权限（默认）|\n|`no_subtree_check`|和上面相对，不检查父目录权限|\n|`all_squash`|共享文件的UID和GID映射匿名用户anonymous，适合公用目录。|\n|`no_all_squash`|保留共享文件的UID和GID（默认）|\n|`root_squash`|root用户的所有请求映射成如anonymous用户一样的权限（默认）|\n|`no_root_squas`|root用户具有根目录的完全管理访问权限(不安全，不推荐)|\n|`anonuid=xxx`|指定nfs服务器/etc/passwd文件中匿名用户的UID|\n|`anongid=xxx`|指定nfs服务器/etc/passwd文件中匿名用户的GID|\n\n修改完成之后输入：`# exportfs –rv` 来使配置文件生效。\n\n重启NFS服务\n```\n$sudo /etc/init.d/nfs-kernel-server restart\n```\n\n网上一些帖子里说由于NFS是一个RPC程序，使用它前，需要通过portmap映射好端口故需要重启portmap服务\n```\n$ sudo /etc/init.d/portmap restart\n``` \n但是本人的Mint 16上并未发现有portmap服务，故忽略，最后也能成功执行NFS。\n\n最后，查看目录是否已经共享，\n```\n$ showmount -e localhost  #查询本机nfs共享目录情况\n$ showmount -a localhost  #查询本机共享目录连接情况\n```\n通过 `$ showmount -e`  显示出共享出来的目录，如果结果中有你之前在exports文件中指定的目录，那么NFS服务器端的共享文件夹就成功发布了，即指定网段内的主机可以发现这个共享文件夹了。\n\n## NFS客户机挂载共享目录\n\n我们已经完成了NFS服务器端的共享目录配置，并确保了共享目录可以被特定网段的计算机发现了，那么接下来，我们就需要在其它机器上“接收”由NFS服务器那台机器“发布”出来的共享文件夹。\n\n这里需要将网络共享目录挂载(mount)到本地机器的文件系统中。\n```\n$ mount -t nfs hostip:/host_shared_path/shared_dir /opt/shared_dir\n```\n\n例如，已知NFS服务器的IP为 `192.168.1.36`，并且其 `/home/foo/share` 目录是共享的，要将其mount至本机的 `/home/zoo/nfs` 目录下，那么便可执行：\n```\n$ mount -t nfs 192.168.1.36:/home/foo/share /home/zoo/nfs\n```\n这样就可以通过本机中的 `/home/zoo/nfs` 目录操作共享文件了。\n\n如果你愿意的话，还可以启用开机自动挂载，将挂载信息写入 `/etc/fstab` 文件，在末尾添加一行：\n```\nhost_ip:/host_share_path /local_mount_path nfs defaults\n```\n然后执行 `# mount -a` 即可。\n\n至此，NFS的配置和使用过程讲解结束，目前未涉及到半点虚拟机的内容，接下来，我们来讲讲如何将NFS用与虚拟机中Host与Guest共享文件。\n\n---\n\n# 采用NFS实现Xen中Host与Guest的文件共享\n\nXen并未提供在宿主机Host与客户机Guest之间的文件共享方式。因此，我们不得不自己动手来完成这个事情。\n\n如果说仅仅实现了Xen中的Host与Guest的文件共享，我想也未免太针对了，事实上，利用NFS我们可以完成任意台Linux主机之间的文件共享，哪怕这些Linux主机中包含有虚拟的计算机。不管是在Xen中，还是在VMware中又或者是在Virtual Box中，只要Host是Linux系统，Guest也是Linux系统，Host和Guest在网络上能互相查找到对方，那么便可利用NFS完成文件共享。那么，显然的，如果Host机或者Guest机中有Windows系统机器，NFS就不再适用了，这时候你就需要Samba。\n\n我们注意到，利用NFS来进行文件共享，有2个主要的要求：\n\n1. 参与共享的主机都必须是Linux系统\n\n2. 参与共享的主机必须能在网络上互相找到对方\n\n对于第1点，要不是显而易见的，要不是无能为力的(不过，如果非要在Linux和Windows之间利用NFS实现文件共享，也是可以的)。我们这里着重来说说第2点，在虚拟机的环境中，如何判断Host和Guest能互相在网络上找到对方。\n\n说到这里，我们就不得不稍微讲一讲几种虚拟机常用的网络模型：Bridge，Host-Only，NAT。\n\n> 1.Bridged(桥接模式)\n\n> 在Bridged模式下，虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。但是你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。 使用bridged模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。\n\n> 2.NAT(Network Address Translation, 网络地址转换模式)\n\n> 使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由虚拟机提供的虚拟网络DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机器能访问互联网即可。 这种方式也可以实现Host OS与Guest OS的双向访问。但网络内其他机器不能访问Guest OS，Guest OS可通过Host OS用NAT协议访问网络内其他机器。NAT方式的IP地址配置方法是由虚拟DHCP服务器中分配一个IP ，在这个IP地址中已经设置好路由，就是指向192.168.138.1的。 如果你想利用虚拟机安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用\n\n> NAT模式。\n\n> Host-Only(主机模式)\n\n> 在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用Host-Only模式。在Host-Only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。 提示:在Host-Only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。 在Host-Only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由虚拟网络的DHCP服务器来动态分配的。 如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择Host-Only模式。\n\n让我们以Xen为例介绍一下，本人在Xen中新建虚拟机时，网络连接模式采用的是 net bridge形式，在Host上，通过 `$ ifconfig` 命令，可以发现Host中eth0网卡的IP地址为 `58.154.190.×`，并且多了一块虚拟的 `virbr0` 网卡，其IP地址为 `192.168.122.1`。在Guest中，通过 `$ ifconfig` 命令，发现其IP地址为 `192.168.122.168`。\n\n因此，Host采用virbr0的IP地址就能和Guest进行通信，在Host中采用 `$ ping 192.168.122.168` 查看是否能连接的上Guest，同样的，在Guest中采用 `$ ping 192.168.122.1` 查看是否能连接的上Host。如果二者能正常连接，那么，便可采用文章上半部分讲述的NFS方式来实现Host与Guest直接的文件共享了(只需要在宿主机配置好了NFS服务后，在客户机mount 共享文件夹时填入正确的宿主机的IP地址即可)。","source":"_posts/nfs_xen.md","raw":"title: \"利用NFS在Xen中设立共享文件夹\"\ndate: 2014-06-16 13:15:52\ntags: [NFS, Xen, Virtualization]\n---\n\n# Background\n\n趁着虚拟机在安装guest os的时候抽空写一篇小短文吧。这篇文章主要介绍利用NFS在Xen的host os和guest os中共享文件夹。众所周知的，VMware是很容易在宿主机(Host)的windows和客户机(Guest)中共享文件夹的，点几下按钮的事情。但是同样的事情到了Linux下的Xen上，就变得有点麻烦，因为Xen没有提供Host和Guest之间的共享手段，所以用户就需要利用其它方法来实现虚拟机和宿主机共享文件夹这事。\n\n首先，让我们来介绍一下故事的背景。故事的起因是本人想要阅读下内核代码，觉得单纯的读很枯燥，想顺带改改内核代码试试看效果，但改内核这事也不好直接在物理机上进行，所以自然而然的想到了放到虚拟机中取执行修改的内核。但是代码的修改又需要在Host机上进行(因为嫌麻烦Guest没有配置相对应的工具嘛)，这样就不免要涉及到将Host修改后的代码放入到Guest中编译安装的过程，很自然的，需要实现Host与Guest之间的文件共享机制。\n\n**实验环境：**\n本人的物理机上安装的是Linux Mint 16，然后在Mint上安装了Xen虚拟化平台。利用虚拟化软件Xen，安装了一个ubuntu的虚拟机。\n\n**本文结构：**\n如果不算开头背景啰嗦的话，本文大致分为2个部分，\n1. 介绍NFS(Network File System)的介绍及简易配置 \n2. 利用NFS实现虚拟化平台中Host与Guest，或是Guest与Guest之间的文件共享。\n\n---\n\n# NFS的介绍及配置\n\n## NFS介绍\n\nNFS(Network File System)是FreeBSD支持的文件系统中的一种主要用于在Linux机器之间提供文件共享服务，其基本的原理类似与C/S模式，即服务器/客户端模式，一台提供共享文件夹的计算机充当服务器，其它若干台计算机作为客户机来访问这个共享文件夹。因此，在配置NFS的时候，思路的就很简单。首先，针对共享文件夹所在的机器，进行相关的NFS配置，以便将共享文件夹发布(export)给指定网络内的机器以及设定对应的权限控制，这样指定网络内的计算机就都能看到这个共享文件夹，然后将网络上的共享文件夹挂载(mount)到自己的文件系统下便可以进行访问了。通过这种export/mount模式，NFS便实现了文件共享机制。\n\n事实上，在文件共享方面，还有一个更知名(或者说使用者更多)的服务，那便是Samba服务，而NFS则显得相对小众点(或者说使用者多为Linux管理员一类的)，之所以是这样，就是因为NFS只用于Linux与Linux系统之间的文件共享，而Samba则可用于Linux与Windows之间，Linux与Linux之间的文件共享。从Windows和Linux的用户基数的对比上就可以看出其中端倪。虽然Samba看起来比NFS功能强大，但是NFS也有自身优势，相比于Samba，NFS显得更加轻量级也更稳定点，当然，配置起来也更简单点。\n\n## NFS配置\n\n### 安装NFS\n\n首先，查看下机器中是否安装了NFS(一般的Linux发行版都是默认安装NFS的)。\n\nubuntu系统查看是否安装NFS：`$ dpkg -l | grep nfs`\n\nfedora/centos查看是否安装NFS：`$ rpm -qa | grep nfs`\n\n如果系统内没有NFS，那么便需要安装，\n\nubuntu系统安装NFS\n```\n$ sudo apt-get install nfs-kernel-server nfs-common\n```\n\nfedora/centos系统安装NFS\n```\n# yum install nfs\n```\n\n### 配置文件\n\n在安装完NFS后，在系统的 `/etc` 目录下会多一个 `exports` 文件，该文件用于指定要共享的目录以及相关的权限设置。\n\n接下来我们来修改配置文件 `/etc/exports`\n对于之前没有配置过NFS的机器，`exports` 的文件的样子是这样的：\n```\n# /etc/exports: the access control list for filesystems which may be exported\n#       to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n```\nNFS服务的配置基本上就只需要在exports文件中进行。注释中给出了配置文件信息的格式，我们根据注释添加相对应的行就行。\n\n在exports文件的末尾添加一行： `/your_path/nfs_dir *(rw,sync,no_root_squash)` \n\n其中 **`/your_path/nfs_dir`** 表示用户自定义的路径下的 **`nfs_dir`** 目录，用于与客户机共享；例如要想将 `/home/foo/share` 共享，那么可以在 exports文件中添加一行 `/home/foo/share *(rw,sync,no_root_squash)` 路径后面跟的是对该共享目录的权限控制信息。格式为 `network(permission parameters)`。\n\n上面例子中`*`代表任意网段的计算机均可访问到共享文件夹。当然，你也可以根据需要来指定特定的网段，例如特定IP地址的主机 `192.168.1.36`，或者特定网段内的主机 `58.154.190.0/24(58.154.190.0/255.255.255.0)`，在或者指定域名的主机 `*.neu.edu.cn` (域名能在本地 `/etc/hosts` 文件中或通过DNS服务器找到)。如果你不明确访问共享文件夹的计算机网络的话，那还是用`*`吧。\n\n**`(rw,sync,root_squash)`**表示其它机器访问共享文件夹时的权限。\n\nNFS常用的参数有：\n\n|Parameter|Description|\n|:-|:-|\n|`ro`|只读访问|\n|`rw`|读写访问sync所有数据在请求时写入共享|\n|`async`|nfs在写入数据前可以响应请求|\n|`secure`|nfs通过1024以下的安全TCP/IP端口发送|\n|`insecure`|nfs通过1024以上的端口发送|\n|`wdelay`|如果多个用户要写入nfs目录，则归组写入（默认）|\n|`no_wdelay`|如果多个用户要写入nfs目录，则立即写入，当使用async时，无需此设置。|\n|`hide`|在nfs共享目录中不共享其子目录|\n|`no_hide`|共享nfs目录的子目录|\n|`subtree_check`|如果共享/usr/bin之类的子目录时，强制nfs检查父目录的权限（默认）|\n|`no_subtree_check`|和上面相对，不检查父目录权限|\n|`all_squash`|共享文件的UID和GID映射匿名用户anonymous，适合公用目录。|\n|`no_all_squash`|保留共享文件的UID和GID（默认）|\n|`root_squash`|root用户的所有请求映射成如anonymous用户一样的权限（默认）|\n|`no_root_squas`|root用户具有根目录的完全管理访问权限(不安全，不推荐)|\n|`anonuid=xxx`|指定nfs服务器/etc/passwd文件中匿名用户的UID|\n|`anongid=xxx`|指定nfs服务器/etc/passwd文件中匿名用户的GID|\n\n修改完成之后输入：`# exportfs –rv` 来使配置文件生效。\n\n重启NFS服务\n```\n$sudo /etc/init.d/nfs-kernel-server restart\n```\n\n网上一些帖子里说由于NFS是一个RPC程序，使用它前，需要通过portmap映射好端口故需要重启portmap服务\n```\n$ sudo /etc/init.d/portmap restart\n``` \n但是本人的Mint 16上并未发现有portmap服务，故忽略，最后也能成功执行NFS。\n\n最后，查看目录是否已经共享，\n```\n$ showmount -e localhost  #查询本机nfs共享目录情况\n$ showmount -a localhost  #查询本机共享目录连接情况\n```\n通过 `$ showmount -e`  显示出共享出来的目录，如果结果中有你之前在exports文件中指定的目录，那么NFS服务器端的共享文件夹就成功发布了，即指定网段内的主机可以发现这个共享文件夹了。\n\n## NFS客户机挂载共享目录\n\n我们已经完成了NFS服务器端的共享目录配置，并确保了共享目录可以被特定网段的计算机发现了，那么接下来，我们就需要在其它机器上“接收”由NFS服务器那台机器“发布”出来的共享文件夹。\n\n这里需要将网络共享目录挂载(mount)到本地机器的文件系统中。\n```\n$ mount -t nfs hostip:/host_shared_path/shared_dir /opt/shared_dir\n```\n\n例如，已知NFS服务器的IP为 `192.168.1.36`，并且其 `/home/foo/share` 目录是共享的，要将其mount至本机的 `/home/zoo/nfs` 目录下，那么便可执行：\n```\n$ mount -t nfs 192.168.1.36:/home/foo/share /home/zoo/nfs\n```\n这样就可以通过本机中的 `/home/zoo/nfs` 目录操作共享文件了。\n\n如果你愿意的话，还可以启用开机自动挂载，将挂载信息写入 `/etc/fstab` 文件，在末尾添加一行：\n```\nhost_ip:/host_share_path /local_mount_path nfs defaults\n```\n然后执行 `# mount -a` 即可。\n\n至此，NFS的配置和使用过程讲解结束，目前未涉及到半点虚拟机的内容，接下来，我们来讲讲如何将NFS用与虚拟机中Host与Guest共享文件。\n\n---\n\n# 采用NFS实现Xen中Host与Guest的文件共享\n\nXen并未提供在宿主机Host与客户机Guest之间的文件共享方式。因此，我们不得不自己动手来完成这个事情。\n\n如果说仅仅实现了Xen中的Host与Guest的文件共享，我想也未免太针对了，事实上，利用NFS我们可以完成任意台Linux主机之间的文件共享，哪怕这些Linux主机中包含有虚拟的计算机。不管是在Xen中，还是在VMware中又或者是在Virtual Box中，只要Host是Linux系统，Guest也是Linux系统，Host和Guest在网络上能互相查找到对方，那么便可利用NFS完成文件共享。那么，显然的，如果Host机或者Guest机中有Windows系统机器，NFS就不再适用了，这时候你就需要Samba。\n\n我们注意到，利用NFS来进行文件共享，有2个主要的要求：\n\n1. 参与共享的主机都必须是Linux系统\n\n2. 参与共享的主机必须能在网络上互相找到对方\n\n对于第1点，要不是显而易见的，要不是无能为力的(不过，如果非要在Linux和Windows之间利用NFS实现文件共享，也是可以的)。我们这里着重来说说第2点，在虚拟机的环境中，如何判断Host和Guest能互相在网络上找到对方。\n\n说到这里，我们就不得不稍微讲一讲几种虚拟机常用的网络模型：Bridge，Host-Only，NAT。\n\n> 1.Bridged(桥接模式)\n\n> 在Bridged模式下，虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。但是你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。 使用bridged模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。\n\n> 2.NAT(Network Address Translation, 网络地址转换模式)\n\n> 使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由虚拟机提供的虚拟网络DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机器能访问互联网即可。 这种方式也可以实现Host OS与Guest OS的双向访问。但网络内其他机器不能访问Guest OS，Guest OS可通过Host OS用NAT协议访问网络内其他机器。NAT方式的IP地址配置方法是由虚拟DHCP服务器中分配一个IP ，在这个IP地址中已经设置好路由，就是指向192.168.138.1的。 如果你想利用虚拟机安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用\n\n> NAT模式。\n\n> Host-Only(主机模式)\n\n> 在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用Host-Only模式。在Host-Only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。 提示:在Host-Only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。 在Host-Only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由虚拟网络的DHCP服务器来动态分配的。 如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择Host-Only模式。\n\n让我们以Xen为例介绍一下，本人在Xen中新建虚拟机时，网络连接模式采用的是 net bridge形式，在Host上，通过 `$ ifconfig` 命令，可以发现Host中eth0网卡的IP地址为 `58.154.190.×`，并且多了一块虚拟的 `virbr0` 网卡，其IP地址为 `192.168.122.1`。在Guest中，通过 `$ ifconfig` 命令，发现其IP地址为 `192.168.122.168`。\n\n因此，Host采用virbr0的IP地址就能和Guest进行通信，在Host中采用 `$ ping 192.168.122.168` 查看是否能连接的上Guest，同样的，在Guest中采用 `$ ping 192.168.122.1` 查看是否能连接的上Host。如果二者能正常连接，那么，便可采用文章上半部分讲述的NFS方式来实现Host与Guest直接的文件共享了(只需要在宿主机配置好了NFS服务后，在客户机mount 共享文件夹时填入正确的宿主机的IP地址即可)。","slug":"nfs_xen","published":1,"updated":"2015-04-08T14:49:16.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o9b001akadyz9uta5us"},{"title":"建站小记","date":"2012-10-16T14:56:06.000Z","notoc":true,"_content":"\n在折腾了许久之后, 个人博客终于上线了. 忙碌过后, 依旧难以掩盖内心的激动, 当然也不是激动的要死的那种激动, 只是你能体会到那样一种感觉, 在浩浩荡荡的互联网中, 有一个属于你的一小片空间,  有一个属于你的标签, 你可以不时的把你脑海里长出来的果实及时采摘一下放在这里, 摆上一桌勉勉强强的盛宴,来款待来往的人们. 然后, 静静地等待着各种各样有意思的事情发生, 或许我们会互相用Anchor来勾住对方, 或许我们会被社交网络连结到一起, 又或许, 只是寥寥的几个人, 但是能说说东西, 在巨大的浪潮中偶尔的冒个泡不也是是一件很有意思的事情吗? 呃, 多少是有一点意思的吧. 恩, 所以你是不是也有点激动了. Hey, guys, come on!\n\n其实, 关于建立个人博客此事, 很早之前我就开始策划了, 只是由于各种各样的原因(当然, 现在看来, 我将这些原因统称为crap)耽搁了. 这里不得不特别感谢我的好友Ting, 是他帮助我解决了很多在申请域名时的问题, 同时也很感谢[Kimi Yang](http://ikimi.net)热情地为了我这个博客腾出了点空间, 好让这页面成功上线, 我的感谢之情, 溢于言表, 恩, 相信你能看得出来的, 对不.\n\n由于可耻的保研了, 这一段时间相对来说比较充裕, 不过明天要离开学校几天. 虽然如此, 我还是决定在离开之前把博客上线, 究其原因, 一方面我不太喜欢拖拉, 另一方面, 令我很惊奇的是有个同专业的同学给我发信息询问我是否有撰写博客, 令我着实惭愧. 恩, 所以他就这么突然的间的\"嘣\"的一声就出来了,写篇啰啰嗦嗦的杂文小记下, 但愿没打扰到任何人, 呵呵.","source":"_posts/jianzhanxiaoji.md","raw":"title: \"建站小记\"\ndate: 2012-10-16 22:56:06\ntags: [web, blog]\nnotoc: true\n---\n\n在折腾了许久之后, 个人博客终于上线了. 忙碌过后, 依旧难以掩盖内心的激动, 当然也不是激动的要死的那种激动, 只是你能体会到那样一种感觉, 在浩浩荡荡的互联网中, 有一个属于你的一小片空间,  有一个属于你的标签, 你可以不时的把你脑海里长出来的果实及时采摘一下放在这里, 摆上一桌勉勉强强的盛宴,来款待来往的人们. 然后, 静静地等待着各种各样有意思的事情发生, 或许我们会互相用Anchor来勾住对方, 或许我们会被社交网络连结到一起, 又或许, 只是寥寥的几个人, 但是能说说东西, 在巨大的浪潮中偶尔的冒个泡不也是是一件很有意思的事情吗? 呃, 多少是有一点意思的吧. 恩, 所以你是不是也有点激动了. Hey, guys, come on!\n\n其实, 关于建立个人博客此事, 很早之前我就开始策划了, 只是由于各种各样的原因(当然, 现在看来, 我将这些原因统称为crap)耽搁了. 这里不得不特别感谢我的好友Ting, 是他帮助我解决了很多在申请域名时的问题, 同时也很感谢[Kimi Yang](http://ikimi.net)热情地为了我这个博客腾出了点空间, 好让这页面成功上线, 我的感谢之情, 溢于言表, 恩, 相信你能看得出来的, 对不.\n\n由于可耻的保研了, 这一段时间相对来说比较充裕, 不过明天要离开学校几天. 虽然如此, 我还是决定在离开之前把博客上线, 究其原因, 一方面我不太喜欢拖拉, 另一方面, 令我很惊奇的是有个同专业的同学给我发信息询问我是否有撰写博客, 令我着实惭愧. 恩, 所以他就这么突然的间的\"嘣\"的一声就出来了,写篇啰啰嗦嗦的杂文小记下, 但愿没打扰到任何人, 呵呵.","slug":"jianzhanxiaoji","published":1,"updated":"2015-04-08T14:58:03.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o9i001hkadygih7zrgd"},{"title":"[转]图解Google搜索技巧","date":"2012-11-05T01:06:16.000Z","notoc":true,"_content":"\n今天在上网的时候偶然发现这图, 觉得很直观, 也很实用, 很多搜索技巧平时自己也没怎么注意, 遂转. <!-- more -->\n今天在上网的时候偶然发现这图, 觉得很直观, 也很实用, 很多搜索技巧平时自己也没怎么注意, 遂转.\n![图解Google搜索技巧](/img/google/searchtips.jpg)\nP.S.原著信息已在图片底部了, 我就不多写引用声明了. 在此感谢下原著.","source":"_posts/google.md","raw":"title: \"[转]图解Google搜索技巧\"\ndate: 2012-11-05 9:06:16\ntags: [google, search engine, trick]\nnotoc: true\n---\n\n今天在上网的时候偶然发现这图, 觉得很直观, 也很实用, 很多搜索技巧平时自己也没怎么注意, 遂转. <!-- more -->\n今天在上网的时候偶然发现这图, 觉得很直观, 也很实用, 很多搜索技巧平时自己也没怎么注意, 遂转.\n![图解Google搜索技巧](/img/google/searchtips.jpg)\nP.S.原著信息已在图片底部了, 我就不多写引用声明了. 在此感谢下原著.","slug":"google","published":1,"updated":"2015-04-08T15:09:10.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o9k001mkadybqrlspa6"},{"title":"为了什么而生活","date":"2013-03-25T08:18:51.000Z","notoc":true,"_content":"\n![heaven or hell](/img/forwhat/heaven_or_hell.jpg)\n\n又是一个周末的黄昏,独坐在宿舍里,窗外篮球场上的喧嚣一刻也未停息,挠的人不免有些心烦. 觉得要做点什么,却又什么都不想做,而当什么都不做的时候,心里又就冒出一股强烈的力量迫使自己去做点什么来解除这种无所事事的状态,这或许就是本能在驱使着自己不要浪费时光吧.而当人在这种矛盾中纠结的时候,常常嘴里会蹦出\"无聊啊\"这类的词语.\n\n其实,一个人的无聊不足为惧,因为这种无聊的感觉很快会随着时间消散,通常只要睡一觉的功夫,伴随着体力的回复,人马上又会重新找到做些事情的兴趣.但是,如果是一群人一起无聊,那情况就会变得复杂很多.这种情况我想在目前的大学校园是很多见的吧,尤其是在大四即将毕业的男生宿舍里.大家都没事可做,于是相互抱怨着无聊,而当一个无所事事的人向另一个无所事事的人倾诉自己是多么无聊的时候,通常对方也会非常消极的认同,从结果上来看,这种互相抱怨非但没有减轻这种状态的影响,反而是以近乎指数级的速度加剧了这种负面状态.\n\n当一群人都处于无聊或者无所事事状态的时候,人们就会变得很随便.这种时候只要有一个人提出了一个想法,典型的比如玩游戏,或者出去吃个饭,通常会得到大家的一致同意,但是做这些事情却无法减轻无聊所带来影响,反而会慢性的加剧这个过程,等到下一个无聊周期来到的时候,常常会反应的更加剧烈.那么,我们假设一下提建议的是个比较积极乐观的人,他提出了一个某种程度上有意义的活动,比如说大家一起上图书馆或者一起出去运动一下,但是,就一般情况而言,这种情况通常不会得到大多数无聊患者的认同.因为大家之所以无聊,不是因为真的没事可做,只是因为不想去做那些该做的却看似麻烦的事情,其原因就在于人们并不是通过去直面问题本身而是通过一种逃避的方式来规避问题.\n\n很不巧的,我现在就处在这种尴尬的情景之中.不过随手写写也着实减轻了我不少的负面情绪,至少,我有事情做了啊!但是,仔细想想,为什么我会觉得无聊,写博文真的是我想做的事情吗?其实,我写博文也只是在减轻无聊带来的影响而已,如果把无聊的状态定义为bad,那么,有事情做只能定义为not bad,而真正该做的或者说让人充满活力的事情则才能称之为good.由此看来,我依然没有直面问题的根源.一时间,我不知道如何去面对这样日复一日,毫无生机的生活.\n\n生活是什么样的?我希望的生活又是什么样的?每一天,每一天,我看着同样的风景,面对熟悉的人群,做着机械性的事物.如同一台被设定好了的机器,不停的空转,却没有任何产出,这样的生活毫无乐趣可言.当我深深的意识到这种情况时,我就明白,it is time to change something 了.\n\n我想从原来的生活轨迹中抽离出来,出个远门,感受一下冬日里温暖的阳光;去趟图书馆,静静的看一下午闲书;想一些荒诞的点子,然后去尝试实现.或许生活就应该是这样子,走出自己的牢笼,看不同的风景,邂逅不同的人,做有意思的事.然后,从一点一点开始积累,让生活呈现不一样的姿态,让自己收获不同的心情.以一颗充满活力的心去迎接,去体会每一天.简单纯粹,不为了生活而生活,而是为了发现更多...","source":"_posts/forwhat.md","raw":"title: \"为了什么而生活\"\ndate: 2013-03-25 16:18:51\ntags: [thought, life]\nnotoc: true\n---\n\n![heaven or hell](/img/forwhat/heaven_or_hell.jpg)\n\n又是一个周末的黄昏,独坐在宿舍里,窗外篮球场上的喧嚣一刻也未停息,挠的人不免有些心烦. 觉得要做点什么,却又什么都不想做,而当什么都不做的时候,心里又就冒出一股强烈的力量迫使自己去做点什么来解除这种无所事事的状态,这或许就是本能在驱使着自己不要浪费时光吧.而当人在这种矛盾中纠结的时候,常常嘴里会蹦出\"无聊啊\"这类的词语.\n\n其实,一个人的无聊不足为惧,因为这种无聊的感觉很快会随着时间消散,通常只要睡一觉的功夫,伴随着体力的回复,人马上又会重新找到做些事情的兴趣.但是,如果是一群人一起无聊,那情况就会变得复杂很多.这种情况我想在目前的大学校园是很多见的吧,尤其是在大四即将毕业的男生宿舍里.大家都没事可做,于是相互抱怨着无聊,而当一个无所事事的人向另一个无所事事的人倾诉自己是多么无聊的时候,通常对方也会非常消极的认同,从结果上来看,这种互相抱怨非但没有减轻这种状态的影响,反而是以近乎指数级的速度加剧了这种负面状态.\n\n当一群人都处于无聊或者无所事事状态的时候,人们就会变得很随便.这种时候只要有一个人提出了一个想法,典型的比如玩游戏,或者出去吃个饭,通常会得到大家的一致同意,但是做这些事情却无法减轻无聊所带来影响,反而会慢性的加剧这个过程,等到下一个无聊周期来到的时候,常常会反应的更加剧烈.那么,我们假设一下提建议的是个比较积极乐观的人,他提出了一个某种程度上有意义的活动,比如说大家一起上图书馆或者一起出去运动一下,但是,就一般情况而言,这种情况通常不会得到大多数无聊患者的认同.因为大家之所以无聊,不是因为真的没事可做,只是因为不想去做那些该做的却看似麻烦的事情,其原因就在于人们并不是通过去直面问题本身而是通过一种逃避的方式来规避问题.\n\n很不巧的,我现在就处在这种尴尬的情景之中.不过随手写写也着实减轻了我不少的负面情绪,至少,我有事情做了啊!但是,仔细想想,为什么我会觉得无聊,写博文真的是我想做的事情吗?其实,我写博文也只是在减轻无聊带来的影响而已,如果把无聊的状态定义为bad,那么,有事情做只能定义为not bad,而真正该做的或者说让人充满活力的事情则才能称之为good.由此看来,我依然没有直面问题的根源.一时间,我不知道如何去面对这样日复一日,毫无生机的生活.\n\n生活是什么样的?我希望的生活又是什么样的?每一天,每一天,我看着同样的风景,面对熟悉的人群,做着机械性的事物.如同一台被设定好了的机器,不停的空转,却没有任何产出,这样的生活毫无乐趣可言.当我深深的意识到这种情况时,我就明白,it is time to change something 了.\n\n我想从原来的生活轨迹中抽离出来,出个远门,感受一下冬日里温暖的阳光;去趟图书馆,静静的看一下午闲书;想一些荒诞的点子,然后去尝试实现.或许生活就应该是这样子,走出自己的牢笼,看不同的风景,邂逅不同的人,做有意思的事.然后,从一点一点开始积累,让生活呈现不一样的姿态,让自己收获不同的心情.以一颗充满活力的心去迎接,去体会每一天.简单纯粹,不为了生活而生活,而是为了发现更多...","slug":"forwhat","published":1,"updated":"2015-04-08T15:08:07.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o9o001tkadytxahg5gm"},{"title":"fedora 17 更换登陆背景图片","date":"2013-02-20T08:27:12.000Z","_content":"\n新年各种繁琐的事情解决完，终于能有点时间折腾下电脑了。自从装完fedora 17后一直感觉fedora 17登陆界面的背景不怎么好看，遂换之。本文仅作备忘使用。\n\n![Beefy Miracle 默认背景图片](/img/f17bg/beefy-miracle.png)\n\n# 切换至root\n```\n$ su -\n```\n\n# 切换至背景配置目录下\n```\n# cd /usr/share/backgrounds/beefy-miracle/default/\n```\n注意路径中的`beefy-miracle`为fedora 17的代号，如果fedora的版本为15那么代号就为`Lovelock`，16的话就是`Verne`，根据自己的fedora版本而定。\n有关fedora各版本的代号参见：[](http://zh.wikipedia.org/wiki/Fedora) 中 `发布历史` 一节。\n\n在`default`目录下，我们可以发现有一个`beefy-miracle.xml`文件和`normalish`, `standard`, `wide` 三个文件夹。\n\n![default目录](/img/f17bg/bmbg.png)\n\n此处的`beefy-miracle.xml`文件记录了背景图片的配置信息。我们可以打开看一下里面的内容：\n\n  \n```bash\n <!-- Wide 16:10 -->\n /usr/share/backgrounds/beefy-miracle/default/wide/my_wallpaper.jpg\n <!-- Standard 4:3 -->\n /usr/share/backgrounds/beefy-miracle/default/standard/beefy-miracle.png\n <!-- Normalish 5:4 -->\n /usr/share/backgrounds/beefy-miracle/default/normalish/beefy-miracle.png\n```\n这里我们主要关注下`file`标签内的内容。可以清楚的看到, `size` 标签内的指定了不同屏幕长宽比下的背景图片的路径。\n\n`wide`文件夹下的背景图像为16:10的, `standard`文件夹下为4:3的, `normalish`文件夹下为5:4 的。(等等，好像缺了点什么，16:9的到哪去了，我的笔记本是16:9的啊，这不科学= =)\n那么，如果长宽比是16:9的同学，先暂且把16:9和16:10看成一样的吧，因为它们都是`wide`的嘛 :-D\n\n# 替换背景图片\n接下来思路就很清晰了，我们只要把对应文件夹下的图片替换成我们自定义的图片或者更改`beefy-miracle.xml`文件中对应的路径即可。\n\n由于本人的屏幕长宽比为16:9，所以我选了一张个人认为还算好看的16:9壁纸，将其放到 `/usr/share/backgrounds/beefy-miracle/default/wide/`目录下，并命名为`my_wallpaper.jgp`(对，你没有看错，jpg文件也是可以的！) 然后再将`beefy-miracle.xml`文件中对应的路径作如下修改：\n```\n/usr/share/backgrounds/beefy-miracle/default/wide/my_wallpaper.jpg\n```\n\n# 重启X Windows\n按`Ctrl + Alt + Backspace`重启 X Window，即可看到新的登陆背景啦～\n\n最后，贴一下我的登陆背景图片作为本文结尾吧～\n\n![](/img/f17bg/my_wallpaper.jpg)\n\n(此壁纸来源于国外壁纸网站: ~~http://wallbase.cc~~(wallbase已经停止服务) http://alpha.wallhaven.cc 个人认为是个相当不错的壁纸网站，推荐之)","source":"_posts/f17bg.md","raw":"title: \"fedora 17 更换登陆背景图片\"\ndate: 2013-02-20 16:27:12\ntags: [Fedora, Linux, gnome, maintenance]\n---\n\n新年各种繁琐的事情解决完，终于能有点时间折腾下电脑了。自从装完fedora 17后一直感觉fedora 17登陆界面的背景不怎么好看，遂换之。本文仅作备忘使用。\n\n![Beefy Miracle 默认背景图片](/img/f17bg/beefy-miracle.png)\n\n# 切换至root\n```\n$ su -\n```\n\n# 切换至背景配置目录下\n```\n# cd /usr/share/backgrounds/beefy-miracle/default/\n```\n注意路径中的`beefy-miracle`为fedora 17的代号，如果fedora的版本为15那么代号就为`Lovelock`，16的话就是`Verne`，根据自己的fedora版本而定。\n有关fedora各版本的代号参见：[](http://zh.wikipedia.org/wiki/Fedora) 中 `发布历史` 一节。\n\n在`default`目录下，我们可以发现有一个`beefy-miracle.xml`文件和`normalish`, `standard`, `wide` 三个文件夹。\n\n![default目录](/img/f17bg/bmbg.png)\n\n此处的`beefy-miracle.xml`文件记录了背景图片的配置信息。我们可以打开看一下里面的内容：\n\n  \n```bash\n <!-- Wide 16:10 -->\n /usr/share/backgrounds/beefy-miracle/default/wide/my_wallpaper.jpg\n <!-- Standard 4:3 -->\n /usr/share/backgrounds/beefy-miracle/default/standard/beefy-miracle.png\n <!-- Normalish 5:4 -->\n /usr/share/backgrounds/beefy-miracle/default/normalish/beefy-miracle.png\n```\n这里我们主要关注下`file`标签内的内容。可以清楚的看到, `size` 标签内的指定了不同屏幕长宽比下的背景图片的路径。\n\n`wide`文件夹下的背景图像为16:10的, `standard`文件夹下为4:3的, `normalish`文件夹下为5:4 的。(等等，好像缺了点什么，16:9的到哪去了，我的笔记本是16:9的啊，这不科学= =)\n那么，如果长宽比是16:9的同学，先暂且把16:9和16:10看成一样的吧，因为它们都是`wide`的嘛 :-D\n\n# 替换背景图片\n接下来思路就很清晰了，我们只要把对应文件夹下的图片替换成我们自定义的图片或者更改`beefy-miracle.xml`文件中对应的路径即可。\n\n由于本人的屏幕长宽比为16:9，所以我选了一张个人认为还算好看的16:9壁纸，将其放到 `/usr/share/backgrounds/beefy-miracle/default/wide/`目录下，并命名为`my_wallpaper.jgp`(对，你没有看错，jpg文件也是可以的！) 然后再将`beefy-miracle.xml`文件中对应的路径作如下修改：\n```\n/usr/share/backgrounds/beefy-miracle/default/wide/my_wallpaper.jpg\n```\n\n# 重启X Windows\n按`Ctrl + Alt + Backspace`重启 X Window，即可看到新的登陆背景啦～\n\n最后，贴一下我的登陆背景图片作为本文结尾吧～\n\n![](/img/f17bg/my_wallpaper.jpg)\n\n(此壁纸来源于国外壁纸网站: ~~http://wallbase.cc~~(wallbase已经停止服务) http://alpha.wallhaven.cc 个人认为是个相当不错的壁纸网站，推荐之)","slug":"f17bg","published":1,"updated":"2015-04-07T15:34:52.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o9p001ykadyhuy5b5t8"},{"title":"CNCC 2012 参会小记","date":"2012-10-23T14:39:24.000Z","_content":"\nCNCC 2012(China National Computer Congress)于10月18日至20日在大连召开. 这大会是由CCF(China Computer Federation)主办的, 而CCF今年首次决定邀请并全额资助近100名各高校的本科生参会, 我呢, 就因此幸运的参加了本次会议. 第一次参加如此高级别的会议, 除了见到各路大牛各显神通, 被虐的体无完肤之外, 我个人多少是见识到了点东西, 对目前计算机这个行业有了一点点粗浅的认识. 从21号晚上回到学校, 打理完各种繁琐的事情后, 现在终于有机会能安静的坐下来, 记录一下自己的一些收获. <!-- more -->\n\nCNCC 2012(China National Computer Congress)于10月18日至20日在大连召开. 这大会是由CCF(China Computer Federation)主办的, 而CCF今年首次决定邀请并全额资助近100名各高校的本科生参会, 我呢, 就因此幸运的参加了本次会议. 第一次参加如此高级别的会议, 除了见到各路大牛各显神通, 被虐的体无完肤之外, 我个人多少是见识到了点东西, 对目前计算机这个行业有了一点点粗浅的认识. 从21号晚上回到学校, 打理完各种繁琐的事情后, 现在终于有机会能安静的坐下来, 记录一下自己的一些收获. \n\n# 时代主题--云计算\n\n云计算这个词在近几年可谓是不绝于耳, 可是说实在话, 在参会以前, 我对云计算究竟是个什么东西完全没有一个清晰或者说形象的认识. 也许大家都觉得说云计算会成为主流, 可是云计算是在什么情况下出现的? 它究竟是什么? 有什么样的特性? 能解决那些问题? 云计算对于个人和企业来说有什么意义? 这个时代是不是非云计算不可? 有太多太多的问题我没搞清楚, 所以导致我看云是云, 就是一团模模糊糊的东西, 像极了云....囧.\n\n## 云是怎么飘来的?\n\nOK, 有了问题, 我们自然能顺着问题从而接近答案. 或许大家都能意识到, 近几年大量的社交网络在蓬勃发展, 像什么Facebook, Twitter, Google Plus, 哦, 好像漏说了新浪微博, 人人之类之类的, 总之很多就是了. 以FB为例, 光是在FB一天上传的图片就多达3亿张, 达到500TB的数据量, 如果是你, 你会怎么处理这些数据? 之前看到过一篇文章说, 互联网现在每年的数据量都在成倍的增长, 那么如果令今年的数据量为单位1, 那么去年的数据量就是1/2, 前年的就是1/4, 大前年的就是1/8, 那么很显然, 我们可以看到到目前为止的数据总量为: `1 + 1/2 + 1/4 + 1/ 8 +... < 2`, 也就是说明年互联网上的数据将超过之前互联网全部数据的总和. 当然, 此种说法也不一定科学, 也许只是危言耸听, 但是我们从中可以看到数据确实在疯狂的增长, 而处理越来越多的数据也成为一项巨大的挑战. 从数据量上来看, 我们需要海量的储存, 说好听点, 就成了\"云储存\", 但是当纯的储存显然是不够的, 我们还需要对数据进行处理, 而处理就涉及到计算能力, 那么我们又需要多少的计算能力能解决这么多数据以及其它种类繁多请求的需要, 显然我的一台破笔记本是不够的, 什么, 你说你愿意捐我一台, 哦, 那太好了, 可惜那也还是不够的. 我们需要的是高性能计算, 此时你是不是想起了IBM, 或者是\"天河\", \"银河\"之类之类的? 额, 那东西快是快, 但是就是太贵啊...XD, 所以如果能把许多台便宜的PC拼起来, 达到N个臭皮匠顶过诸葛亮的效果也许是个不错的主意. 这里就很自然的涉及到了成本的问题. 恩, 对的, 降低成本很重要, 能到达绿色环保的标准除了能让你获得光荣称号外, 还会让你赚的盆满钵满. 如何用最少的电力, 最少的消耗, 来解决当前互联网最大的问题也是一项很赚钱的挑战.\n\n综上所述, 我们可以看到, 云计算不是和我的博客一样突然间蹦出来的, 而是在巨大的变化和需求下应运而生的, 云计算所直接面对的是庞大的数据, 复杂的计算以及诸多的变化. 由此我们也就不难理解, 为什么关于云计算, 是由产业界而不是由学术界提出来的, 人家搞公司, 搞服务的, 首先面对的是Market, money在驱使这各大厂商你追我赶, 推陈出新. 所以, 目前我们可以可以看到的云都是飘在产业界上的.\n\n## 云长什么样?\n\n在介绍了一些云计算产生的环境背景后, 或许我们该看看云计算究竟长什么样. 对于云计算, 或许很难说它是什么样子的, 小朋友G说云是棉花糖状的, 小朋友A说云是海绵状的, 小朋友T说云是马一样形状的. 哦...哦..我们在说云计算, 不是云, 不过其实也差不了多少啦, 作为一个圈外人士, 我们确实很难看清云计算到底是一个什么东西, 因此, 不妨看看现在产业界内所漂着的几朵云吧, 然后从这几朵云出发, 来归纳归纳.\n\n首先, 我们知道, 云计算这东西最早是Google提出来的, 这里扯一下, 为什么是由Google提出来的? 因为Google手上有数据, 有需求, 同时有技术, 所以Google提出云计算理所当然. 关于Google的云计算服务, 我真的说不好, 主要还是能力有限, Google的那帮人在想什么确实很难弄明白, 不过我认为Google的云服务却是体会的最真切的, [Google Cloud](https://cloud.google.com/products/)我想更多是体现在Application Cloud上, Gmail, App Engine, Google Now, Google Drive等等服务都是耳熟能详的. Google是云计算的提出者, 同时也是云计算领域的技术领先者, 但是在商业解决方案上, Amazon却比Google做的更好. [Amazon EC2](http://aws.amazon.com/ec2/) (Amazon Elastic Compute Cloud)是目前中小型公司以及站长们的首选. 除了国外的两个巨头之外, 目前国内, 阿里云也刚刚诞生了, 不过鉴于阿里云此次作为赞助商的身份在CNCC上得到了足够的曝光率, 这里就不多广告了. 稍微了解下这些云计算产品, 可以发现, 他们都存在一些基本的架构, 就是在数据中心(数据中心由成千上万台的廉价微型机组成)上构建大型分布式系统(大部分基于开源的[Hadoop](http://en.wikipedia.org/wiki/Apache_Hadoop)), 向上层隐藏底层复杂的硬件环境, 在大型分布式系统上再构建各式各样的基础服务, 最后通过统一的接口以资源的形式提供给用户计算和存储资源. 从资源的角度来看, 云计算就有点像虚拟主机的租赁服务, 只是虚拟主机的性能根据需求不同罢了. 最后我们得到的, 计算能力也好, 存储空间也好, 都是资源, 云只是资源分配和管理的代名词. 在对云计算有了初步的印象后, 让我们来看看云计算存在的一些特点.\n\n### 弹性计算\n\n弹性计算(Elastic Computing), 顾名思义, 就是具有伸缩性的计算, 貌似讲的还是不太清楚, 那我们就来看一些实例来感受下什么是弹性计算吧. Case 1. 如果你作为一个网站的站长, 你的网站遭受了XXX黑客团体的攻击, 当前规模的网站只能承受一天100万次的访问, 但是XXX团体却比你拥有更多的服务器并不断发起进攻, 导致你的网站的访问量瞬间达到了1000万次并导致网站瘫痪, 此时, 你要不选择增加整个运营规模与对方拼资源, 要不就更换域名ip, 后者明显在扯淡嘛, 所以在面对这个问题的时候站长们总是很被动的, 问题就在于服务器提供的访问能力是个静态的定值, 如果服务器能按需提供资源, 那么以上问题解决起来就容易了许多. Case 2. 大家知道伟大的双11马上就要来了, 在这个神圣的日子里, 各大电商总是要联袂促销一把, 用户也很乐意感受一把节日氛围纷纷掏出腰包为自己买一份两份许多份节日礼物, 此时, 对于各大电商的网站, 就会存在这么一个问题, 网站的访问量会在某些特定的时间瞬间达到一个很高的数值, 为了应付巨大的访问量, 必然要配到相应响应能力的服务器, 但是除去那些特别的日子, 剩下的大部分时间网站的流量都稳定在一个相对较低的水平, 为了极个别的几天超高流量而支付整月甚至整年高昂的服务器费用显然是不合理的. 通过以上的2个Cases可以看出, 弹性计算提供了一种动态的资源解决方案. 可以根据动态的需求提供相应的资源, 从而提升资源的利用率, 在面对网络攻击时也更加健壮.\n\n### 虚拟化\n\n虚拟化(Virtualization)听起来像是一个很高深的技术, 虚拟化包括硬件层的虚拟化和OS层的虚拟化, 除此之外, 还有全虚拟化和半虚拟化, 但无论是哪种方式, 虚拟化的意图就是通过技术手段隐藏平台的复杂性, 从而呈现一致的资源, 虚拟化在云计算的基础软件中扮演着重要角色.\n\n### 海量资源\n\n之所以将云计算称之为云计算, 是因为不管从资源的整合形式, 还是或许方式上, 云计算都和云有着类似之处, 云计算的一个很大的特点就是海量的资源, 海量的存储空间, 强大的计算能力, 快速的网络等等. 在云中可以存这大量数据, 跑着各式各样不同的应用, 运行着种类繁多的服务, 可以说云计算是SaaS(Software as a service)的集中体现.\n\n当然, 除此之外, 关于云计算的东西还有很多很多, 我作为一个酱油党在华丽的飘过CNCC 2012后, 脑袋里能留下的印象也就只有这些了, 不过从本届大会的报告内容上来看, 云计算已经势不可挡的成为互联网新时代的焦点了, 未来的服务, 应用以及数据都不可避免的向云端迁移, 而人们的生活也会通过各种各样的终端与云计算发生密切的联系.\n\n# 价值所在--Big Data\n\n有云计算在的地方怎么能少得了大数据, 随着互联网上的数据持续增长, 数据的重要性渐渐被人们所发掘, 在数据量小的时代, 我们只需要将数据进行适当的存放, 管理,并不重视数据中所潜在的信息. 但是到了当前这样一个大数据的时代, 巨大的数据量使得挖掘数据间一些细微的联系和隐含的信息成为可能. 说道数据挖掘, 总是让我联想起尿布与啤酒的故事, 略低端了. 不过事实也的确如此, 你手上如果拥有一个超市的销售数据, 那么你通过适当的分析这些数据, 可以发现尿布销量和啤酒销量之间的联系, 进而同过将尿布和啤酒摆在一起以提高业绩. 你手上如果拥有当当的图书销售记录, 你就可以在消费者相中算法导论之后, 再为其推荐数据结构与算法分析, C++ primer之类之类的...当然, 此时你会疑问当当为什么不给你推荐丰乳肥臀呢, 呃, 这个我只能说搞计算机的童鞋们可能不会在买完算法导论之后再买丰乳肥臀吧, 至少我是这样...我们在进一步的设想一下, 如果你了解你的用户, 知道他们干什么, 对什么感兴趣, 需要什么, 那么你很自然的可以通过这些信息来创收, 不管是投放针对性的广告, 还是为其提供一些针对性的付费服务. 问题就在于如何得到有价值的信息, 我能想到的一种方式就是通过万能的调查问卷, 在用户进网站, 收邮件或者使用软件的时候蹦出来, 然后礼貌的问一下, 愿意配合弄一份调查问卷吗? 我们不会泄露你的隐私, 但同样的不会给你发钱. 好吧, 一般而言, 我是直接X掉这种提示的, 或者觉得没有必要再点击相应的网址或使用相应的服务, 它们这么做貌似有点烦人. 所以, 或许我们采用一种更加委婉, 更加优雅的方式, 来猜测用户的信息来得更理想一点. 通过用户的一些操作, 提交的个人的数据, 访问历史等等诸如此类的看似无所谓的数据, 从中就可以分析出一些用户更深层次的需要, 然后.....嘿嘿, money就来了. 呃, 这看起来是件蛮有意思并且蛮有钱途的事情, 恩, 在这个Big Data的时代, 搞数据挖掘的童鞋们真幸福啊. 正是由于数据中蕴含着潜在的巨大价值, 所以在本次大会上, 很多产业界的代表都对数据给予了极大的关注和重视, 似乎隐隐约约透露出一种得数据者得天下的态势. 从Google和FB还有其他一些IT巨头的一些服务上, 貌似可以看出点端倪.\n\n在数据占据如此之高的战略情况下, 不禁让人担心以后的IT圈子里, 会不会发生强者越强, 弱者越弱的现象, 因为可以很明显的看到, 大公司, 大企业手上握有大量的用户信息, 而他们可以利用这些信息进行更好更具个性化的服务, 而小企业, 手上根本就没有多少可供分析的数据, 在产品和服务的体验上, 未来难免会落下风. 或许, 在目前, 数据的壁垒还未形成, 不过在当前形势下, 也确实该反思反思小企业, 小产品的制胜之道, 啊, 说到这里, 突然间觉得大学生创业略微有点艰难啊, 也罢, 还是先把这篇文章写完在考虑这个问题吧=  =\n\n# 互联你我--移动终端\n\n从近几年的各大厂商的电子产品销售数据上很直观可以看出, 传统的PC销量正在逐年下滑, 而以智能手机, 平板为代表的移动终端市场正逐渐兴起, 貌似逐渐这词用的不对, 应该说是火的不得了. 就我个人的感觉是自从07年苹果发布iphone后, 随着itunes store和app store的商业模式获得成功, 智能手机真正开始进入人们的日常生活, 从此便一发不可收拾. 我依旧还记得09年, 当我拿到一台水货iphone 3g时的奇妙感觉, 因为在那之前, 从未想过, 设备是可以通过触摸来操纵的, 更令人惊讶的是一台小小的手机上竟然可以运行各种各样新奇到难以想象的应用, 当时就觉得, 我至少一个月放不下这货了. 时隔短短几年, ipad的横空出世又一次改变了人们的上网观念. OK, 我发现我不能再多回忆了, 略微有点脑残粉的感觉. 就现在看来, 不论是Android, WP, 还是Nexus 7, Surface之类之类的, 可以看到各大巨头对移动终端的市场争夺, 已经进入了白热化阶段, 至于程度如何, 童鞋们只要看看之前说\"把硬件交给合作伙伴, 自己打造软件\"的微软都开始插足硬件市场便可略知一二.\n\n移动终端成为未来趋势有其内在和外在的原因. 首先, 移动终端的最大特点就是便携性, 而便携性就决定了移动终端能长时间处在用户随手可及的位置; 其次, 近几年来, 智能终端的性能不断地在疯狂的提升, 现在手机都出4核, 8核了, 智能终端性能已经出现了过剩, 也就是说智能终端可以处理越来越复杂的任务, 这样, 很自然的, 原本需要在PC上能做的事情, 现在在移动设备上大部分都能做了. 除了性能上的提升, 现在的移动终端上搭载了越来越多的传感器, 像什么陀螺仪, 重力感应器, 光传感器等等, 丰富的传感器催生了各式各样实用有趣的应用和服务. 说到这方面的极其成功的例子, 就让人不禁想到了XX利器--微信. 从这个方面上来讲, 移动终端提供了更多PC上没有的应用. 另外一个不可忽略的例子是, 移动终端使得人们能轻而易举的接入社交网络. 我们现在随处可见低头玩手机, 玩平板的人, 典型的场所诸如课堂, 公共交通工具里, 饭桌上等等. 人们越来越倾向在数字世界中表达自我, 继而数字世界中投入的时间越来越多.\n\n移动终端促进了物理世界和数字世界的连结. 物理世界和数字世界的联系日趋紧密, 我们可以发现我们的生活早已离不开虚拟的数字世界. 在本次大会上, 有不少令人印象深刻的报告涉及到了相关问题. 其中比较有意思的就是科大讯飞董事长刘庆峰博士的报告, 他在台上当场演示了科大讯飞在手机上的语音助理和语音输入功能, 并认为语音会成为将来手机必备的功能. 刘博士的报告总体给人感觉是很有意思的, 有兴趣的童鞋可以看看我上传到优酷上的一段现场视频(前面一部分视频由于拍摄问题可能不太清晰, 见谅, 坚持看到最后有亮点 :-P) [观看地址](http://v.youku.com/v_show/id_XNDY1MDk0MTI0.html). 本次大会还邀请到了MSRA负责Kinect项目的副院长郭百宁博士, 他的报告主要介绍了Kinect中的摄像头体感技术, 听完感觉微软的Kinect技术含量还是很高的, 因为Kinect只用一个100刀摄像头, 完成了2000刀3D深度摄像头干的活. Kinect捕获到的只是一个平面画面, 因此需要解决诸如深度, 识别, 环境光, 肢体遮挡等问题. 好像跑的有点远了, 其实对于郭院长报告最让我印象深刻的是他演示了Kinect上的一款chat类的社交游戏 [YouTube观看地址](https://www.youtube.com/watch?v=xmmPhcoLbk0) 该游戏做的就是通过摄像头, 在游戏场景中创建出一个虚拟的人物(称之为your avatar)来代表玩家, 不同玩家在不同地点通过Kinect连接到同一个游戏场景中进行交谈, Kinect会捕捉玩家的面部表情和肢体动作, 并如实反映在虚拟的chat room中. 这个游戏还是蛮有意思的,  至少我是这么觉得, 关键就在于它通过设备, 将人们从真实的物理世界代入到了虚拟的数字世界中, 并带来了欢乐. 浙江大学的潘纲教授也在移动互联网与智能终端的专题论坛上介绍了一些有意思的东西, 他们利用手机上的陀螺仪把手机做成了一个类似pointer的设备, 将手机的顶部对准家电, 对其操作, 对准电脑开机, 传照片等等, 总结来说就是利用手机自带的传感器将手机转换成了一个空间指向设备, 实现了对物理环境的操控. 说到这里, 是不是觉得物联网的感觉出来了, 其实做的事情都差不多, 只是换了个说法罢了. 从中我们可以看到, 智能移动终端, 将人们带入了虚拟的数字世界当中, 并在那里, 连结了你和我.\n\n# 其它\n\n- **trade-off**\n\n\ttrade-off这个词也算是我在这次大会上听到的高频词了, trade-off是权衡的意思, 不管是在学术中, 还是在工业上, 只要是和实现相关的, 大都都涉及到trade-off. 例如在大会上北大的高文教授做的一个关于多媒体压缩的报告上说目前研制的压缩标准理论上能达到上千的压缩率, 但实际上能实现的就只能是160:1, 其中就涉及到具体实现时各种困难, 压缩率从理论上的上千到160就是被各种复杂的实际情况给trade-off掉了. 在学术研究上, trade-off现象相对还比较少见, 但是在产业上, trade-off可谓经常碰到. 记得当时MSRA 的郭院长在大会上探讨了如何解决平面图像上的深度, 动作捕捉, 肢体覆盖等复杂问题, 结束后就有人提问说, 如果加一个摄像头, 就可以建立立体影像从而简化问题. 当时郭院长就回答, 我们生产产品的, 希望能把价格压低, 在技术和成本之间, Kinect团队选择了通过软件技术来降低硬件成本. 这是个很典型的工业界中的trade-off. 其实在平常的学习或项目中, 我们也经常碰到这个trade-off的问题, 这个有时无法避免, 碰到多了, 我们就不会说, 让我来权衡权衡, 而改口说\"这个需要trade-off一下.\"╮(╯▽╰)╭\n\n- **企业业务的垂直化**\n\n\t本次大会中, 产业界的各位讲者介绍了各家公司对于当前业界的一些见解和预测, 其中一个印象比较深刻的就是涉及到了企业的垂直化问题(我不知道这种说法是否规范) 其实, 企业业务的垂直化主要描述的是各大行业巨头在立足自己传统强势业务的基础上, 以优势业务为基点, 向两侧纵向扩展业务范围, 从而增大用户粘性, 巩固自己的原有市场并开阔新的市场. 我们可以看到很多这样的例子, 例如Amazon是做电商的, 现在向下搞起了硬件Kindle, 向上开始搞起了EC2云计算服务. 微软是做操作系统的, 现在向下搞起了Surface, 向上拓展搜索,移动市场等业务. 更典型点的就是苹果了, 设备, 操作系统, 应用商店, icloud全都包了 . 现在企业的垂直化给人感觉像是战国时期的诸侯割据, 各家在保住自己地盘的基础上, 不断侵蚀他人地盘. 所以我们看到, 当iphone火的时候, 智能手机烽烟四起, 当ipad火的时候, 平板之争悄然打响, 当云计算火的时候, 各大厂商都纷纷推出了各自的云产品. 话说, 这几年, 我们在IT界看到的你一脚, 我一脚的相互涉足对方领域已经习以为常, 看着各大巨头争得你死我活, 我们除了能在一旁一边喝水, 一边更博客之外, 还需要理性的选择合适自己的服务和产品, 以免陷入纷繁复杂的市场抢夺战中...\n\n# 后记\n\n呃, 我看写这么多也差不多了, 初次搞博客, 没什么经验, 写的也略显杂乱, 权且是写了一次参会报告以记录下自己的所见所闻所感. 文中不免有遗漏, 错误之处, 如果有哪位看官有意见, 请慷慨相告(但愿有看官吧, 没有吧, 也不能强求= =). 其实我原本是想唠叨加吐槽的, 比如什么我去大连参会的第一天下午就发烧啦, 比如自己英语太烂不好意思提问啦, 又比如没认识几个其他学校来的美女啦诸如此类的, 不过后来想想就算了吧. 恩, that's all.","source":"_posts/cncc2012.md","raw":"title: \"CNCC 2012 参会小记\"\ndate: 2012-10-23 22:39:24\ntags: [conference, cloud computing, big data, mobile, ]\n---\n\nCNCC 2012(China National Computer Congress)于10月18日至20日在大连召开. 这大会是由CCF(China Computer Federation)主办的, 而CCF今年首次决定邀请并全额资助近100名各高校的本科生参会, 我呢, 就因此幸运的参加了本次会议. 第一次参加如此高级别的会议, 除了见到各路大牛各显神通, 被虐的体无完肤之外, 我个人多少是见识到了点东西, 对目前计算机这个行业有了一点点粗浅的认识. 从21号晚上回到学校, 打理完各种繁琐的事情后, 现在终于有机会能安静的坐下来, 记录一下自己的一些收获. <!-- more -->\n\nCNCC 2012(China National Computer Congress)于10月18日至20日在大连召开. 这大会是由CCF(China Computer Federation)主办的, 而CCF今年首次决定邀请并全额资助近100名各高校的本科生参会, 我呢, 就因此幸运的参加了本次会议. 第一次参加如此高级别的会议, 除了见到各路大牛各显神通, 被虐的体无完肤之外, 我个人多少是见识到了点东西, 对目前计算机这个行业有了一点点粗浅的认识. 从21号晚上回到学校, 打理完各种繁琐的事情后, 现在终于有机会能安静的坐下来, 记录一下自己的一些收获. \n\n# 时代主题--云计算\n\n云计算这个词在近几年可谓是不绝于耳, 可是说实在话, 在参会以前, 我对云计算究竟是个什么东西完全没有一个清晰或者说形象的认识. 也许大家都觉得说云计算会成为主流, 可是云计算是在什么情况下出现的? 它究竟是什么? 有什么样的特性? 能解决那些问题? 云计算对于个人和企业来说有什么意义? 这个时代是不是非云计算不可? 有太多太多的问题我没搞清楚, 所以导致我看云是云, 就是一团模模糊糊的东西, 像极了云....囧.\n\n## 云是怎么飘来的?\n\nOK, 有了问题, 我们自然能顺着问题从而接近答案. 或许大家都能意识到, 近几年大量的社交网络在蓬勃发展, 像什么Facebook, Twitter, Google Plus, 哦, 好像漏说了新浪微博, 人人之类之类的, 总之很多就是了. 以FB为例, 光是在FB一天上传的图片就多达3亿张, 达到500TB的数据量, 如果是你, 你会怎么处理这些数据? 之前看到过一篇文章说, 互联网现在每年的数据量都在成倍的增长, 那么如果令今年的数据量为单位1, 那么去年的数据量就是1/2, 前年的就是1/4, 大前年的就是1/8, 那么很显然, 我们可以看到到目前为止的数据总量为: `1 + 1/2 + 1/4 + 1/ 8 +... < 2`, 也就是说明年互联网上的数据将超过之前互联网全部数据的总和. 当然, 此种说法也不一定科学, 也许只是危言耸听, 但是我们从中可以看到数据确实在疯狂的增长, 而处理越来越多的数据也成为一项巨大的挑战. 从数据量上来看, 我们需要海量的储存, 说好听点, 就成了\"云储存\", 但是当纯的储存显然是不够的, 我们还需要对数据进行处理, 而处理就涉及到计算能力, 那么我们又需要多少的计算能力能解决这么多数据以及其它种类繁多请求的需要, 显然我的一台破笔记本是不够的, 什么, 你说你愿意捐我一台, 哦, 那太好了, 可惜那也还是不够的. 我们需要的是高性能计算, 此时你是不是想起了IBM, 或者是\"天河\", \"银河\"之类之类的? 额, 那东西快是快, 但是就是太贵啊...XD, 所以如果能把许多台便宜的PC拼起来, 达到N个臭皮匠顶过诸葛亮的效果也许是个不错的主意. 这里就很自然的涉及到了成本的问题. 恩, 对的, 降低成本很重要, 能到达绿色环保的标准除了能让你获得光荣称号外, 还会让你赚的盆满钵满. 如何用最少的电力, 最少的消耗, 来解决当前互联网最大的问题也是一项很赚钱的挑战.\n\n综上所述, 我们可以看到, 云计算不是和我的博客一样突然间蹦出来的, 而是在巨大的变化和需求下应运而生的, 云计算所直接面对的是庞大的数据, 复杂的计算以及诸多的变化. 由此我们也就不难理解, 为什么关于云计算, 是由产业界而不是由学术界提出来的, 人家搞公司, 搞服务的, 首先面对的是Market, money在驱使这各大厂商你追我赶, 推陈出新. 所以, 目前我们可以可以看到的云都是飘在产业界上的.\n\n## 云长什么样?\n\n在介绍了一些云计算产生的环境背景后, 或许我们该看看云计算究竟长什么样. 对于云计算, 或许很难说它是什么样子的, 小朋友G说云是棉花糖状的, 小朋友A说云是海绵状的, 小朋友T说云是马一样形状的. 哦...哦..我们在说云计算, 不是云, 不过其实也差不了多少啦, 作为一个圈外人士, 我们确实很难看清云计算到底是一个什么东西, 因此, 不妨看看现在产业界内所漂着的几朵云吧, 然后从这几朵云出发, 来归纳归纳.\n\n首先, 我们知道, 云计算这东西最早是Google提出来的, 这里扯一下, 为什么是由Google提出来的? 因为Google手上有数据, 有需求, 同时有技术, 所以Google提出云计算理所当然. 关于Google的云计算服务, 我真的说不好, 主要还是能力有限, Google的那帮人在想什么确实很难弄明白, 不过我认为Google的云服务却是体会的最真切的, [Google Cloud](https://cloud.google.com/products/)我想更多是体现在Application Cloud上, Gmail, App Engine, Google Now, Google Drive等等服务都是耳熟能详的. Google是云计算的提出者, 同时也是云计算领域的技术领先者, 但是在商业解决方案上, Amazon却比Google做的更好. [Amazon EC2](http://aws.amazon.com/ec2/) (Amazon Elastic Compute Cloud)是目前中小型公司以及站长们的首选. 除了国外的两个巨头之外, 目前国内, 阿里云也刚刚诞生了, 不过鉴于阿里云此次作为赞助商的身份在CNCC上得到了足够的曝光率, 这里就不多广告了. 稍微了解下这些云计算产品, 可以发现, 他们都存在一些基本的架构, 就是在数据中心(数据中心由成千上万台的廉价微型机组成)上构建大型分布式系统(大部分基于开源的[Hadoop](http://en.wikipedia.org/wiki/Apache_Hadoop)), 向上层隐藏底层复杂的硬件环境, 在大型分布式系统上再构建各式各样的基础服务, 最后通过统一的接口以资源的形式提供给用户计算和存储资源. 从资源的角度来看, 云计算就有点像虚拟主机的租赁服务, 只是虚拟主机的性能根据需求不同罢了. 最后我们得到的, 计算能力也好, 存储空间也好, 都是资源, 云只是资源分配和管理的代名词. 在对云计算有了初步的印象后, 让我们来看看云计算存在的一些特点.\n\n### 弹性计算\n\n弹性计算(Elastic Computing), 顾名思义, 就是具有伸缩性的计算, 貌似讲的还是不太清楚, 那我们就来看一些实例来感受下什么是弹性计算吧. Case 1. 如果你作为一个网站的站长, 你的网站遭受了XXX黑客团体的攻击, 当前规模的网站只能承受一天100万次的访问, 但是XXX团体却比你拥有更多的服务器并不断发起进攻, 导致你的网站的访问量瞬间达到了1000万次并导致网站瘫痪, 此时, 你要不选择增加整个运营规模与对方拼资源, 要不就更换域名ip, 后者明显在扯淡嘛, 所以在面对这个问题的时候站长们总是很被动的, 问题就在于服务器提供的访问能力是个静态的定值, 如果服务器能按需提供资源, 那么以上问题解决起来就容易了许多. Case 2. 大家知道伟大的双11马上就要来了, 在这个神圣的日子里, 各大电商总是要联袂促销一把, 用户也很乐意感受一把节日氛围纷纷掏出腰包为自己买一份两份许多份节日礼物, 此时, 对于各大电商的网站, 就会存在这么一个问题, 网站的访问量会在某些特定的时间瞬间达到一个很高的数值, 为了应付巨大的访问量, 必然要配到相应响应能力的服务器, 但是除去那些特别的日子, 剩下的大部分时间网站的流量都稳定在一个相对较低的水平, 为了极个别的几天超高流量而支付整月甚至整年高昂的服务器费用显然是不合理的. 通过以上的2个Cases可以看出, 弹性计算提供了一种动态的资源解决方案. 可以根据动态的需求提供相应的资源, 从而提升资源的利用率, 在面对网络攻击时也更加健壮.\n\n### 虚拟化\n\n虚拟化(Virtualization)听起来像是一个很高深的技术, 虚拟化包括硬件层的虚拟化和OS层的虚拟化, 除此之外, 还有全虚拟化和半虚拟化, 但无论是哪种方式, 虚拟化的意图就是通过技术手段隐藏平台的复杂性, 从而呈现一致的资源, 虚拟化在云计算的基础软件中扮演着重要角色.\n\n### 海量资源\n\n之所以将云计算称之为云计算, 是因为不管从资源的整合形式, 还是或许方式上, 云计算都和云有着类似之处, 云计算的一个很大的特点就是海量的资源, 海量的存储空间, 强大的计算能力, 快速的网络等等. 在云中可以存这大量数据, 跑着各式各样不同的应用, 运行着种类繁多的服务, 可以说云计算是SaaS(Software as a service)的集中体现.\n\n当然, 除此之外, 关于云计算的东西还有很多很多, 我作为一个酱油党在华丽的飘过CNCC 2012后, 脑袋里能留下的印象也就只有这些了, 不过从本届大会的报告内容上来看, 云计算已经势不可挡的成为互联网新时代的焦点了, 未来的服务, 应用以及数据都不可避免的向云端迁移, 而人们的生活也会通过各种各样的终端与云计算发生密切的联系.\n\n# 价值所在--Big Data\n\n有云计算在的地方怎么能少得了大数据, 随着互联网上的数据持续增长, 数据的重要性渐渐被人们所发掘, 在数据量小的时代, 我们只需要将数据进行适当的存放, 管理,并不重视数据中所潜在的信息. 但是到了当前这样一个大数据的时代, 巨大的数据量使得挖掘数据间一些细微的联系和隐含的信息成为可能. 说道数据挖掘, 总是让我联想起尿布与啤酒的故事, 略低端了. 不过事实也的确如此, 你手上如果拥有一个超市的销售数据, 那么你通过适当的分析这些数据, 可以发现尿布销量和啤酒销量之间的联系, 进而同过将尿布和啤酒摆在一起以提高业绩. 你手上如果拥有当当的图书销售记录, 你就可以在消费者相中算法导论之后, 再为其推荐数据结构与算法分析, C++ primer之类之类的...当然, 此时你会疑问当当为什么不给你推荐丰乳肥臀呢, 呃, 这个我只能说搞计算机的童鞋们可能不会在买完算法导论之后再买丰乳肥臀吧, 至少我是这样...我们在进一步的设想一下, 如果你了解你的用户, 知道他们干什么, 对什么感兴趣, 需要什么, 那么你很自然的可以通过这些信息来创收, 不管是投放针对性的广告, 还是为其提供一些针对性的付费服务. 问题就在于如何得到有价值的信息, 我能想到的一种方式就是通过万能的调查问卷, 在用户进网站, 收邮件或者使用软件的时候蹦出来, 然后礼貌的问一下, 愿意配合弄一份调查问卷吗? 我们不会泄露你的隐私, 但同样的不会给你发钱. 好吧, 一般而言, 我是直接X掉这种提示的, 或者觉得没有必要再点击相应的网址或使用相应的服务, 它们这么做貌似有点烦人. 所以, 或许我们采用一种更加委婉, 更加优雅的方式, 来猜测用户的信息来得更理想一点. 通过用户的一些操作, 提交的个人的数据, 访问历史等等诸如此类的看似无所谓的数据, 从中就可以分析出一些用户更深层次的需要, 然后.....嘿嘿, money就来了. 呃, 这看起来是件蛮有意思并且蛮有钱途的事情, 恩, 在这个Big Data的时代, 搞数据挖掘的童鞋们真幸福啊. 正是由于数据中蕴含着潜在的巨大价值, 所以在本次大会上, 很多产业界的代表都对数据给予了极大的关注和重视, 似乎隐隐约约透露出一种得数据者得天下的态势. 从Google和FB还有其他一些IT巨头的一些服务上, 貌似可以看出点端倪.\n\n在数据占据如此之高的战略情况下, 不禁让人担心以后的IT圈子里, 会不会发生强者越强, 弱者越弱的现象, 因为可以很明显的看到, 大公司, 大企业手上握有大量的用户信息, 而他们可以利用这些信息进行更好更具个性化的服务, 而小企业, 手上根本就没有多少可供分析的数据, 在产品和服务的体验上, 未来难免会落下风. 或许, 在目前, 数据的壁垒还未形成, 不过在当前形势下, 也确实该反思反思小企业, 小产品的制胜之道, 啊, 说到这里, 突然间觉得大学生创业略微有点艰难啊, 也罢, 还是先把这篇文章写完在考虑这个问题吧=  =\n\n# 互联你我--移动终端\n\n从近几年的各大厂商的电子产品销售数据上很直观可以看出, 传统的PC销量正在逐年下滑, 而以智能手机, 平板为代表的移动终端市场正逐渐兴起, 貌似逐渐这词用的不对, 应该说是火的不得了. 就我个人的感觉是自从07年苹果发布iphone后, 随着itunes store和app store的商业模式获得成功, 智能手机真正开始进入人们的日常生活, 从此便一发不可收拾. 我依旧还记得09年, 当我拿到一台水货iphone 3g时的奇妙感觉, 因为在那之前, 从未想过, 设备是可以通过触摸来操纵的, 更令人惊讶的是一台小小的手机上竟然可以运行各种各样新奇到难以想象的应用, 当时就觉得, 我至少一个月放不下这货了. 时隔短短几年, ipad的横空出世又一次改变了人们的上网观念. OK, 我发现我不能再多回忆了, 略微有点脑残粉的感觉. 就现在看来, 不论是Android, WP, 还是Nexus 7, Surface之类之类的, 可以看到各大巨头对移动终端的市场争夺, 已经进入了白热化阶段, 至于程度如何, 童鞋们只要看看之前说\"把硬件交给合作伙伴, 自己打造软件\"的微软都开始插足硬件市场便可略知一二.\n\n移动终端成为未来趋势有其内在和外在的原因. 首先, 移动终端的最大特点就是便携性, 而便携性就决定了移动终端能长时间处在用户随手可及的位置; 其次, 近几年来, 智能终端的性能不断地在疯狂的提升, 现在手机都出4核, 8核了, 智能终端性能已经出现了过剩, 也就是说智能终端可以处理越来越复杂的任务, 这样, 很自然的, 原本需要在PC上能做的事情, 现在在移动设备上大部分都能做了. 除了性能上的提升, 现在的移动终端上搭载了越来越多的传感器, 像什么陀螺仪, 重力感应器, 光传感器等等, 丰富的传感器催生了各式各样实用有趣的应用和服务. 说到这方面的极其成功的例子, 就让人不禁想到了XX利器--微信. 从这个方面上来讲, 移动终端提供了更多PC上没有的应用. 另外一个不可忽略的例子是, 移动终端使得人们能轻而易举的接入社交网络. 我们现在随处可见低头玩手机, 玩平板的人, 典型的场所诸如课堂, 公共交通工具里, 饭桌上等等. 人们越来越倾向在数字世界中表达自我, 继而数字世界中投入的时间越来越多.\n\n移动终端促进了物理世界和数字世界的连结. 物理世界和数字世界的联系日趋紧密, 我们可以发现我们的生活早已离不开虚拟的数字世界. 在本次大会上, 有不少令人印象深刻的报告涉及到了相关问题. 其中比较有意思的就是科大讯飞董事长刘庆峰博士的报告, 他在台上当场演示了科大讯飞在手机上的语音助理和语音输入功能, 并认为语音会成为将来手机必备的功能. 刘博士的报告总体给人感觉是很有意思的, 有兴趣的童鞋可以看看我上传到优酷上的一段现场视频(前面一部分视频由于拍摄问题可能不太清晰, 见谅, 坚持看到最后有亮点 :-P) [观看地址](http://v.youku.com/v_show/id_XNDY1MDk0MTI0.html). 本次大会还邀请到了MSRA负责Kinect项目的副院长郭百宁博士, 他的报告主要介绍了Kinect中的摄像头体感技术, 听完感觉微软的Kinect技术含量还是很高的, 因为Kinect只用一个100刀摄像头, 完成了2000刀3D深度摄像头干的活. Kinect捕获到的只是一个平面画面, 因此需要解决诸如深度, 识别, 环境光, 肢体遮挡等问题. 好像跑的有点远了, 其实对于郭院长报告最让我印象深刻的是他演示了Kinect上的一款chat类的社交游戏 [YouTube观看地址](https://www.youtube.com/watch?v=xmmPhcoLbk0) 该游戏做的就是通过摄像头, 在游戏场景中创建出一个虚拟的人物(称之为your avatar)来代表玩家, 不同玩家在不同地点通过Kinect连接到同一个游戏场景中进行交谈, Kinect会捕捉玩家的面部表情和肢体动作, 并如实反映在虚拟的chat room中. 这个游戏还是蛮有意思的,  至少我是这么觉得, 关键就在于它通过设备, 将人们从真实的物理世界代入到了虚拟的数字世界中, 并带来了欢乐. 浙江大学的潘纲教授也在移动互联网与智能终端的专题论坛上介绍了一些有意思的东西, 他们利用手机上的陀螺仪把手机做成了一个类似pointer的设备, 将手机的顶部对准家电, 对其操作, 对准电脑开机, 传照片等等, 总结来说就是利用手机自带的传感器将手机转换成了一个空间指向设备, 实现了对物理环境的操控. 说到这里, 是不是觉得物联网的感觉出来了, 其实做的事情都差不多, 只是换了个说法罢了. 从中我们可以看到, 智能移动终端, 将人们带入了虚拟的数字世界当中, 并在那里, 连结了你和我.\n\n# 其它\n\n- **trade-off**\n\n\ttrade-off这个词也算是我在这次大会上听到的高频词了, trade-off是权衡的意思, 不管是在学术中, 还是在工业上, 只要是和实现相关的, 大都都涉及到trade-off. 例如在大会上北大的高文教授做的一个关于多媒体压缩的报告上说目前研制的压缩标准理论上能达到上千的压缩率, 但实际上能实现的就只能是160:1, 其中就涉及到具体实现时各种困难, 压缩率从理论上的上千到160就是被各种复杂的实际情况给trade-off掉了. 在学术研究上, trade-off现象相对还比较少见, 但是在产业上, trade-off可谓经常碰到. 记得当时MSRA 的郭院长在大会上探讨了如何解决平面图像上的深度, 动作捕捉, 肢体覆盖等复杂问题, 结束后就有人提问说, 如果加一个摄像头, 就可以建立立体影像从而简化问题. 当时郭院长就回答, 我们生产产品的, 希望能把价格压低, 在技术和成本之间, Kinect团队选择了通过软件技术来降低硬件成本. 这是个很典型的工业界中的trade-off. 其实在平常的学习或项目中, 我们也经常碰到这个trade-off的问题, 这个有时无法避免, 碰到多了, 我们就不会说, 让我来权衡权衡, 而改口说\"这个需要trade-off一下.\"╮(╯▽╰)╭\n\n- **企业业务的垂直化**\n\n\t本次大会中, 产业界的各位讲者介绍了各家公司对于当前业界的一些见解和预测, 其中一个印象比较深刻的就是涉及到了企业的垂直化问题(我不知道这种说法是否规范) 其实, 企业业务的垂直化主要描述的是各大行业巨头在立足自己传统强势业务的基础上, 以优势业务为基点, 向两侧纵向扩展业务范围, 从而增大用户粘性, 巩固自己的原有市场并开阔新的市场. 我们可以看到很多这样的例子, 例如Amazon是做电商的, 现在向下搞起了硬件Kindle, 向上开始搞起了EC2云计算服务. 微软是做操作系统的, 现在向下搞起了Surface, 向上拓展搜索,移动市场等业务. 更典型点的就是苹果了, 设备, 操作系统, 应用商店, icloud全都包了 . 现在企业的垂直化给人感觉像是战国时期的诸侯割据, 各家在保住自己地盘的基础上, 不断侵蚀他人地盘. 所以我们看到, 当iphone火的时候, 智能手机烽烟四起, 当ipad火的时候, 平板之争悄然打响, 当云计算火的时候, 各大厂商都纷纷推出了各自的云产品. 话说, 这几年, 我们在IT界看到的你一脚, 我一脚的相互涉足对方领域已经习以为常, 看着各大巨头争得你死我活, 我们除了能在一旁一边喝水, 一边更博客之外, 还需要理性的选择合适自己的服务和产品, 以免陷入纷繁复杂的市场抢夺战中...\n\n# 后记\n\n呃, 我看写这么多也差不多了, 初次搞博客, 没什么经验, 写的也略显杂乱, 权且是写了一次参会报告以记录下自己的所见所闻所感. 文中不免有遗漏, 错误之处, 如果有哪位看官有意见, 请慷慨相告(但愿有看官吧, 没有吧, 也不能强求= =). 其实我原本是想唠叨加吐槽的, 比如什么我去大连参会的第一天下午就发烧啦, 比如自己英语太烂不好意思提问啦, 又比如没认识几个其他学校来的美女啦诸如此类的, 不过后来想想就算了吧. 恩, that's all.","slug":"cncc2012","published":1,"updated":"2015-04-06T13:28:17.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o9s0024kadypea62143"},{"title":"对于个人网站的一些思考","date":"2012-11-16T12:15:52.000Z","_content":"\n沈阳又下雪了, 那种轻飘飘漫天飞舞的雪. 今天下午难得去了一趟图书馆, 看看闲书. 晚饭后手里握着一大杯热腾腾的绿茶回到宿舍, 像现在这样, 坐在电脑前, 一边喝着热茶, 一边更更博客, 颇为惬意, 顺道思考下自己这个网站未来的一些走向问题.\n<!-- more -->\n# 前言\n\n沈阳又下雪了, 那种轻飘飘漫天飞舞的雪. 今天下午难得去了一趟图书馆, 看看闲书. 晚饭后手里握着一大杯热腾腾的绿茶回到宿舍, 像现在这样, 坐在电脑前, 一边喝着热茶, 一边更更博客, 颇为惬意.\n\n仔细想想, 似乎有一段时间没有更博客了. 这段时间主要在熟悉Linux环境下的一些操作和编程环境顺便练了一些算法, 就算抛开双十一血拼的几本重量级图书不谈, 收获也还算是蛮大的了. 当然, 除了这些, 我还偶尔思考了下自己这个网站未来的一些走向问题.\n\n我在想,  一个个人网站, 到底应该往哪个方向发展? 一个个人网站, 到底需要的是什么?\n\n# 我的网站缺些什么?\n\n曾经有段时间, 我很希望我的网站能有很高的点击率, 能把网站做的很有人气, 以至于那段时间里, 我经常会刷新查看一下网站的PV(Page Views), 理所当然的, 对于一个小小的个人网站来说, 一天的点击率不会超过10次有时甚至一次没有, 在网站的初期, 点击量的变化曲线基本是贴着时间轴的一条平滑的曲线.呵呵, 多少是有点令人失望, 不过想一想其实也好理解, 一个网站, 或者说一个信息发布点, 其他人愿意点击, 或者搜索引擎的搜索结果靠前靠的是什么? 我觉得很大一部分是因为这个网站能及时地提供优质的信息或者资源, 总的说来就是优质的内容, 这里优质的内容自然是相对不同的人来说的. 比如, 一个爱好游戏的人, 那么3DM, 游侠, 电玩巴士一类的网站相对于他来说是很有吸引力的; 再比如对一个热爱技术的人, CSDN, Stack Overflow,  GitHub之类的网站会是他们常去的地方. 显然, 一个网站是无法做到满足各种不同人群的需求的, 甚至连某类人群的需求也很难满足, 因为物联网的信息量是如此之大, 每天发生的事情是如此之多, 单个网站所整合的信息很有限. 因此, 我觉得, 就一个个人网站而言, 需要的是求细求精, 专注于自己, 顺带了解下周遭, 打造具有特色的优质内容.\n\n# 我的网站怎么才能让你看到?\n\n我们都能理解, 优质的内容对于一个好的网站来说是多么的重要, 那么如果一个网站的内容质量很高, 就一定很多人访问吗? 我想也不尽然. 熟话说酒香不怕巷子深, 但是在浩瀚的互联网中, 淹没着太多太多的好网站, 我们根本无法肯定, 每天查看的那些网站就真的是那些最好最适合自己的网站? 为了得到更好更及时的信息, 我们需要不断去发现, 不断去探索这个互联网. 但是很遗憾的, 得益于互联网的巨大信息量, 也受制于互联网的巨大信息量, 我们每天查看那些原有的信息源还来不及, 哪有时间和闲情去发现新的更好的信息源, 或者说的更现实一点, 其实我们都很懒, 都习惯于习惯, 每天有那么几个固定的站点就足以把我们喂饱. 在这种环境下, 人们更倾向于被动的推荐, 而非主动的获取.\n\n我想, 现在很大一部分人上网首先做的几件事情当中, 肯定有一件是要查看微博, 人人之类的社交网站的, 然后查看好友分享的信息, 这种获取信息的方式是如此的方便以至于我们不需要在多个页面之间来回的切换和查找, 只需要从上到下的扫一遍, 看到感兴趣的内容, 点击查看, 然后适当的回复下, 接着继续往下看, 如此反复直到时间耗尽. 整个过程是如此的简单, 简单到我都快可以用基本的程序流程图来描述了, XD. 除此之外, 现在不少用户习惯通过移动设备上的信息聚合软件, 诸如Zaker, Flipboard等来获取自行定制的内容.\n\n看以发现, 现在人们获取信息的方式在变化, 有别于传统的关键字搜索或者门户网站, 人们更喜欢被推荐信息, 所以, 作为信息的提供方, 除了做好自己的内容和SEO(Search Engine Optimization)之外, 还应积极的像用户推荐自己的网站. 针对这个情况, 我之前也想通过打通网站和自己社交帐号之间的通道来通过分享内容到社交网站的方式来推荐自己的网站. 不过很遗憾的, 我只是测试性实验了一次, 便没再继续这项操作. 主要是因为本人比较闷骚, 虽有各大主流社交网站账号, 但是大都以收听为主, 基本不发表任何东西. 一个不会碎碎念, 不会热情回复他人碎碎念的社交账号影响力基本可以约等于0, 囧~ 鉴于本人特殊的网络社交能力低下的原因, 所以, 我很明白, 我的网站, 很难被我社交网站上的好友看到, 事实上, 也没几个好友, 囧+1 ~. 在社交网站推荐方面, 恐怕还有很长的一段路要走. 另外一条个人网站推广的道路, 我曾想过, 可以通过在CSDN上搞一个博客, 将当前网站的文章映射到CSDN这样的大型社区上, 将CSDN上博客的流量引导至当前网站上, 这算是个可行的方案, 但这样的话, 意味着我在每更新一篇文章的时候, 我需要在CSDN上同步更新一篇一样的文章, 即便在复制文章的时候所花的时间能少很多, 但是我始终觉得, 同一个人要将同一篇文章, 发布到不同的地方, 是件很无聊的事情. 所以, 虽然我很希望有人能到我的网站来看看, 但是目前, 我能接受网站较低的访问量, 并且坚信, 这么低的访问量, 在未来很长一段时间内不动摇, 呵呵~\n\n# 我的网站怎么才能让你再次看到?\n\n如果我是一个生意人, 那我很希望我的顾客能再次惠顾我的店铺. 同样的, 作为一个博主, 我很希望我的网站能再次被人们点击看到, 不是为了什么盈利性质的目的, 只是觉得如果有很多人时常来看看, 交流下, 分享下, 是件很不错的事情. 我觉得, 能让用户经常性的访问是件很困难的事情. 用户多次访问意味着用户对网站有着持续性的需求, 而网站则需要提供足够有吸引力的内容, 同时还要保持一定的更新频率以满足用户的需求. 暂且不说网站的布局, 美观程度, 易用性对于用户黏性的重要性, 单从信息的更新频率上来说, 一个个人网站要做到时常更新内容是比较不容易的. 因此我们其实也很经常看到一些个人博客, 初次访问的时候觉得还不错, 但是隔了一周回来看一下, 还是那些内容, 在隔一个半月回来看一下, 多了一小篇文章, 然后, 就没有然后了... 当然, 我很明显不是在说自己的博客, 大家不要随意带入. 对于浏览网页的人来说, 要的是及时的信息, 最好网站是时常更新的, 活蹦乱跳的. 但是对于一个个人网站维护者来说, 他有自己的生活, 有自己的工作, 在这种情况下是很难很频繁的更新网站的, 况且频繁的更新和优质的内容之间有一定的矛盾. 所以可以看到, 个人博客自2000年左右开始兴起, 到现在的逐渐衰弱, 被社交网站取代, 是有一定的内因的.\n\n但是和如日中天的社交网站相比, 个人网站还是有其固有的优势的, 比如信息相对集中, 针对性较强, 较为正式. 如果要说二者的区别的话, 我觉得用一句比较牵强的话形容, 社交网站是\"对人不对事\", 而博客则是\"对事不对人\". 作为一个个人网站的维护者, 我会在有时间的时候更新下自己网站, 在内容和更新频率的取舍上, 我也许更倾向于高质量的内容而尽量减少一些类似碎碎念的东西.\n\n# 我的网站到底应该是怎么样的?\n\n上面说了这么多, 其实都是在以浏览者或者用户的方式思考, 让人感觉这种思考方式更倾向于推销, 对于个人网站来说, 我觉得更好的方式是吸引而非推销, 追求点击率和网站知名度也非我所愿. 在我看来, 个人网站嘛, 应该让人更多的联想到随性, 独特, 有趣这类的词语, 哪怕有点 My place, my rule 的味道也无妨, 最重要的是~~~开心嘛~. 这并不代表这我不希望把网站搞好, 只是说我会更倾向于Focus on myself. 如果顺便能把网站搞好, 那我自然是很开心的啦. 不过当前, 我所做的, 可能只是在 Record my dots, 我期待等到未来的某一天, 等我可以回头 Connect the dots 的时候, 我相信, 我会有一些收获的, 或许, 这才是我开设个人网站的原意.\n\n不知不觉, 手里的大杯绿茶也喝光了, 窗外的雪却还在下, 文章也更新的差不多了, 我想, 也是时候翻开架上的书来学习学习了. So, that's all, about today.","source":"_posts/blog.md","raw":"title: \"对于个人网站的一些思考\"\ndate: 2012-11-16 20:15:52\ntags: [blog, thought]\n---\n\n沈阳又下雪了, 那种轻飘飘漫天飞舞的雪. 今天下午难得去了一趟图书馆, 看看闲书. 晚饭后手里握着一大杯热腾腾的绿茶回到宿舍, 像现在这样, 坐在电脑前, 一边喝着热茶, 一边更更博客, 颇为惬意, 顺道思考下自己这个网站未来的一些走向问题.\n<!-- more -->\n# 前言\n\n沈阳又下雪了, 那种轻飘飘漫天飞舞的雪. 今天下午难得去了一趟图书馆, 看看闲书. 晚饭后手里握着一大杯热腾腾的绿茶回到宿舍, 像现在这样, 坐在电脑前, 一边喝着热茶, 一边更更博客, 颇为惬意.\n\n仔细想想, 似乎有一段时间没有更博客了. 这段时间主要在熟悉Linux环境下的一些操作和编程环境顺便练了一些算法, 就算抛开双十一血拼的几本重量级图书不谈, 收获也还算是蛮大的了. 当然, 除了这些, 我还偶尔思考了下自己这个网站未来的一些走向问题.\n\n我在想,  一个个人网站, 到底应该往哪个方向发展? 一个个人网站, 到底需要的是什么?\n\n# 我的网站缺些什么?\n\n曾经有段时间, 我很希望我的网站能有很高的点击率, 能把网站做的很有人气, 以至于那段时间里, 我经常会刷新查看一下网站的PV(Page Views), 理所当然的, 对于一个小小的个人网站来说, 一天的点击率不会超过10次有时甚至一次没有, 在网站的初期, 点击量的变化曲线基本是贴着时间轴的一条平滑的曲线.呵呵, 多少是有点令人失望, 不过想一想其实也好理解, 一个网站, 或者说一个信息发布点, 其他人愿意点击, 或者搜索引擎的搜索结果靠前靠的是什么? 我觉得很大一部分是因为这个网站能及时地提供优质的信息或者资源, 总的说来就是优质的内容, 这里优质的内容自然是相对不同的人来说的. 比如, 一个爱好游戏的人, 那么3DM, 游侠, 电玩巴士一类的网站相对于他来说是很有吸引力的; 再比如对一个热爱技术的人, CSDN, Stack Overflow,  GitHub之类的网站会是他们常去的地方. 显然, 一个网站是无法做到满足各种不同人群的需求的, 甚至连某类人群的需求也很难满足, 因为物联网的信息量是如此之大, 每天发生的事情是如此之多, 单个网站所整合的信息很有限. 因此, 我觉得, 就一个个人网站而言, 需要的是求细求精, 专注于自己, 顺带了解下周遭, 打造具有特色的优质内容.\n\n# 我的网站怎么才能让你看到?\n\n我们都能理解, 优质的内容对于一个好的网站来说是多么的重要, 那么如果一个网站的内容质量很高, 就一定很多人访问吗? 我想也不尽然. 熟话说酒香不怕巷子深, 但是在浩瀚的互联网中, 淹没着太多太多的好网站, 我们根本无法肯定, 每天查看的那些网站就真的是那些最好最适合自己的网站? 为了得到更好更及时的信息, 我们需要不断去发现, 不断去探索这个互联网. 但是很遗憾的, 得益于互联网的巨大信息量, 也受制于互联网的巨大信息量, 我们每天查看那些原有的信息源还来不及, 哪有时间和闲情去发现新的更好的信息源, 或者说的更现实一点, 其实我们都很懒, 都习惯于习惯, 每天有那么几个固定的站点就足以把我们喂饱. 在这种环境下, 人们更倾向于被动的推荐, 而非主动的获取.\n\n我想, 现在很大一部分人上网首先做的几件事情当中, 肯定有一件是要查看微博, 人人之类的社交网站的, 然后查看好友分享的信息, 这种获取信息的方式是如此的方便以至于我们不需要在多个页面之间来回的切换和查找, 只需要从上到下的扫一遍, 看到感兴趣的内容, 点击查看, 然后适当的回复下, 接着继续往下看, 如此反复直到时间耗尽. 整个过程是如此的简单, 简单到我都快可以用基本的程序流程图来描述了, XD. 除此之外, 现在不少用户习惯通过移动设备上的信息聚合软件, 诸如Zaker, Flipboard等来获取自行定制的内容.\n\n看以发现, 现在人们获取信息的方式在变化, 有别于传统的关键字搜索或者门户网站, 人们更喜欢被推荐信息, 所以, 作为信息的提供方, 除了做好自己的内容和SEO(Search Engine Optimization)之外, 还应积极的像用户推荐自己的网站. 针对这个情况, 我之前也想通过打通网站和自己社交帐号之间的通道来通过分享内容到社交网站的方式来推荐自己的网站. 不过很遗憾的, 我只是测试性实验了一次, 便没再继续这项操作. 主要是因为本人比较闷骚, 虽有各大主流社交网站账号, 但是大都以收听为主, 基本不发表任何东西. 一个不会碎碎念, 不会热情回复他人碎碎念的社交账号影响力基本可以约等于0, 囧~ 鉴于本人特殊的网络社交能力低下的原因, 所以, 我很明白, 我的网站, 很难被我社交网站上的好友看到, 事实上, 也没几个好友, 囧+1 ~. 在社交网站推荐方面, 恐怕还有很长的一段路要走. 另外一条个人网站推广的道路, 我曾想过, 可以通过在CSDN上搞一个博客, 将当前网站的文章映射到CSDN这样的大型社区上, 将CSDN上博客的流量引导至当前网站上, 这算是个可行的方案, 但这样的话, 意味着我在每更新一篇文章的时候, 我需要在CSDN上同步更新一篇一样的文章, 即便在复制文章的时候所花的时间能少很多, 但是我始终觉得, 同一个人要将同一篇文章, 发布到不同的地方, 是件很无聊的事情. 所以, 虽然我很希望有人能到我的网站来看看, 但是目前, 我能接受网站较低的访问量, 并且坚信, 这么低的访问量, 在未来很长一段时间内不动摇, 呵呵~\n\n# 我的网站怎么才能让你再次看到?\n\n如果我是一个生意人, 那我很希望我的顾客能再次惠顾我的店铺. 同样的, 作为一个博主, 我很希望我的网站能再次被人们点击看到, 不是为了什么盈利性质的目的, 只是觉得如果有很多人时常来看看, 交流下, 分享下, 是件很不错的事情. 我觉得, 能让用户经常性的访问是件很困难的事情. 用户多次访问意味着用户对网站有着持续性的需求, 而网站则需要提供足够有吸引力的内容, 同时还要保持一定的更新频率以满足用户的需求. 暂且不说网站的布局, 美观程度, 易用性对于用户黏性的重要性, 单从信息的更新频率上来说, 一个个人网站要做到时常更新内容是比较不容易的. 因此我们其实也很经常看到一些个人博客, 初次访问的时候觉得还不错, 但是隔了一周回来看一下, 还是那些内容, 在隔一个半月回来看一下, 多了一小篇文章, 然后, 就没有然后了... 当然, 我很明显不是在说自己的博客, 大家不要随意带入. 对于浏览网页的人来说, 要的是及时的信息, 最好网站是时常更新的, 活蹦乱跳的. 但是对于一个个人网站维护者来说, 他有自己的生活, 有自己的工作, 在这种情况下是很难很频繁的更新网站的, 况且频繁的更新和优质的内容之间有一定的矛盾. 所以可以看到, 个人博客自2000年左右开始兴起, 到现在的逐渐衰弱, 被社交网站取代, 是有一定的内因的.\n\n但是和如日中天的社交网站相比, 个人网站还是有其固有的优势的, 比如信息相对集中, 针对性较强, 较为正式. 如果要说二者的区别的话, 我觉得用一句比较牵强的话形容, 社交网站是\"对人不对事\", 而博客则是\"对事不对人\". 作为一个个人网站的维护者, 我会在有时间的时候更新下自己网站, 在内容和更新频率的取舍上, 我也许更倾向于高质量的内容而尽量减少一些类似碎碎念的东西.\n\n# 我的网站到底应该是怎么样的?\n\n上面说了这么多, 其实都是在以浏览者或者用户的方式思考, 让人感觉这种思考方式更倾向于推销, 对于个人网站来说, 我觉得更好的方式是吸引而非推销, 追求点击率和网站知名度也非我所愿. 在我看来, 个人网站嘛, 应该让人更多的联想到随性, 独特, 有趣这类的词语, 哪怕有点 My place, my rule 的味道也无妨, 最重要的是~~~开心嘛~. 这并不代表这我不希望把网站搞好, 只是说我会更倾向于Focus on myself. 如果顺便能把网站搞好, 那我自然是很开心的啦. 不过当前, 我所做的, 可能只是在 Record my dots, 我期待等到未来的某一天, 等我可以回头 Connect the dots 的时候, 我相信, 我会有一些收获的, 或许, 这才是我开设个人网站的原意.\n\n不知不觉, 手里的大杯绿茶也喝光了, 窗外的雪却还在下, 文章也更新的差不多了, 我想, 也是时候翻开架上的书来学习学习了. So, that's all, about today.","slug":"blog","published":1,"updated":"2015-04-08T14:53:44.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci8aw1o9u002dkadyy2lijd6m"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ci8aw1o870000kadys4a5pjj1","tag_id":"ci8aw1o8b0001kadyyw6en9yy","_id":"ci8aw1o8e0004kadywh9o5fb6"},{"post_id":"ci8aw1o870000kadys4a5pjj1","tag_id":"ci8aw1o8e0002kady5h8hw26u","_id":"ci8aw1o8e0005kadywz21q0h8"},{"post_id":"ci8aw1o870000kadys4a5pjj1","tag_id":"ci8aw1o8e0003kadybftdh566","_id":"ci8aw1o8e0006kadyyirbbu65"},{"post_id":"ci8aw1o8w0008kady0aolq9q5","tag_id":"ci8aw1o8x0009kady718ejjlq","_id":"ci8aw1o8x000akadybtiolr1w"},{"post_id":"ci8aw1o8y000bkadyogsozdrx","tag_id":"ci8aw1o8x0009kady718ejjlq","_id":"ci8aw1o8z000ckadyshrlv7zp"},{"post_id":"ci8aw1o90000dkadyqcnpp8am","tag_id":"ci8aw1o91000ekadyl0ekxfx0","_id":"ci8aw1o93000lkadyf6prkq7o"},{"post_id":"ci8aw1o90000dkadyqcnpp8am","tag_id":"ci8aw1o91000fkadyohbxlnqp","_id":"ci8aw1o93000mkady98wjvq4x"},{"post_id":"ci8aw1o90000dkadyqcnpp8am","tag_id":"ci8aw1o92000gkadyxo5dobtw","_id":"ci8aw1o93000nkadyjk0jdhtv"},{"post_id":"ci8aw1o90000dkadyqcnpp8am","tag_id":"ci8aw1o92000hkadyt7s6pp54","_id":"ci8aw1o93000okady0m3ijtsq"},{"post_id":"ci8aw1o90000dkadyqcnpp8am","tag_id":"ci8aw1o92000ikady5w7r9a42","_id":"ci8aw1o93000pkady5gm87xj5"},{"post_id":"ci8aw1o90000dkadyqcnpp8am","tag_id":"ci8aw1o92000jkadyrvxz4emm","_id":"ci8aw1o93000qkadyp8lowh73"},{"post_id":"ci8aw1o90000dkadyqcnpp8am","tag_id":"ci8aw1o92000kkadynu3drbbf","_id":"ci8aw1o93000rkady3j5ft5w6"},{"post_id":"ci8aw1o94000skadysa8qv6dh","tag_id":"ci8aw1o94000tkady58r5c3vh","_id":"ci8aw1o95000ukadylhw3l400"},{"post_id":"ci8aw1o96000vkadyn96pw4nf","tag_id":"ci8aw1o94000tkady58r5c3vh","_id":"ci8aw1o97000ykadyjhhuwm04"},{"post_id":"ci8aw1o96000vkadyn96pw4nf","tag_id":"ci8aw1o96000wkadyb3pau46n","_id":"ci8aw1o97000zkadyt2ui2lcn"},{"post_id":"ci8aw1o96000vkadyn96pw4nf","tag_id":"ci8aw1o97000xkadybp1ko6rz","_id":"ci8aw1o970010kady9uus8gxv"},{"post_id":"ci8aw1o990011kadyjg1j5fwh","tag_id":"ci8aw1o91000ekadyl0ekxfx0","_id":"ci8aw1o9a0014kady93m9556e"},{"post_id":"ci8aw1o990011kadyjg1j5fwh","tag_id":"ci8aw1o91000fkadyohbxlnqp","_id":"ci8aw1o9a0015kadyz68oera6"},{"post_id":"ci8aw1o990011kadyjg1j5fwh","tag_id":"ci8aw1o92000gkadyxo5dobtw","_id":"ci8aw1o9a0016kadyvia8w53o"},{"post_id":"ci8aw1o990011kadyjg1j5fwh","tag_id":"ci8aw1o9a0012kady6gw3gzhu","_id":"ci8aw1o9a0017kadys9q3n11c"},{"post_id":"ci8aw1o990011kadyjg1j5fwh","tag_id":"ci8aw1o92000ikady5w7r9a42","_id":"ci8aw1o9a0018kady2lyfvc5s"},{"post_id":"ci8aw1o990011kadyjg1j5fwh","tag_id":"ci8aw1o9a0013kadyuaakiz0m","_id":"ci8aw1o9a0019kadyd2w3lgsj"},{"post_id":"ci8aw1o9b001akadyz9uta5us","tag_id":"ci8aw1o9c001bkadyiir0wj8i","_id":"ci8aw1o9h001ekadyhfr276rn"},{"post_id":"ci8aw1o9b001akadyz9uta5us","tag_id":"ci8aw1o9h001ckadyrjcqowfx","_id":"ci8aw1o9h001fkadyjmjqvh2g"},{"post_id":"ci8aw1o9b001akadyz9uta5us","tag_id":"ci8aw1o9h001dkadyks8mrspi","_id":"ci8aw1o9h001gkadyn5wxysyx"},{"post_id":"ci8aw1o9i001hkadygih7zrgd","tag_id":"ci8aw1o9j001ikadyeaq0i5gm","_id":"ci8aw1o9j001kkady9exgp9mx"},{"post_id":"ci8aw1o9i001hkadygih7zrgd","tag_id":"ci8aw1o9j001jkadykdoxs8hz","_id":"ci8aw1o9k001lkadyeul1d193"},{"post_id":"ci8aw1o9k001mkadybqrlspa6","tag_id":"ci8aw1o9m001nkadymxv1gpdf","_id":"ci8aw1o9m001qkadyroz1rkzg"},{"post_id":"ci8aw1o9k001mkadybqrlspa6","tag_id":"ci8aw1o9m001okady7lhz9h7b","_id":"ci8aw1o9m001rkadysodv7nuj"},{"post_id":"ci8aw1o9k001mkadybqrlspa6","tag_id":"ci8aw1o9m001pkadyludqi51s","_id":"ci8aw1o9m001skadyjapev1qt"},{"post_id":"ci8aw1o9o001tkadytxahg5gm","tag_id":"ci8aw1o9o001ukadyhmeislee","_id":"ci8aw1o9p001wkadyyfjfumcl"},{"post_id":"ci8aw1o9o001tkadytxahg5gm","tag_id":"ci8aw1o9o001vkady1760m579","_id":"ci8aw1o9p001xkadyqt3zoe7z"},{"post_id":"ci8aw1o9p001ykadyhuy5b5t8","tag_id":"ci8aw1o91000fkadyohbxlnqp","_id":"ci8aw1o9r0020kadyj8vu8njs"},{"post_id":"ci8aw1o9p001ykadyhuy5b5t8","tag_id":"ci8aw1o92000gkadyxo5dobtw","_id":"ci8aw1o9r0021kadyqn3sqtkz"},{"post_id":"ci8aw1o9p001ykadyhuy5b5t8","tag_id":"ci8aw1o9q001zkadya4nkbi14","_id":"ci8aw1o9r0022kadyc6t9135f"},{"post_id":"ci8aw1o9p001ykadyhuy5b5t8","tag_id":"ci8aw1o92000ikady5w7r9a42","_id":"ci8aw1o9r0023kadyvxbfoy7y"},{"post_id":"ci8aw1o9s0024kadypea62143","tag_id":"ci8aw1o9s0025kady0b071i6m","_id":"ci8aw1o9t0029kadypvto7e7g"},{"post_id":"ci8aw1o9s0024kadypea62143","tag_id":"ci8aw1o9t0026kadyp8dci8f5","_id":"ci8aw1o9t002akadyg52pql5b"},{"post_id":"ci8aw1o9s0024kadypea62143","tag_id":"ci8aw1o9t0027kady71g2jpuu","_id":"ci8aw1o9t002bkady76iazor2"},{"post_id":"ci8aw1o9s0024kadypea62143","tag_id":"ci8aw1o9t0028kadyfpzg3aff","_id":"ci8aw1o9t002ckadyekobr2mx"},{"post_id":"ci8aw1o9u002dkadyy2lijd6m","tag_id":"ci8aw1o9j001jkadykdoxs8hz","_id":"ci8aw1o9v002ekady75nty1zm"},{"post_id":"ci8aw1o9u002dkadyy2lijd6m","tag_id":"ci8aw1o9o001ukadyhmeislee","_id":"ci8aw1o9v002fkadyqn9i67e4"}],"Tag":[{"name":"foo bar baz","_id":"ci89i0o8r0001aodyw1qayctx"},{"name":"laptop cleaning","_id":"ci8aw1o8b0001kadyyw6en9yy"},{"name":"N61ja","_id":"ci8aw1o8e0002kady5h8hw26u"},{"name":"ASUS","_id":"ci8aw1o8e0003kadybftdh566"},{"name":"vim","_id":"ci8aw1o8x0009kady718ejjlq"},{"name":"CentOS","_id":"ci8aw1o91000ekadyl0ekxfx0"},{"name":"Fedora","_id":"ci8aw1o91000fkadyohbxlnqp"},{"name":"Linux","_id":"ci8aw1o92000gkadyxo5dobtw"},{"name":"SVN","_id":"ci8aw1o92000hkadyt7s6pp54"},{"name":"maintenance","_id":"ci8aw1o92000ikady5w7r9a42"},{"name":"apache","_id":"ci8aw1o92000jkadyrvxz4emm"},{"name":"server","_id":"ci8aw1o92000kkadynu3drbbf"},{"name":"ssh","_id":"ci8aw1o94000tkady58r5c3vh"},{"name":"shell","_id":"ci8aw1o96000wkadyb3pau46n"},{"name":"PuTTY","_id":"ci8aw1o97000xkadybp1ko6rz"},{"name":"repo","_id":"ci8aw1o9a0012kady6gw3gzhu"},{"name":"yum","_id":"ci8aw1o9a0013kadyuaakiz0m"},{"name":"NFS","_id":"ci8aw1o9c001bkadyiir0wj8i"},{"name":"Xen","_id":"ci8aw1o9h001ckadyrjcqowfx"},{"name":"Virtualization","_id":"ci8aw1o9h001dkadyks8mrspi"},{"name":"web","_id":"ci8aw1o9j001ikadyeaq0i5gm"},{"name":"blog","_id":"ci8aw1o9j001jkadykdoxs8hz"},{"name":"google","_id":"ci8aw1o9m001nkadymxv1gpdf"},{"name":"search engine","_id":"ci8aw1o9m001okady7lhz9h7b"},{"name":"trick","_id":"ci8aw1o9m001pkadyludqi51s"},{"name":"thought","_id":"ci8aw1o9o001ukadyhmeislee"},{"name":"life","_id":"ci8aw1o9o001vkady1760m579"},{"name":"gnome","_id":"ci8aw1o9q001zkadya4nkbi14"},{"name":"conference","_id":"ci8aw1o9s0025kady0b071i6m"},{"name":"cloud computing","_id":"ci8aw1o9t0026kadyp8dci8f5"},{"name":"big data","_id":"ci8aw1o9t0027kady71g2jpuu"},{"name":"mobile","_id":"ci8aw1o9t0028kadyfpzg3aff"}]}}